
stm32_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08009a94  08009a94  00019a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b88  08009b88  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  08009b88  08009b88  00019b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b90  08009b90  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b90  08009b90  00019b90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b94  08009b94  00019b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08009b98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020274  2**0
                  CONTENTS
 10 .bss          0000560c  20000274  20000274  00020274  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20005880  20005880  00020274  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002115b  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004421  00000000  00000000  000413ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019b0  00000000  00000000  00045820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001820  00000000  00000000  000471d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002623c  00000000  00000000  000489f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020090  00000000  00000000  0006ec2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e61f5  00000000  00000000  0008ecbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174eb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006fd0  00000000  00000000  00174f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000274 	.word	0x20000274
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a7c 	.word	0x08009a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000278 	.word	0x20000278
 80001cc:	08009a7c 	.word	0x08009a7c

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__aeabi_d2f>:
 800096c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000970:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000974:	bf24      	itt	cs
 8000976:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800097a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800097e:	d90d      	bls.n	800099c <__aeabi_d2f+0x30>
 8000980:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000984:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000988:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800098c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000990:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000994:	bf08      	it	eq
 8000996:	f020 0001 	biceq.w	r0, r0, #1
 800099a:	4770      	bx	lr
 800099c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a0:	d121      	bne.n	80009e6 <__aeabi_d2f+0x7a>
 80009a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009a6:	bfbc      	itt	lt
 80009a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009ac:	4770      	bxlt	lr
 80009ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009b6:	f1c2 0218 	rsb	r2, r2, #24
 80009ba:	f1c2 0c20 	rsb	ip, r2, #32
 80009be:	fa10 f30c 	lsls.w	r3, r0, ip
 80009c2:	fa20 f002 	lsr.w	r0, r0, r2
 80009c6:	bf18      	it	ne
 80009c8:	f040 0001 	orrne.w	r0, r0, #1
 80009cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d8:	ea40 000c 	orr.w	r0, r0, ip
 80009dc:	fa23 f302 	lsr.w	r3, r3, r2
 80009e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009e4:	e7cc      	b.n	8000980 <__aeabi_d2f+0x14>
 80009e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ea:	d107      	bne.n	80009fc <__aeabi_d2f+0x90>
 80009ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f0:	bf1e      	ittt	ne
 80009f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009fa:	4770      	bxne	lr
 80009fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a00:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop

08000a0c <__aeabi_uldivmod>:
 8000a0c:	b953      	cbnz	r3, 8000a24 <__aeabi_uldivmod+0x18>
 8000a0e:	b94a      	cbnz	r2, 8000a24 <__aeabi_uldivmod+0x18>
 8000a10:	2900      	cmp	r1, #0
 8000a12:	bf08      	it	eq
 8000a14:	2800      	cmpeq	r0, #0
 8000a16:	bf1c      	itt	ne
 8000a18:	f04f 31ff 	movne.w	r1, #4294967295
 8000a1c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a20:	f000 b974 	b.w	8000d0c <__aeabi_idiv0>
 8000a24:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a2c:	f000 f806 	bl	8000a3c <__udivmoddi4>
 8000a30:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a38:	b004      	add	sp, #16
 8000a3a:	4770      	bx	lr

08000a3c <__udivmoddi4>:
 8000a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a40:	9d08      	ldr	r5, [sp, #32]
 8000a42:	4604      	mov	r4, r0
 8000a44:	468e      	mov	lr, r1
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d14d      	bne.n	8000ae6 <__udivmoddi4+0xaa>
 8000a4a:	428a      	cmp	r2, r1
 8000a4c:	4694      	mov	ip, r2
 8000a4e:	d969      	bls.n	8000b24 <__udivmoddi4+0xe8>
 8000a50:	fab2 f282 	clz	r2, r2
 8000a54:	b152      	cbz	r2, 8000a6c <__udivmoddi4+0x30>
 8000a56:	fa01 f302 	lsl.w	r3, r1, r2
 8000a5a:	f1c2 0120 	rsb	r1, r2, #32
 8000a5e:	fa20 f101 	lsr.w	r1, r0, r1
 8000a62:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a66:	ea41 0e03 	orr.w	lr, r1, r3
 8000a6a:	4094      	lsls	r4, r2
 8000a6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a70:	0c21      	lsrs	r1, r4, #16
 8000a72:	fbbe f6f8 	udiv	r6, lr, r8
 8000a76:	fa1f f78c 	uxth.w	r7, ip
 8000a7a:	fb08 e316 	mls	r3, r8, r6, lr
 8000a7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a82:	fb06 f107 	mul.w	r1, r6, r7
 8000a86:	4299      	cmp	r1, r3
 8000a88:	d90a      	bls.n	8000aa0 <__udivmoddi4+0x64>
 8000a8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a8e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a92:	f080 811f 	bcs.w	8000cd4 <__udivmoddi4+0x298>
 8000a96:	4299      	cmp	r1, r3
 8000a98:	f240 811c 	bls.w	8000cd4 <__udivmoddi4+0x298>
 8000a9c:	3e02      	subs	r6, #2
 8000a9e:	4463      	add	r3, ip
 8000aa0:	1a5b      	subs	r3, r3, r1
 8000aa2:	b2a4      	uxth	r4, r4
 8000aa4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa8:	fb08 3310 	mls	r3, r8, r0, r3
 8000aac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab0:	fb00 f707 	mul.w	r7, r0, r7
 8000ab4:	42a7      	cmp	r7, r4
 8000ab6:	d90a      	bls.n	8000ace <__udivmoddi4+0x92>
 8000ab8:	eb1c 0404 	adds.w	r4, ip, r4
 8000abc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac0:	f080 810a 	bcs.w	8000cd8 <__udivmoddi4+0x29c>
 8000ac4:	42a7      	cmp	r7, r4
 8000ac6:	f240 8107 	bls.w	8000cd8 <__udivmoddi4+0x29c>
 8000aca:	4464      	add	r4, ip
 8000acc:	3802      	subs	r0, #2
 8000ace:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ad2:	1be4      	subs	r4, r4, r7
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	b11d      	cbz	r5, 8000ae0 <__udivmoddi4+0xa4>
 8000ad8:	40d4      	lsrs	r4, r2
 8000ada:	2300      	movs	r3, #0
 8000adc:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae0:	4631      	mov	r1, r6
 8000ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae6:	428b      	cmp	r3, r1
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0xc2>
 8000aea:	2d00      	cmp	r5, #0
 8000aec:	f000 80ef 	beq.w	8000cce <__udivmoddi4+0x292>
 8000af0:	2600      	movs	r6, #0
 8000af2:	e9c5 0100 	strd	r0, r1, [r5]
 8000af6:	4630      	mov	r0, r6
 8000af8:	4631      	mov	r1, r6
 8000afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afe:	fab3 f683 	clz	r6, r3
 8000b02:	2e00      	cmp	r6, #0
 8000b04:	d14a      	bne.n	8000b9c <__udivmoddi4+0x160>
 8000b06:	428b      	cmp	r3, r1
 8000b08:	d302      	bcc.n	8000b10 <__udivmoddi4+0xd4>
 8000b0a:	4282      	cmp	r2, r0
 8000b0c:	f200 80f9 	bhi.w	8000d02 <__udivmoddi4+0x2c6>
 8000b10:	1a84      	subs	r4, r0, r2
 8000b12:	eb61 0303 	sbc.w	r3, r1, r3
 8000b16:	2001      	movs	r0, #1
 8000b18:	469e      	mov	lr, r3
 8000b1a:	2d00      	cmp	r5, #0
 8000b1c:	d0e0      	beq.n	8000ae0 <__udivmoddi4+0xa4>
 8000b1e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b22:	e7dd      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000b24:	b902      	cbnz	r2, 8000b28 <__udivmoddi4+0xec>
 8000b26:	deff      	udf	#255	; 0xff
 8000b28:	fab2 f282 	clz	r2, r2
 8000b2c:	2a00      	cmp	r2, #0
 8000b2e:	f040 8092 	bne.w	8000c56 <__udivmoddi4+0x21a>
 8000b32:	eba1 010c 	sub.w	r1, r1, ip
 8000b36:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b3a:	fa1f fe8c 	uxth.w	lr, ip
 8000b3e:	2601      	movs	r6, #1
 8000b40:	0c20      	lsrs	r0, r4, #16
 8000b42:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b46:	fb07 1113 	mls	r1, r7, r3, r1
 8000b4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b4e:	fb0e f003 	mul.w	r0, lr, r3
 8000b52:	4288      	cmp	r0, r1
 8000b54:	d908      	bls.n	8000b68 <__udivmoddi4+0x12c>
 8000b56:	eb1c 0101 	adds.w	r1, ip, r1
 8000b5a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b5e:	d202      	bcs.n	8000b66 <__udivmoddi4+0x12a>
 8000b60:	4288      	cmp	r0, r1
 8000b62:	f200 80cb 	bhi.w	8000cfc <__udivmoddi4+0x2c0>
 8000b66:	4643      	mov	r3, r8
 8000b68:	1a09      	subs	r1, r1, r0
 8000b6a:	b2a4      	uxth	r4, r4
 8000b6c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b70:	fb07 1110 	mls	r1, r7, r0, r1
 8000b74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b78:	fb0e fe00 	mul.w	lr, lr, r0
 8000b7c:	45a6      	cmp	lr, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x156>
 8000b80:	eb1c 0404 	adds.w	r4, ip, r4
 8000b84:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b88:	d202      	bcs.n	8000b90 <__udivmoddi4+0x154>
 8000b8a:	45a6      	cmp	lr, r4
 8000b8c:	f200 80bb 	bhi.w	8000d06 <__udivmoddi4+0x2ca>
 8000b90:	4608      	mov	r0, r1
 8000b92:	eba4 040e 	sub.w	r4, r4, lr
 8000b96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b9a:	e79c      	b.n	8000ad6 <__udivmoddi4+0x9a>
 8000b9c:	f1c6 0720 	rsb	r7, r6, #32
 8000ba0:	40b3      	lsls	r3, r6
 8000ba2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ba6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000baa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bae:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb2:	431c      	orrs	r4, r3
 8000bb4:	40f9      	lsrs	r1, r7
 8000bb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bba:	fa00 f306 	lsl.w	r3, r0, r6
 8000bbe:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bc2:	0c20      	lsrs	r0, r4, #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fb09 1118 	mls	r1, r9, r8, r1
 8000bcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd0:	fb08 f00e 	mul.w	r0, r8, lr
 8000bd4:	4288      	cmp	r0, r1
 8000bd6:	fa02 f206 	lsl.w	r2, r2, r6
 8000bda:	d90b      	bls.n	8000bf4 <__udivmoddi4+0x1b8>
 8000bdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000be0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000be4:	f080 8088 	bcs.w	8000cf8 <__udivmoddi4+0x2bc>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f240 8085 	bls.w	8000cf8 <__udivmoddi4+0x2bc>
 8000bee:	f1a8 0802 	sub.w	r8, r8, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1a09      	subs	r1, r1, r0
 8000bf6:	b2a4      	uxth	r4, r4
 8000bf8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bfc:	fb09 1110 	mls	r1, r9, r0, r1
 8000c00:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c04:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c08:	458e      	cmp	lr, r1
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x1e2>
 8000c0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c10:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c14:	d26c      	bcs.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c16:	458e      	cmp	lr, r1
 8000c18:	d96a      	bls.n	8000cf0 <__udivmoddi4+0x2b4>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4461      	add	r1, ip
 8000c1e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c22:	fba0 9402 	umull	r9, r4, r0, r2
 8000c26:	eba1 010e 	sub.w	r1, r1, lr
 8000c2a:	42a1      	cmp	r1, r4
 8000c2c:	46c8      	mov	r8, r9
 8000c2e:	46a6      	mov	lr, r4
 8000c30:	d356      	bcc.n	8000ce0 <__udivmoddi4+0x2a4>
 8000c32:	d053      	beq.n	8000cdc <__udivmoddi4+0x2a0>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x212>
 8000c36:	ebb3 0208 	subs.w	r2, r3, r8
 8000c3a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c3e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c42:	fa22 f306 	lsr.w	r3, r2, r6
 8000c46:	40f1      	lsrs	r1, r6
 8000c48:	431f      	orrs	r7, r3
 8000c4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	f1c2 0320 	rsb	r3, r2, #32
 8000c5a:	40d8      	lsrs	r0, r3
 8000c5c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c60:	fa21 f303 	lsr.w	r3, r1, r3
 8000c64:	4091      	lsls	r1, r2
 8000c66:	4301      	orrs	r1, r0
 8000c68:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c74:	fb07 3610 	mls	r6, r7, r0, r3
 8000c78:	0c0b      	lsrs	r3, r1, #16
 8000c7a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c7e:	fb00 f60e 	mul.w	r6, r0, lr
 8000c82:	429e      	cmp	r6, r3
 8000c84:	fa04 f402 	lsl.w	r4, r4, r2
 8000c88:	d908      	bls.n	8000c9c <__udivmoddi4+0x260>
 8000c8a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c92:	d22f      	bcs.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c94:	429e      	cmp	r6, r3
 8000c96:	d92d      	bls.n	8000cf4 <__udivmoddi4+0x2b8>
 8000c98:	3802      	subs	r0, #2
 8000c9a:	4463      	add	r3, ip
 8000c9c:	1b9b      	subs	r3, r3, r6
 8000c9e:	b289      	uxth	r1, r1
 8000ca0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ca4:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cac:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb0:	428b      	cmp	r3, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x28a>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cbc:	d216      	bcs.n	8000cec <__udivmoddi4+0x2b0>
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d914      	bls.n	8000cec <__udivmoddi4+0x2b0>
 8000cc2:	3e02      	subs	r6, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ccc:	e738      	b.n	8000b40 <__udivmoddi4+0x104>
 8000cce:	462e      	mov	r6, r5
 8000cd0:	4628      	mov	r0, r5
 8000cd2:	e705      	b.n	8000ae0 <__udivmoddi4+0xa4>
 8000cd4:	4606      	mov	r6, r0
 8000cd6:	e6e3      	b.n	8000aa0 <__udivmoddi4+0x64>
 8000cd8:	4618      	mov	r0, r3
 8000cda:	e6f8      	b.n	8000ace <__udivmoddi4+0x92>
 8000cdc:	454b      	cmp	r3, r9
 8000cde:	d2a9      	bcs.n	8000c34 <__udivmoddi4+0x1f8>
 8000ce0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ce4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce8:	3801      	subs	r0, #1
 8000cea:	e7a3      	b.n	8000c34 <__udivmoddi4+0x1f8>
 8000cec:	4646      	mov	r6, r8
 8000cee:	e7ea      	b.n	8000cc6 <__udivmoddi4+0x28a>
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	e794      	b.n	8000c1e <__udivmoddi4+0x1e2>
 8000cf4:	4640      	mov	r0, r8
 8000cf6:	e7d1      	b.n	8000c9c <__udivmoddi4+0x260>
 8000cf8:	46d0      	mov	r8, sl
 8000cfa:	e77b      	b.n	8000bf4 <__udivmoddi4+0x1b8>
 8000cfc:	3b02      	subs	r3, #2
 8000cfe:	4461      	add	r1, ip
 8000d00:	e732      	b.n	8000b68 <__udivmoddi4+0x12c>
 8000d02:	4630      	mov	r0, r6
 8000d04:	e709      	b.n	8000b1a <__udivmoddi4+0xde>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	e742      	b.n	8000b92 <__udivmoddi4+0x156>

08000d0c <__aeabi_idiv0>:
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d16:	463b      	mov	r3, r7
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d22:	4b60      	ldr	r3, [pc, #384]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d24:	4a60      	ldr	r2, [pc, #384]	; (8000ea8 <MX_ADC1_Init+0x198>)
 8000d26:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d28:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d2e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d30:	4b5c      	ldr	r3, [pc, #368]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d36:	4b5b      	ldr	r3, [pc, #364]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d38:	2201      	movs	r2, #1
 8000d3a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b59      	ldr	r3, [pc, #356]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b58      	ldr	r3, [pc, #352]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d4a:	4b56      	ldr	r3, [pc, #344]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d50:	4b54      	ldr	r3, [pc, #336]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d52:	4a56      	ldr	r2, [pc, #344]	; (8000eac <MX_ADC1_Init+0x19c>)
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d56:	4b53      	ldr	r3, [pc, #332]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000d5c:	4b51      	ldr	r3, [pc, #324]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d5e:	220a      	movs	r2, #10
 8000d60:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d62:	4b50      	ldr	r3, [pc, #320]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d6a:	4b4e      	ldr	r3, [pc, #312]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d70:	484c      	ldr	r0, [pc, #304]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d72:	f002 fadd 	bl	8003330 <HAL_ADC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d7c:	f001 fa48 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d84:	2301      	movs	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4844      	ldr	r0, [pc, #272]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000d92:	f002 fb11 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000d9c:	f001 fa38 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000da4:	2302      	movs	r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	483d      	ldr	r0, [pc, #244]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000dae:	f002 fb03 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000db8:	f001 fa2a 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4836      	ldr	r0, [pc, #216]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000dca:	f002 faf5 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000dd4:	f001 fa1c 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de0:	463b      	mov	r3, r7
 8000de2:	4619      	mov	r1, r3
 8000de4:	482f      	ldr	r0, [pc, #188]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000de6:	f002 fae7 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000df0:	f001 fa0e 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000df4:	2308      	movs	r3, #8
 8000df6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4828      	ldr	r0, [pc, #160]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e02:	f002 fad9 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000e0c:	f001 fa00 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000e10:	2309      	movs	r3, #9
 8000e12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000e14:	2306      	movs	r3, #6
 8000e16:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	463b      	mov	r3, r7
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4821      	ldr	r0, [pc, #132]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e1e:	f002 facb 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000e28:	f001 f9f2 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000e2c:	230b      	movs	r3, #11
 8000e2e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000e30:	2307      	movs	r3, #7
 8000e32:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e34:	463b      	mov	r3, r7
 8000e36:	4619      	mov	r1, r3
 8000e38:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e3a:	f002 fabd 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000e44:	f001 f9e4 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000e4c:	2308      	movs	r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e50:	463b      	mov	r3, r7
 8000e52:	4619      	mov	r1, r3
 8000e54:	4813      	ldr	r0, [pc, #76]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e56:	f002 faaf 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000e60:	f001 f9d6 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000e64:	230e      	movs	r3, #14
 8000e66:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000e68:	2309      	movs	r3, #9
 8000e6a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e72:	f002 faa1 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000e7c:	f001 f9c8 	bl	8002210 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000e80:	230f      	movs	r3, #15
 8000e82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8000e84:	230a      	movs	r3, #10
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC1_Init+0x194>)
 8000e8e:	f002 fa93 	bl	80033b8 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000e98:	f001 f9ba 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000290 	.word	0x20000290
 8000ea8:	40012000 	.word	0x40012000
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08c      	sub	sp, #48	; 0x30
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a4a      	ldr	r2, [pc, #296]	; (8000ff8 <HAL_ADC_MspInit+0x148>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	f040 808d 	bne.w	8000fee <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
 8000ed8:	4b48      	ldr	r3, [pc, #288]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000edc:	4a47      	ldr	r2, [pc, #284]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000ede:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee4:	4b45      	ldr	r3, [pc, #276]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eec:	61bb      	str	r3, [r7, #24]
 8000eee:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
 8000ef4:	4b41      	ldr	r3, [pc, #260]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	4a40      	ldr	r2, [pc, #256]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6313      	str	r3, [r2, #48]	; 0x30
 8000f00:	4b3e      	ldr	r3, [pc, #248]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	4b3a      	ldr	r3, [pc, #232]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f14:	4a39      	ldr	r2, [pc, #228]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1c:	4b37      	ldr	r3, [pc, #220]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f20:	f003 0301 	and.w	r3, r3, #1
 8000f24:	613b      	str	r3, [r7, #16]
 8000f26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	4b33      	ldr	r3, [pc, #204]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f30:	4a32      	ldr	r2, [pc, #200]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f32:	f043 0302 	orr.w	r3, r3, #2
 8000f36:	6313      	str	r3, [r2, #48]	; 0x30
 8000f38:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <HAL_ADC_MspInit+0x14c>)
 8000f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ADC7_Pin|ADC8_Pin|ADC9_Pin|ADC10_Pin;
 8000f44:	2336      	movs	r3, #54	; 0x36
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 031c 	add.w	r3, r7, #28
 8000f54:	4619      	mov	r1, r3
 8000f56:	482a      	ldr	r0, [pc, #168]	; (8001000 <HAL_ADC_MspInit+0x150>)
 8000f58:	f003 f89e 	bl	8004098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC1_Pin|ADC2_Pin|ADC3_Pin|ADC4_Pin;
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f60:	2303      	movs	r3, #3
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4825      	ldr	r0, [pc, #148]	; (8001004 <HAL_ADC_MspInit+0x154>)
 8000f70:	f003 f892 	bl	8004098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC5_Pin|ADC6_Pin;
 8000f74:	2303      	movs	r3, #3
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4820      	ldr	r0, [pc, #128]	; (8001008 <HAL_ADC_MspInit+0x158>)
 8000f88:	f003 f886 	bl	8004098 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000f8c:	4b1f      	ldr	r3, [pc, #124]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_ADC_MspInit+0x160>)
 8000f90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000f92:	4b1e      	ldr	r3, [pc, #120]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f98:	4b1c      	ldr	r3, [pc, #112]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f9e:	4b1b      	ldr	r3, [pc, #108]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fa4:	4b19      	ldr	r3, [pc, #100]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fa6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fac:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fb2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fbc:	4b13      	ldr	r3, [pc, #76]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fd4:	f002 fcf0 	bl	80039b8 <HAL_DMA_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 8000fde:	f001 f917 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a09      	ldr	r2, [pc, #36]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe8:	4a08      	ldr	r2, [pc, #32]	; (800100c <HAL_ADC_MspInit+0x15c>)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3730      	adds	r7, #48	; 0x30
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40012000 	.word	0x40012000
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020800 	.word	0x40020800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400
 800100c:	200002d8 	.word	0x200002d8
 8001010:	40026410 	.word	0x40026410

08001014 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <MX_DMA_Init+0x5c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a13      	ldr	r2, [pc, #76]	; (8001070 <MX_DMA_Init+0x5c>)
 8001024:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <MX_DMA_Init+0x5c>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2105      	movs	r1, #5
 800103a:	2038      	movs	r0, #56	; 0x38
 800103c:	f002 fc92 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001040:	2038      	movs	r0, #56	; 0x38
 8001042:	f002 fcab 	bl	800399c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	2105      	movs	r1, #5
 800104a:	203a      	movs	r0, #58	; 0x3a
 800104c:	f002 fc8a 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001050:	203a      	movs	r0, #58	; 0x3a
 8001052:	f002 fca3 	bl	800399c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	2105      	movs	r1, #5
 800105a:	2046      	movs	r0, #70	; 0x46
 800105c:	f002 fc82 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001060:	2046      	movs	r0, #70	; 0x46
 8001062:	f002 fc9b 	bl	800399c <HAL_NVIC_EnableIRQ>

}
 8001066:	bf00      	nop
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800

08001074 <reset_options>:
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};

static void reset_options(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
	// speed
	PID[0].target = 0.0;
 8001078:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <reset_options+0x60>)
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
	PID[1].target = 0.0;
 8001080:	4b14      	ldr	r3, [pc, #80]	; (80010d4 <reset_options+0x60>)
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	639a      	str	r2, [r3, #56]	; 0x38

	PID[0].sum_error = 0.0;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <reset_options+0x60>)
 800108a:	f04f 0200 	mov.w	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
	PID[1].sum_error = 0.0;
 8001090:	4b10      	ldr	r3, [pc, #64]	; (80010d4 <reset_options+0x60>)
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	645a      	str	r2, [r3, #68]	; 0x44
	// angle pos
	PID[3].target = 0.0;
 8001098:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <reset_options+0x60>)
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	PID[2].sum_error = 0.0;
 80010a2:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <reset_options+0x60>)
 80010a4:	f04f 0200 	mov.w	r2, #0
 80010a8:	679a      	str	r2, [r3, #120]	; 0x78
	// stat parameters
	robot.arm_angle = 0.0;
 80010aa:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <reset_options+0x64>)
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	61da      	str	r2, [r3, #28]
	robot.direction = 0;
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <reset_options+0x64>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	761a      	strb	r2, [r3, #24]
	robot.flag = false;
 80010b8:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <reset_options+0x64>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	745a      	strb	r2, [r3, #17]
	robot.speed = 0.0;
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <reset_options+0x64>)
 80010c0:	f04f 0200 	mov.w	r2, #0
 80010c4:	615a      	str	r2, [r3, #20]
	memset(robot.modbus, 0, sizeof(robot.modbus));
 80010c6:	2211      	movs	r2, #17
 80010c8:	2100      	movs	r1, #0
 80010ca:	4803      	ldr	r0, [pc, #12]	; (80010d8 <reset_options+0x64>)
 80010cc:	f008 fc0c 	bl	80098e8 <memset>
}
 80010d0:	bf00      	nop
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000934 	.word	0x20000934
 80010d8:	20000338 	.word	0x20000338

080010dc <check_modbus_crc>:

static void check_modbus_crc(unsigned char *puchmsg, unsigned short usDataLen)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	807b      	strh	r3, [r7, #2]
	// low high crc bytes initialized
	unsigned char uchCRCHi = 0xFF;
 80010e8:	23ff      	movs	r3, #255	; 0xff
 80010ea:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF;
 80010ec:	23ff      	movs	r3, #255	; 0xff
 80010ee:	73bb      	strb	r3, [r7, #14]

	unsigned index;
	while(usDataLen--) {
 80010f0:	e013      	b.n	800111a <check_modbus_crc+0x3e>
		index = uchCRCHi ^ *puchmsg++;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	1c5a      	adds	r2, r3, #1
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	781a      	ldrb	r2, [r3, #0]
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	4053      	eors	r3, r2
 80010fe:	b2db      	uxtb	r3, r3
 8001100:	60bb      	str	r3, [r7, #8]
		uchCRCHi = uchCRCLo ^ CRCHi[index];
 8001102:	4a0f      	ldr	r2, [pc, #60]	; (8001140 <check_modbus_crc+0x64>)
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	4413      	add	r3, r2
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	7bbb      	ldrb	r3, [r7, #14]
 800110c:	4053      	eors	r3, r2
 800110e:	73fb      	strb	r3, [r7, #15]
		uchCRCLo = CRCLo[index];
 8001110:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <check_modbus_crc+0x68>)
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	73bb      	strb	r3, [r7, #14]
	while(usDataLen--) {
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	1e5a      	subs	r2, r3, #1
 800111e:	807a      	strh	r2, [r7, #2]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e6      	bne.n	80010f2 <check_modbus_crc+0x16>
	}
	robot.crc_check[0] = uchCRCLo;
 8001124:	4a08      	ldr	r2, [pc, #32]	; (8001148 <check_modbus_crc+0x6c>)
 8001126:	7bbb      	ldrb	r3, [r7, #14]
 8001128:	f882 3020 	strb.w	r3, [r2, #32]
	robot.crc_check[1] = uchCRCHi;
 800112c:	4a06      	ldr	r2, [pc, #24]	; (8001148 <check_modbus_crc+0x6c>)
 800112e:	7bfb      	ldrb	r3, [r7, #15]
 8001130:	f882 3021 	strb.w	r3, [r2, #33]	; 0x21
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000000 	.word	0x20000000
 8001144:	20000100 	.word	0x20000100
 8001148:	20000338 	.word	0x20000338

0800114c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of startTask */
  startTaskHandle = osThreadNew(StartDefaultTask, NULL, &startTask_attributes);
 8001150:	4a08      	ldr	r2, [pc, #32]	; (8001174 <MX_FREERTOS_Init+0x28>)
 8001152:	2100      	movs	r1, #0
 8001154:	4808      	ldr	r0, [pc, #32]	; (8001178 <MX_FREERTOS_Init+0x2c>)
 8001156:	f005 fd57 	bl	8006c08 <osThreadNew>
 800115a:	4603      	mov	r3, r0
 800115c:	4a07      	ldr	r2, [pc, #28]	; (800117c <MX_FREERTOS_Init+0x30>)
 800115e:	6013      	str	r3, [r2, #0]

  /* creation of Modbus */
  ModbusHandle = osThreadNew(ModBus_Task, NULL, &Modbus_attributes);
 8001160:	4a07      	ldr	r2, [pc, #28]	; (8001180 <MX_FREERTOS_Init+0x34>)
 8001162:	2100      	movs	r1, #0
 8001164:	4807      	ldr	r0, [pc, #28]	; (8001184 <MX_FREERTOS_Init+0x38>)
 8001166:	f005 fd4f 	bl	8006c08 <osThreadNew>
 800116a:	4603      	mov	r3, r0
 800116c:	4a06      	ldr	r2, [pc, #24]	; (8001188 <MX_FREERTOS_Init+0x3c>)
 800116e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001170:	bf00      	nop
 8001172:	bd80      	pop	{r7, pc}
 8001174:	08009ac0 	.word	0x08009ac0
 8001178:	0800118d 	.word	0x0800118d
 800117c:	20000360 	.word	0x20000360
 8001180:	08009ae4 	.word	0x08009ae4
 8001184:	080012d9 	.word	0x080012d9
 8001188:	20000620 	.word	0x20000620

0800118c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	reset_options();
 8001194:	f7ff ff6e 	bl	8001074 <reset_options>
  /* Infinite loop */
  for(;;)
  {
	  if(!robot.flag) xTaskNotifyGive(ModbusHandle);
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <StartDefaultTask+0x138>)
 800119a:	7c5b      	ldrb	r3, [r3, #17]
 800119c:	f083 0301 	eor.w	r3, r3, #1
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <StartDefaultTask+0x2a>
 80011a6:	4b48      	ldr	r3, [pc, #288]	; (80012c8 <StartDefaultTask+0x13c>)
 80011a8:	6818      	ldr	r0, [r3, #0]
 80011aa:	2300      	movs	r3, #0
 80011ac:	2202      	movs	r2, #2
 80011ae:	2100      	movs	r1, #0
 80011b0:	f007 ff06 	bl	8008fc0 <xTaskGenericNotify>
 80011b4:	e07e      	b.n	80012b4 <StartDefaultTask+0x128>
	  else
	  {
		  robot.flag = false;
 80011b6:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <StartDefaultTask+0x138>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	745a      	strb	r2, [r3, #17]
		  if(robot.arm_angle >= 0.0 && robot.arm_angle <= 180.0)
 80011bc:	4b41      	ldr	r3, [pc, #260]	; (80012c4 <StartDefaultTask+0x138>)
 80011be:	edd3 7a07 	vldr	s15, [r3, #28]
 80011c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	db12      	blt.n	80011f2 <StartDefaultTask+0x66>
 80011cc:	4b3d      	ldr	r3, [pc, #244]	; (80012c4 <StartDefaultTask+0x138>)
 80011ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80011d2:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80012cc <StartDefaultTask+0x140>
 80011d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011de:	d808      	bhi.n	80011f2 <StartDefaultTask+0x66>
		  {
			  PID[3].target = -robot.arm_angle;
 80011e0:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <StartDefaultTask+0x138>)
 80011e2:	edd3 7a07 	vldr	s15, [r3, #28]
 80011e6:	eef1 7a67 	vneg.f32	s15, s15
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <StartDefaultTask+0x144>)
 80011ec:	edc3 7a28 	vstr	s15, [r3, #160]	; 0xa0
 80011f0:	e004      	b.n	80011fc <StartDefaultTask+0x70>
		  } else PID[3].target = 0.0;
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <StartDefaultTask+0x144>)
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		  if(robot.speed <= 0.25)
 80011fc:	4b31      	ldr	r3, [pc, #196]	; (80012c4 <StartDefaultTask+0x138>)
 80011fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001202:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120e:	d84e      	bhi.n	80012ae <StartDefaultTask+0x122>
		  {
			  switch(robot.direction)
 8001210:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <StartDefaultTask+0x138>)
 8001212:	7e1b      	ldrb	r3, [r3, #24]
 8001214:	2b04      	cmp	r3, #4
 8001216:	d84a      	bhi.n	80012ae <StartDefaultTask+0x122>
 8001218:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <StartDefaultTask+0x94>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001235 	.word	0x08001235
 8001224:	08001247 	.word	0x08001247
 8001228:	08001261 	.word	0x08001261
 800122c:	08001273 	.word	0x08001273
 8001230:	08001295 	.word	0x08001295
			  {
			  case 0:
				  PID[0].target = 0.0;
 8001234:	4b26      	ldr	r3, [pc, #152]	; (80012d0 <StartDefaultTask+0x144>)
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	605a      	str	r2, [r3, #4]
				  PID[1].target = 0.0;
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <StartDefaultTask+0x144>)
 800123e:	f04f 0200 	mov.w	r2, #0
 8001242:	639a      	str	r2, [r3, #56]	; 0x38
				  break;
 8001244:	e033      	b.n	80012ae <StartDefaultTask+0x122>

			  case 1:
				  PID[0].target = -robot.speed;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <StartDefaultTask+0x138>)
 8001248:	edd3 7a05 	vldr	s15, [r3, #20]
 800124c:	eef1 7a67 	vneg.f32	s15, s15
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <StartDefaultTask+0x144>)
 8001252:	edc3 7a01 	vstr	s15, [r3, #4]
				  PID[1].target = robot.speed;
 8001256:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <StartDefaultTask+0x138>)
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <StartDefaultTask+0x144>)
 800125c:	6393      	str	r3, [r2, #56]	; 0x38
				  break;
 800125e:	e026      	b.n	80012ae <StartDefaultTask+0x122>

			  case 2:
				  PID[0].target = robot.speed;
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <StartDefaultTask+0x138>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a1a      	ldr	r2, [pc, #104]	; (80012d0 <StartDefaultTask+0x144>)
 8001266:	6053      	str	r3, [r2, #4]
				  PID[1].target = robot.speed;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <StartDefaultTask+0x138>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a18      	ldr	r2, [pc, #96]	; (80012d0 <StartDefaultTask+0x144>)
 800126e:	6393      	str	r3, [r2, #56]	; 0x38
				  break;
 8001270:	e01d      	b.n	80012ae <StartDefaultTask+0x122>

			  case 3:
				  PID[0].target = -robot.speed;
 8001272:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <StartDefaultTask+0x138>)
 8001274:	edd3 7a05 	vldr	s15, [r3, #20]
 8001278:	eef1 7a67 	vneg.f32	s15, s15
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <StartDefaultTask+0x144>)
 800127e:	edc3 7a01 	vstr	s15, [r3, #4]
				  PID[1].target = -robot.speed;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <StartDefaultTask+0x138>)
 8001284:	edd3 7a05 	vldr	s15, [r3, #20]
 8001288:	eef1 7a67 	vneg.f32	s15, s15
 800128c:	4b10      	ldr	r3, [pc, #64]	; (80012d0 <StartDefaultTask+0x144>)
 800128e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				  break;
 8001292:	e00c      	b.n	80012ae <StartDefaultTask+0x122>

			  case 4:
				  PID[0].target = robot.speed;
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <StartDefaultTask+0x138>)
 8001296:	695b      	ldr	r3, [r3, #20]
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <StartDefaultTask+0x144>)
 800129a:	6053      	str	r3, [r2, #4]
				  PID[1].target = -robot.speed;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <StartDefaultTask+0x138>)
 800129e:	edd3 7a05 	vldr	s15, [r3, #20]
 80012a2:	eef1 7a67 	vneg.f32	s15, s15
 80012a6:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <StartDefaultTask+0x144>)
 80012a8:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
				  break;
 80012ac:	bf00      	nop
			  }
		  }
		  robot.flag = false;
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <StartDefaultTask+0x138>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	745a      	strb	r2, [r3, #17]
	  }
	  sync = 0;
 80012b4:	4b07      	ldr	r3, [pc, #28]	; (80012d4 <StartDefaultTask+0x148>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
	  osDelay(10 / portTICK_RATE_MS);
 80012ba:	200a      	movs	r0, #10
 80012bc:	f005 fd36 	bl	8006d2c <osDelay>
	  if(!robot.flag) xTaskNotifyGive(ModbusHandle);
 80012c0:	e76a      	b.n	8001198 <StartDefaultTask+0xc>
 80012c2:	bf00      	nop
 80012c4:	20000338 	.word	0x20000338
 80012c8:	20000620 	.word	0x20000620
 80012cc:	43340000 	.word	0x43340000
 80012d0:	20000934 	.word	0x20000934
 80012d4:	2000035c 	.word	0x2000035c

080012d8 <ModBus_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModBus_Task */
void ModBus_Task(void *argument)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModBus_Task */
	uint32_t prev_time = HAL_GetTick();
 80012e0:	f002 f81a 	bl	8003318 <HAL_GetTick>
 80012e4:	6178      	str	r0, [r7, #20]
	uint32_t time = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  for(;;)
  {
    ulTaskNotifyTake(0, portMAX_DELAY);
 80012ea:	f04f 31ff 	mov.w	r1, #4294967295
 80012ee:	2000      	movs	r0, #0
 80012f0:	f007 fe1a 	bl	8008f28 <ulTaskNotifyTake>
    if(!robot.flag) HAL_UART_Receive_DMA(&huart1, robot.modbus, sizeof(robot.modbus));
 80012f4:	4b35      	ldr	r3, [pc, #212]	; (80013cc <ModBus_Task+0xf4>)
 80012f6:	7c5b      	ldrb	r3, [r3, #17]
 80012f8:	f083 0301 	eor.w	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d004      	beq.n	800130c <ModBus_Task+0x34>
 8001302:	2211      	movs	r2, #17
 8001304:	4931      	ldr	r1, [pc, #196]	; (80013cc <ModBus_Task+0xf4>)
 8001306:	4832      	ldr	r0, [pc, #200]	; (80013d0 <ModBus_Task+0xf8>)
 8001308:	f004 feff 	bl	800610a <HAL_UART_Receive_DMA>
    time = HAL_GetTick();
 800130c:	f002 f804 	bl	8003318 <HAL_GetTick>
 8001310:	6138      	str	r0, [r7, #16]
    if(sync == 1)
 8001312:	4b30      	ldr	r3, [pc, #192]	; (80013d4 <ModBus_Task+0xfc>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d14b      	bne.n	80013b2 <ModBus_Task+0xda>
    {
    	prev_time = time;
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	617b      	str	r3, [r7, #20]
    	robot.flag = true;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <ModBus_Task+0xf4>)
 8001320:	2201      	movs	r2, #1
 8001322:	745a      	strb	r2, [r3, #17]
    	check_modbus_crc(robot.modbus, sizeof(robot.modbus) - 4);
 8001324:	210d      	movs	r1, #13
 8001326:	4829      	ldr	r0, [pc, #164]	; (80013cc <ModBus_Task+0xf4>)
 8001328:	f7ff fed8 	bl	80010dc <check_modbus_crc>
    	if(robot.crc_check[0] == robot.modbus[13] && robot.crc_check[1] == robot.modbus[14])
 800132c:	4b27      	ldr	r3, [pc, #156]	; (80013cc <ModBus_Task+0xf4>)
 800132e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <ModBus_Task+0xf4>)
 8001334:	7b5b      	ldrb	r3, [r3, #13]
 8001336:	429a      	cmp	r2, r3
 8001338:	d133      	bne.n	80013a2 <ModBus_Task+0xca>
 800133a:	4b24      	ldr	r3, [pc, #144]	; (80013cc <ModBus_Task+0xf4>)
 800133c:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001340:	4b22      	ldr	r3, [pc, #136]	; (80013cc <ModBus_Task+0xf4>)
 8001342:	7b9b      	ldrb	r3, [r3, #14]
 8001344:	429a      	cmp	r2, r3
 8001346:	d12c      	bne.n	80013a2 <ModBus_Task+0xca>
    	{
    		uint32_t tmp_speed_uint32_t = 0;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]
    		tmp_speed_uint32_t += robot.modbus[7] << 24;
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <ModBus_Task+0xf4>)
 800134e:	79db      	ldrb	r3, [r3, #7]
 8001350:	061b      	lsls	r3, r3, #24
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
    		tmp_speed_uint32_t += robot.modbus[8] << 16;
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <ModBus_Task+0xf4>)
 800135c:	7a1b      	ldrb	r3, [r3, #8]
 800135e:	041b      	lsls	r3, r3, #16
 8001360:	461a      	mov	r2, r3
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	4413      	add	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
    		tmp_speed_uint32_t += robot.modbus[9] << 8;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <ModBus_Task+0xf4>)
 800136a:	7a5b      	ldrb	r3, [r3, #9]
 800136c:	021b      	lsls	r3, r3, #8
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
    		tmp_speed_uint32_t += robot.modbus[10];
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <ModBus_Task+0xf4>)
 8001378:	7a9b      	ldrb	r3, [r3, #10]
 800137a:	461a      	mov	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	4413      	add	r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	68fb      	ldr	r3, [r7, #12]

    		memcpy(&robot.speed, &tmp_speed_uint32_t, sizeof(tmp_speed_uint32_t));
 8001384:	4a11      	ldr	r2, [pc, #68]	; (80013cc <ModBus_Task+0xf4>)
 8001386:	6153      	str	r3, [r2, #20]

    		robot.arm_angle = robot.modbus[12];
 8001388:	4b10      	ldr	r3, [pc, #64]	; (80013cc <ModBus_Task+0xf4>)
 800138a:	7b1b      	ldrb	r3, [r3, #12]
 800138c:	ee07 3a90 	vmov	s15, r3
 8001390:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <ModBus_Task+0xf4>)
 8001396:	edc3 7a07 	vstr	s15, [r3, #28]
    		robot.direction = robot.modbus[11];
 800139a:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <ModBus_Task+0xf4>)
 800139c:	7ada      	ldrb	r2, [r3, #11]
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <ModBus_Task+0xf4>)
 80013a0:	761a      	strb	r2, [r3, #24]
    	}
    	xTaskNotifyGive(startTaskHandle);
 80013a2:	4b0d      	ldr	r3, [pc, #52]	; (80013d8 <ModBus_Task+0x100>)
 80013a4:	6818      	ldr	r0, [r3, #0]
 80013a6:	2300      	movs	r3, #0
 80013a8:	2202      	movs	r2, #2
 80013aa:	2100      	movs	r1, #0
 80013ac:	f007 fe08 	bl	8008fc0 <xTaskGenericNotify>
 80013b0:	e007      	b.n	80013c2 <ModBus_Task+0xea>
    } else
    {
    	if(time - prev_time >= 2000)
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013bc:	d301      	bcc.n	80013c2 <ModBus_Task+0xea>
    	{
    		reset_options();
 80013be:	f7ff fe59 	bl	8001074 <reset_options>
    	}
    }
    osDelay(10 / portTICK_RATE_MS);
 80013c2:	200a      	movs	r0, #10
 80013c4:	f005 fcb2 	bl	8006d2c <osDelay>
    ulTaskNotifyTake(0, portMAX_DELAY);
 80013c8:	e78f      	b.n	80012ea <ModBus_Task+0x12>
 80013ca:	bf00      	nop
 80013cc:	20000338 	.word	0x20000338
 80013d0:	20000d1c 	.word	0x20000d1c
 80013d4:	2000035c 	.word	0x2000035c
 80013d8:	20000360 	.word	0x20000360

080013dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b08c      	sub	sp, #48	; 0x30
 80013e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
 80013f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4b88      	ldr	r3, [pc, #544]	; (8001618 <MX_GPIO_Init+0x23c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a87      	ldr	r2, [pc, #540]	; (8001618 <MX_GPIO_Init+0x23c>)
 80013fc:	f043 0310 	orr.w	r3, r3, #16
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b85      	ldr	r3, [pc, #532]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b81      	ldr	r3, [pc, #516]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a80      	ldr	r2, [pc, #512]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001418:	f043 0304 	orr.w	r3, r3, #4
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b7e      	ldr	r3, [pc, #504]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0304 	and.w	r3, r3, #4
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b7a      	ldr	r3, [pc, #488]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a79      	ldr	r2, [pc, #484]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b77      	ldr	r3, [pc, #476]	; (8001618 <MX_GPIO_Init+0x23c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b73      	ldr	r3, [pc, #460]	; (8001618 <MX_GPIO_Init+0x23c>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001450:	f043 0301 	orr.w	r3, r3, #1
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b70      	ldr	r3, [pc, #448]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b6c      	ldr	r3, [pc, #432]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a6b      	ldr	r2, [pc, #428]	; (8001618 <MX_GPIO_Init+0x23c>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b69      	ldr	r3, [pc, #420]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	4a64      	ldr	r2, [pc, #400]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	; 0x30
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <MX_GPIO_Init+0x23c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, BTN6_DIR_Pin|BTN5_DIR_Pin|BTN7_DIR_Pin|BTN3_DIR_Pin
 800149a:	2200      	movs	r2, #0
 800149c:	f247 5184 	movw	r1, #30084	; 0x7584
 80014a0:	485e      	ldr	r0, [pc, #376]	; (800161c <MX_GPIO_Init+0x240>)
 80014a2:	f002 ff95 	bl	80043d0 <HAL_GPIO_WritePin>
                          |BTN9_DIR_Pin|BTN8_DIR_Pin|BTN4_DIR_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, BTN1_DIR_Pin|BTN2_DIR_Pin|PIN1_12V_Pin|PIN2_12V_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 4143 	mov.w	r1, #49920	; 0xc300
 80014ac:	485c      	ldr	r0, [pc, #368]	; (8001620 <MX_GPIO_Init+0x244>)
 80014ae:	f002 ff8f 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN3_12V_GPIO_Port, PIN3_12V_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2120      	movs	r1, #32
 80014b6:	485b      	ldr	r0, [pc, #364]	; (8001624 <MX_GPIO_Init+0x248>)
 80014b8:	f002 ff8a 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BTN10_DIR_Pin|PIN6_12V_Pin|PIN5_12V_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f242 0130 	movw	r1, #8240	; 0x2030
 80014c2:	4859      	ldr	r0, [pc, #356]	; (8001628 <MX_GPIO_Init+0x24c>)
 80014c4:	f002 ff84 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PIN4_12V_GPIO_Port, PIN4_12V_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ce:	4857      	ldr	r0, [pc, #348]	; (800162c <MX_GPIO_Init+0x250>)
 80014d0:	f002 ff7e 	bl	80043d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = BTN6_DIR_Pin|BTN5_DIR_Pin|BTN7_DIR_Pin|BTN3_DIR_Pin
 80014d4:	f247 5384 	movw	r3, #30084	; 0x7584
 80014d8:	61fb      	str	r3, [r7, #28]
                          |BTN9_DIR_Pin|BTN8_DIR_Pin|BTN4_DIR_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014da:	2301      	movs	r3, #1
 80014dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	484b      	ldr	r0, [pc, #300]	; (800161c <MX_GPIO_Init+0x240>)
 80014ee:	f002 fdd3 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXTI5_Pin;
 80014f2:	2310      	movs	r3, #16
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXTI5_GPIO_Port, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4845      	ldr	r0, [pc, #276]	; (800161c <MX_GPIO_Init+0x240>)
 8001508:	f002 fdc6 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN1_DIR_Pin|BTN2_DIR_Pin|PIN1_12V_Pin|PIN2_12V_Pin;
 800150c:	f44f 4343 	mov.w	r3, #49920	; 0xc300
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	483e      	ldr	r0, [pc, #248]	; (8001620 <MX_GPIO_Init+0x244>)
 8001526:	f002 fdb7 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN3_12V_Pin;
 800152a:	2320      	movs	r3, #32
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PIN3_12V_GPIO_Port, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4838      	ldr	r0, [pc, #224]	; (8001624 <MX_GPIO_Init+0x248>)
 8001542:	f002 fda9 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BTN10_DIR_Pin|PIN6_12V_Pin|PIN5_12V_Pin;
 8001546:	f242 0330 	movw	r3, #8240	; 0x2030
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	4619      	mov	r1, r3
 800155e:	4832      	ldr	r0, [pc, #200]	; (8001628 <MX_GPIO_Init+0x24c>)
 8001560:	f002 fd9a 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = EXTI8_Pin|EXTI9_Pin|EXTI10_Pin|EXTI1_Pin
 8001564:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001568:	61fb      	str	r3, [r7, #28]
                          |EXTI2_Pin|EXTI3_Pin|EXTI4_Pin|EXTI6_Pin
                          |EXTI7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800156a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800156e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001574:	f107 031c 	add.w	r3, r7, #28
 8001578:	4619      	mov	r1, r3
 800157a:	482c      	ldr	r0, [pc, #176]	; (800162c <MX_GPIO_Init+0x250>)
 800157c:	f002 fd8c 	bl	8004098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PIN4_12V_Pin;
 8001580:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001586:	2301      	movs	r3, #1
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158e:	2300      	movs	r3, #0
 8001590:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PIN4_12V_GPIO_Port, &GPIO_InitStruct);
 8001592:	f107 031c 	add.w	r3, r7, #28
 8001596:	4619      	mov	r1, r3
 8001598:	4824      	ldr	r0, [pc, #144]	; (800162c <MX_GPIO_Init+0x250>)
 800159a:	f002 fd7d 	bl	8004098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800159e:	2200      	movs	r2, #0
 80015a0:	2105      	movs	r1, #5
 80015a2:	2006      	movs	r0, #6
 80015a4:	f002 f9de 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80015a8:	2006      	movs	r0, #6
 80015aa:	f002 f9f7 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	2105      	movs	r1, #5
 80015b2:	2007      	movs	r0, #7
 80015b4:	f002 f9d6 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80015b8:	2007      	movs	r0, #7
 80015ba:	f002 f9ef 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	2105      	movs	r1, #5
 80015c2:	2008      	movs	r0, #8
 80015c4:	f002 f9ce 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80015c8:	2008      	movs	r0, #8
 80015ca:	f002 f9e7 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	2009      	movs	r0, #9
 80015d4:	f002 f9c6 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80015d8:	2009      	movs	r0, #9
 80015da:	f002 f9df 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	200a      	movs	r0, #10
 80015e4:	f002 f9be 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80015e8:	200a      	movs	r0, #10
 80015ea:	f002 f9d7 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	2017      	movs	r0, #23
 80015f4:	f002 f9b6 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015f8:	2017      	movs	r0, #23
 80015fa:	f002 f9cf 	bl	800399c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2028      	movs	r0, #40	; 0x28
 8001604:	f002 f9ae 	bl	8003964 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001608:	2028      	movs	r0, #40	; 0x28
 800160a:	f002 f9c7 	bl	800399c <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3730      	adds	r7, #48	; 0x30
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800
 800161c:	40021000 	.word	0x40021000
 8001620:	40020800 	.word	0x40020800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020c00 	.word	0x40020c00

08001630 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C2_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C2_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C2_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C2_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C2_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C2_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C2_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C2_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C2_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C2_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C2_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C2_Init+0x50>)
 800166e:	f002 feed 	bl	800444c <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 fdca 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200008e0 	.word	0x200008e0
 8001684:	40005800 	.word	0x40005800
 8001688:	00061a80 	.word	0x00061a80

0800168c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08a      	sub	sp, #40	; 0x28
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	2200      	movs	r2, #0
 800169a:	601a      	str	r2, [r3, #0]
 800169c:	605a      	str	r2, [r3, #4]
 800169e:	609a      	str	r2, [r3, #8]
 80016a0:	60da      	str	r2, [r3, #12]
 80016a2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a19      	ldr	r2, [pc, #100]	; (8001710 <HAL_I2C_MspInit+0x84>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d12c      	bne.n	8001708 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a17      	ldr	r2, [pc, #92]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80016ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d0:	2312      	movs	r3, #18
 80016d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016dc:	2304      	movs	r3, #4
 80016de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <HAL_I2C_MspInit+0x8c>)
 80016e8:	f002 fcd6 	bl	8004098 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016fa:	6413      	str	r3, [r2, #64]	; 0x40
 80016fc:	4b05      	ldr	r3, [pc, #20]	; (8001714 <HAL_I2C_MspInit+0x88>)
 80016fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001708:	bf00      	nop
 800170a:	3728      	adds	r7, #40	; 0x28
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40005800 	.word	0x40005800
 8001714:	40023800 	.word	0x40023800
 8001718:	40020400 	.word	0x40020400

0800171c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001720:	f001 fdc4 	bl	80032ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001724:	f000 f860 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001728:	f7ff fe58 	bl	80013dc <MX_GPIO_Init>
  MX_TIM2_Init();
 800172c:	f000 feb6 	bl	800249c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001730:	f000 ff08 	bl	8002544 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001734:	f000 ff5a 	bl	80025ec <MX_TIM4_Init>
  MX_TIM7_Init();
 8001738:	f001 f808 	bl	800274c <MX_TIM7_Init>
  MX_ADC1_Init();
 800173c:	f7ff fae8 	bl	8000d10 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001740:	f7ff ff76 	bl	8001630 <MX_I2C2_Init>
  MX_TIM8_Init();
 8001744:	f001 f838 	bl	80027b8 <MX_TIM8_Init>
  MX_TIM9_Init();
 8001748:	f001 f88e 	bl	8002868 <MX_TIM9_Init>
  MX_TIM10_Init();
 800174c:	f001 f8dc 	bl	8002908 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001750:	f001 f928 	bl	80029a4 <MX_TIM11_Init>
  MX_DMA_Init();
 8001754:	f7ff fc5e 	bl	8001014 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8001758:	f001 fc5e 	bl	8003018 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800175c:	f001 fc32 	bl	8002fc4 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001760:	f000 ffbe 	bl	80026e0 <MX_TIM6_Init>
  MX_TIM12_Init();
 8001764:	f001 f96c 	bl	8002a40 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001768:	2100      	movs	r1, #0
 800176a:	4819      	ldr	r0, [pc, #100]	; (80017d0 <main+0xb4>)
 800176c:	f003 fd8c 	bl	8005288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001770:	2104      	movs	r1, #4
 8001772:	4817      	ldr	r0, [pc, #92]	; (80017d0 <main+0xb4>)
 8001774:	f003 fd88 	bl	8005288 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001778:	2108      	movs	r1, #8
 800177a:	4815      	ldr	r0, [pc, #84]	; (80017d0 <main+0xb4>)
 800177c:	f003 fd84 	bl	8005288 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8001780:	213c      	movs	r1, #60	; 0x3c
 8001782:	4814      	ldr	r0, [pc, #80]	; (80017d4 <main+0xb8>)
 8001784:	f003 feee 	bl	8005564 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001788:	213c      	movs	r1, #60	; 0x3c
 800178a:	4813      	ldr	r0, [pc, #76]	; (80017d8 <main+0xbc>)
 800178c:	f003 feea 	bl	8005564 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001790:	213c      	movs	r1, #60	; 0x3c
 8001792:	4812      	ldr	r0, [pc, #72]	; (80017dc <main+0xc0>)
 8001794:	f003 fee6 	bl	8005564 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001798:	4811      	ldr	r0, [pc, #68]	; (80017e0 <main+0xc4>)
 800179a:	f003 fcb5 	bl	8005108 <HAL_TIM_Base_Start_IT>

  init_pid();
 800179e:	f000 fc6b 	bl	8002078 <init_pid>

  set_voltage(0, 0.0);
 80017a2:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80017e4 <main+0xc8>
 80017a6:	2000      	movs	r0, #0
 80017a8:	f000 fb78 	bl	8001e9c <set_voltage>
  set_voltage(1, 0.0);
 80017ac:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80017e4 <main+0xc8>
 80017b0:	2001      	movs	r0, #1
 80017b2:	f000 fb73 	bl	8001e9c <set_voltage>
  set_voltage(2, 0.0);
 80017b6:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80017e4 <main+0xc8>
 80017ba:	2002      	movs	r0, #2
 80017bc:	f000 fb6e 	bl	8001e9c <set_voltage>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017c0:	f005 f9d8 	bl	8006b74 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017c4:	f7ff fcc2 	bl	800114c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80017c8:	f005 f9f8 	bl	8006bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017cc:	e7fe      	b.n	80017cc <main+0xb0>
 80017ce:	bf00      	nop
 80017d0:	20000adc 	.word	0x20000adc
 80017d4:	20000bb4 	.word	0x20000bb4
 80017d8:	20000a4c 	.word	0x20000a4c
 80017dc:	20000a94 	.word	0x20000a94
 80017e0:	20000b24 	.word	0x20000b24
 80017e4:	00000000 	.word	0x00000000

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	2230      	movs	r2, #48	; 0x30
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f008 f876 	bl	80098e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 030c 	add.w	r3, r7, #12
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b28      	ldr	r3, [pc, #160]	; (80018b4 <SystemClock_Config+0xcc>)
 8001812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001814:	4a27      	ldr	r2, [pc, #156]	; (80018b4 <SystemClock_Config+0xcc>)
 8001816:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181a:	6413      	str	r3, [r2, #64]	; 0x40
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <SystemClock_Config+0xcc>)
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001828:	2300      	movs	r3, #0
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4b22      	ldr	r3, [pc, #136]	; (80018b8 <SystemClock_Config+0xd0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a21      	ldr	r2, [pc, #132]	; (80018b8 <SystemClock_Config+0xd0>)
 8001832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <SystemClock_Config+0xd0>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001844:	2301      	movs	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001848:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800184c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800184e:	2302      	movs	r3, #2
 8001850:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001852:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001856:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001858:	2304      	movs	r3, #4
 800185a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800185c:	23a8      	movs	r3, #168	; 0xa8
 800185e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001860:	2302      	movs	r3, #2
 8001862:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001864:	2304      	movs	r3, #4
 8001866:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001868:	f107 0320 	add.w	r3, r7, #32
 800186c:	4618      	mov	r0, r3
 800186e:	f002 ff31 	bl	80046d4 <HAL_RCC_OscConfig>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001878:	f000 fcca 	bl	8002210 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800187c:	230f      	movs	r3, #15
 800187e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001880:	2302      	movs	r3, #2
 8001882:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800188c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800188e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001892:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001894:	f107 030c 	add.w	r3, r7, #12
 8001898:	2105      	movs	r1, #5
 800189a:	4618      	mov	r0, r3
 800189c:	f003 f992 	bl	8004bc4 <HAL_RCC_ClockConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018a6:	f000 fcb3 	bl	8002210 <Error_Handler>
  }
}
 80018aa:	bf00      	nop
 80018ac:	3750      	adds	r7, #80	; 0x50
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40007000 	.word	0x40007000
 80018bc:	00000000 	.word	0x00000000

080018c0 <get_encoder_data>:

/* USER CODE BEGIN 4 */
void get_encoder_data(void)
{
 80018c0:	b5b0      	push	{r4, r5, r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
	int16_t Enc[3] = {0.0, 0.0};
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	809a      	strh	r2, [r3, #4]

	Enc[0] = TIM8->CNT;
 80018ce:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <get_encoder_data+0x198>)
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	b21b      	sxth	r3, r3
 80018d4:	80bb      	strh	r3, [r7, #4]
	Enc[1] = TIM2->CNT;
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018dc:	b21b      	sxth	r3, r3
 80018de:	80fb      	strh	r3, [r7, #6]
	Enc[2] = TIM3->CNT;
 80018e0:	4b5e      	ldr	r3, [pc, #376]	; (8001a5c <get_encoder_data+0x19c>)
 80018e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e4:	b21b      	sxth	r3, r3
 80018e6:	813b      	strh	r3, [r7, #8]

	// speed
	float tmp_dist = 0.0;
 80018e8:	f04f 0300 	mov.w	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
	tmp_dist = Enc[0] * (disk_to_real / moving_count);
 80018ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fdbe 	bl	8000474 <__aeabi_i2d>
 80018f8:	a351      	add	r3, pc, #324	; (adr r3, 8001a40 <get_encoder_data+0x180>)
 80018fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018fe:	f7fe fe23 	bl	8000548 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f82f 	bl	800096c <__aeabi_d2f>
 800190e:	4603      	mov	r3, r0
 8001910:	60fb      	str	r3, [r7, #12]
	PID[0].in = tmp_dist / freq;
 8001912:	68f8      	ldr	r0, [r7, #12]
 8001914:	f7fe fdc0 	bl	8000498 <__aeabi_f2d>
 8001918:	a34b      	add	r3, pc, #300	; (adr r3, 8001a48 <get_encoder_data+0x188>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe ff3d 	bl	800079c <__aeabi_ddiv>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f81f 	bl	800096c <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	4a4b      	ldr	r2, [pc, #300]	; (8001a60 <get_encoder_data+0x1a0>)
 8001932:	6013      	str	r3, [r2, #0]

	tmp_dist = Enc[1] * (disk_to_real / moving_count);
 8001934:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fd9b 	bl	8000474 <__aeabi_i2d>
 800193e:	a340      	add	r3, pc, #256	; (adr r3, 8001a40 <get_encoder_data+0x180>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe00 	bl	8000548 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4610      	mov	r0, r2
 800194e:	4619      	mov	r1, r3
 8001950:	f7ff f80c 	bl	800096c <__aeabi_d2f>
 8001954:	4603      	mov	r3, r0
 8001956:	60fb      	str	r3, [r7, #12]
	PID[1].in = tmp_dist / freq;
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f7fe fd9d 	bl	8000498 <__aeabi_f2d>
 800195e:	a33a      	add	r3, pc, #232	; (adr r3, 8001a48 <get_encoder_data+0x188>)
 8001960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001964:	f7fe ff1a 	bl	800079c <__aeabi_ddiv>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	4610      	mov	r0, r2
 800196e:	4619      	mov	r1, r3
 8001970:	f7fe fffc 	bl	800096c <__aeabi_d2f>
 8001974:	4603      	mov	r3, r0
 8001976:	4a3a      	ldr	r2, [pc, #232]	; (8001a60 <get_encoder_data+0x1a0>)
 8001978:	6353      	str	r3, [r2, #52]	; 0x34

	tmp_dist = Enc[2] * (disk_to_real / 1340.0);
 800197a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fd78 	bl	8000474 <__aeabi_i2d>
 8001984:	a332      	add	r3, pc, #200	; (adr r3, 8001a50 <get_encoder_data+0x190>)
 8001986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800198a:	f7fe fddd 	bl	8000548 <__aeabi_dmul>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7fe ffe9 	bl	800096c <__aeabi_d2f>
 800199a:	4603      	mov	r3, r0
 800199c:	60fb      	str	r3, [r7, #12]
	PID[2].in = tmp_dist / freq;
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f7fe fd7a 	bl	8000498 <__aeabi_f2d>
 80019a4:	a328      	add	r3, pc, #160	; (adr r3, 8001a48 <get_encoder_data+0x188>)
 80019a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019aa:	f7fe fef7 	bl	800079c <__aeabi_ddiv>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7fe ffd9 	bl	800096c <__aeabi_d2f>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a28      	ldr	r2, [pc, #160]	; (8001a60 <get_encoder_data+0x1a0>)
 80019be:	6693      	str	r3, [r2, #104]	; 0x68

	// distanse
	tmp_dist = Enc[2] * (disk_to_real / 1340.0) ;
 80019c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fd55 	bl	8000474 <__aeabi_i2d>
 80019ca:	a321      	add	r3, pc, #132	; (adr r3, 8001a50 <get_encoder_data+0x190>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	f7fe fdba 	bl	8000548 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ffc6 	bl	800096c <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	60fb      	str	r3, [r7, #12]
	PID[3].in += tmp_dist * 360.0;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <get_encoder_data+0x1a0>)
 80019e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7fe fd54 	bl	8000498 <__aeabi_f2d>
 80019f0:	4604      	mov	r4, r0
 80019f2:	460d      	mov	r5, r1
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f7fe fd4f 	bl	8000498 <__aeabi_f2d>
 80019fa:	f04f 0200 	mov.w	r2, #0
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <get_encoder_data+0x1a4>)
 8001a00:	f7fe fda2 	bl	8000548 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4620      	mov	r0, r4
 8001a0a:	4629      	mov	r1, r5
 8001a0c:	f7fe fbe6 	bl	80001dc <__adddf3>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	f7fe ffa8 	bl	800096c <__aeabi_d2f>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	4a10      	ldr	r2, [pc, #64]	; (8001a60 <get_encoder_data+0x1a0>)
 8001a20:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

	TIM8->CNT = 0;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <get_encoder_data+0x198>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT = 0;
 8001a2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT = 0;
 8001a32:	4b0a      	ldr	r3, [pc, #40]	; (8001a5c <get_encoder_data+0x19c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001a38:	bf00      	nop
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bdb0      	pop	{r4, r5, r7, pc}
 8001a40:	25fbb439 	.word	0x25fbb439
 8001a44:	3f442f2a 	.word	0x3f442f2a
 8001a48:	47ae147b 	.word	0x47ae147b
 8001a4c:	3f847ae1 	.word	0x3f847ae1
 8001a50:	1c5e67f5 	.word	0x1c5e67f5
 8001a54:	3f373262 	.word	0x3f373262
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40000400 	.word	0x40000400
 8001a60:	20000934 	.word	0x20000934
 8001a64:	40768000 	.word	0x40768000

08001a68 <calc_pid>:

void calc_pid(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
	PID[0].error = PID[0].target - PID[0].in;
 8001a6c:	4bbe      	ldr	r3, [pc, #760]	; (8001d68 <calc_pid+0x300>)
 8001a6e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001a72:	4bbd      	ldr	r3, [pc, #756]	; (8001d68 <calc_pid+0x300>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a7c:	4bba      	ldr	r3, [pc, #744]	; (8001d68 <calc_pid+0x300>)
 8001a7e:	edc3 7a03 	vstr	s15, [r3, #12]
	PID[0].sum_error += PID[0].error;
 8001a82:	4bb9      	ldr	r3, [pc, #740]	; (8001d68 <calc_pid+0x300>)
 8001a84:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a88:	4bb7      	ldr	r3, [pc, #732]	; (8001d68 <calc_pid+0x300>)
 8001a8a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	4bb5      	ldr	r3, [pc, #724]	; (8001d68 <calc_pid+0x300>)
 8001a94:	edc3 7a04 	vstr	s15, [r3, #16]
	if(PID[0].sum_error > PID[0].max_sum_error) PID[0].sum_error = PID[0].max_sum_error;
 8001a98:	4bb3      	ldr	r3, [pc, #716]	; (8001d68 <calc_pid+0x300>)
 8001a9a:	ed93 7a04 	vldr	s14, [r3, #16]
 8001a9e:	4bb2      	ldr	r3, [pc, #712]	; (8001d68 <calc_pid+0x300>)
 8001aa0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001aa4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aac:	dd03      	ble.n	8001ab6 <calc_pid+0x4e>
 8001aae:	4bae      	ldr	r3, [pc, #696]	; (8001d68 <calc_pid+0x300>)
 8001ab0:	6a1b      	ldr	r3, [r3, #32]
 8001ab2:	4aad      	ldr	r2, [pc, #692]	; (8001d68 <calc_pid+0x300>)
 8001ab4:	6113      	str	r3, [r2, #16]
	if(PID[0].sum_error < -PID[0].max_sum_error) PID[0].sum_error = -PID[0].max_sum_error;
 8001ab6:	4bac      	ldr	r3, [pc, #688]	; (8001d68 <calc_pid+0x300>)
 8001ab8:	ed93 7a04 	vldr	s14, [r3, #16]
 8001abc:	4baa      	ldr	r3, [pc, #680]	; (8001d68 <calc_pid+0x300>)
 8001abe:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ac2:	eef1 7a67 	vneg.f32	s15, s15
 8001ac6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ace:	d507      	bpl.n	8001ae0 <calc_pid+0x78>
 8001ad0:	4ba5      	ldr	r3, [pc, #660]	; (8001d68 <calc_pid+0x300>)
 8001ad2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ad6:	eef1 7a67 	vneg.f32	s15, s15
 8001ada:	4ba3      	ldr	r3, [pc, #652]	; (8001d68 <calc_pid+0x300>)
 8001adc:	edc3 7a04 	vstr	s15, [r3, #16]

	PID[0].out = (PID[0].p_k * PID[0].error) + (PID[0].i_k * PID[0].sum_error) + (PID[0].d_k * PID[0].prev_error);
 8001ae0:	4ba1      	ldr	r3, [pc, #644]	; (8001d68 <calc_pid+0x300>)
 8001ae2:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001ae6:	4ba0      	ldr	r3, [pc, #640]	; (8001d68 <calc_pid+0x300>)
 8001ae8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	4b9d      	ldr	r3, [pc, #628]	; (8001d68 <calc_pid+0x300>)
 8001af2:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001af6:	4b9c      	ldr	r3, [pc, #624]	; (8001d68 <calc_pid+0x300>)
 8001af8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001afc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b04:	4b98      	ldr	r3, [pc, #608]	; (8001d68 <calc_pid+0x300>)
 8001b06:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8001b0a:	4b97      	ldr	r3, [pc, #604]	; (8001d68 <calc_pid+0x300>)
 8001b0c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001b10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	4b93      	ldr	r3, [pc, #588]	; (8001d68 <calc_pid+0x300>)
 8001b1a:	edc3 7a02 	vstr	s15, [r3, #8]
	if(PID[0].out > PID[0].max_out) PID[0].out = PID[0].max_out;
 8001b1e:	4b92      	ldr	r3, [pc, #584]	; (8001d68 <calc_pid+0x300>)
 8001b20:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b24:	4b90      	ldr	r3, [pc, #576]	; (8001d68 <calc_pid+0x300>)
 8001b26:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b32:	dd03      	ble.n	8001b3c <calc_pid+0xd4>
 8001b34:	4b8c      	ldr	r3, [pc, #560]	; (8001d68 <calc_pid+0x300>)
 8001b36:	699b      	ldr	r3, [r3, #24]
 8001b38:	4a8b      	ldr	r2, [pc, #556]	; (8001d68 <calc_pid+0x300>)
 8001b3a:	6093      	str	r3, [r2, #8]
	if(PID[0].out < -PID[0].max_out) PID[0].out = -PID[0].max_out;
 8001b3c:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <calc_pid+0x300>)
 8001b3e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001b42:	4b89      	ldr	r3, [pc, #548]	; (8001d68 <calc_pid+0x300>)
 8001b44:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b48:	eef1 7a67 	vneg.f32	s15, s15
 8001b4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	d507      	bpl.n	8001b66 <calc_pid+0xfe>
 8001b56:	4b84      	ldr	r3, [pc, #528]	; (8001d68 <calc_pid+0x300>)
 8001b58:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b5c:	eef1 7a67 	vneg.f32	s15, s15
 8001b60:	4b81      	ldr	r3, [pc, #516]	; (8001d68 <calc_pid+0x300>)
 8001b62:	edc3 7a02 	vstr	s15, [r3, #8]
	PID[0].prev_error = PID[0].error;
 8001b66:	4b80      	ldr	r3, [pc, #512]	; (8001d68 <calc_pid+0x300>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	4a7f      	ldr	r2, [pc, #508]	; (8001d68 <calc_pid+0x300>)
 8001b6c:	6153      	str	r3, [r2, #20]

	PID[1].error = PID[1].in - PID[1].target;
 8001b6e:	4b7e      	ldr	r3, [pc, #504]	; (8001d68 <calc_pid+0x300>)
 8001b70:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8001b74:	4b7c      	ldr	r3, [pc, #496]	; (8001d68 <calc_pid+0x300>)
 8001b76:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001b7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	; (8001d68 <calc_pid+0x300>)
 8001b80:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	PID[1].sum_error += PID[1].error;
 8001b84:	4b78      	ldr	r3, [pc, #480]	; (8001d68 <calc_pid+0x300>)
 8001b86:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001b8a:	4b77      	ldr	r3, [pc, #476]	; (8001d68 <calc_pid+0x300>)
 8001b8c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	4b74      	ldr	r3, [pc, #464]	; (8001d68 <calc_pid+0x300>)
 8001b96:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	if(PID[1].sum_error > PID[1].max_sum_error) PID[1].sum_error = PID[1].max_sum_error;
 8001b9a:	4b73      	ldr	r3, [pc, #460]	; (8001d68 <calc_pid+0x300>)
 8001b9c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001ba0:	4b71      	ldr	r3, [pc, #452]	; (8001d68 <calc_pid+0x300>)
 8001ba2:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001ba6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bae:	dd03      	ble.n	8001bb8 <calc_pid+0x150>
 8001bb0:	4b6d      	ldr	r3, [pc, #436]	; (8001d68 <calc_pid+0x300>)
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	4a6c      	ldr	r2, [pc, #432]	; (8001d68 <calc_pid+0x300>)
 8001bb6:	6453      	str	r3, [r2, #68]	; 0x44
	if(PID[1].sum_error < -PID[1].max_sum_error) PID[1].sum_error = -PID[1].max_sum_error;
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	; (8001d68 <calc_pid+0x300>)
 8001bba:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8001bbe:	4b6a      	ldr	r3, [pc, #424]	; (8001d68 <calc_pid+0x300>)
 8001bc0:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001bc4:	eef1 7a67 	vneg.f32	s15, s15
 8001bc8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	d507      	bpl.n	8001be2 <calc_pid+0x17a>
 8001bd2:	4b65      	ldr	r3, [pc, #404]	; (8001d68 <calc_pid+0x300>)
 8001bd4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8001bd8:	eef1 7a67 	vneg.f32	s15, s15
 8001bdc:	4b62      	ldr	r3, [pc, #392]	; (8001d68 <calc_pid+0x300>)
 8001bde:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

	PID[1].out = (PID[1].p_k * PID[1].error) + (PID[1].i_k * PID[1].sum_error) + (PID[1].d_k * PID[1].prev_error);
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <calc_pid+0x300>)
 8001be4:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8001be8:	4b5f      	ldr	r3, [pc, #380]	; (8001d68 <calc_pid+0x300>)
 8001bea:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001bee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <calc_pid+0x300>)
 8001bf4:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 8001bf8:	4b5b      	ldr	r3, [pc, #364]	; (8001d68 <calc_pid+0x300>)
 8001bfa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c06:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <calc_pid+0x300>)
 8001c08:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 8001c0c:	4b56      	ldr	r3, [pc, #344]	; (8001d68 <calc_pid+0x300>)
 8001c0e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001c12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <calc_pid+0x300>)
 8001c1c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	if(PID[1].out > PID[1].max_out) PID[1].out = PID[1].max_out;
 8001c20:	4b51      	ldr	r3, [pc, #324]	; (8001d68 <calc_pid+0x300>)
 8001c22:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001c26:	4b50      	ldr	r3, [pc, #320]	; (8001d68 <calc_pid+0x300>)
 8001c28:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c34:	dd03      	ble.n	8001c3e <calc_pid+0x1d6>
 8001c36:	4b4c      	ldr	r3, [pc, #304]	; (8001d68 <calc_pid+0x300>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3a:	4a4b      	ldr	r2, [pc, #300]	; (8001d68 <calc_pid+0x300>)
 8001c3c:	63d3      	str	r3, [r2, #60]	; 0x3c
	if(PID[1].out < -PID[1].max_out) PID[1].out = -PID[1].max_out;
 8001c3e:	4b4a      	ldr	r3, [pc, #296]	; (8001d68 <calc_pid+0x300>)
 8001c40:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001c44:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <calc_pid+0x300>)
 8001c46:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001c4a:	eef1 7a67 	vneg.f32	s15, s15
 8001c4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	d507      	bpl.n	8001c68 <calc_pid+0x200>
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <calc_pid+0x300>)
 8001c5a:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001c5e:	eef1 7a67 	vneg.f32	s15, s15
 8001c62:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <calc_pid+0x300>)
 8001c64:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
	PID[1].prev_error = PID[1].error;
 8001c68:	4b3f      	ldr	r3, [pc, #252]	; (8001d68 <calc_pid+0x300>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	4a3e      	ldr	r2, [pc, #248]	; (8001d68 <calc_pid+0x300>)
 8001c6e:	6493      	str	r3, [r2, #72]	; 0x48

	PID[2].error = PID[2].in - PID[2].target;
 8001c70:	4b3d      	ldr	r3, [pc, #244]	; (8001d68 <calc_pid+0x300>)
 8001c72:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8001c76:	4b3c      	ldr	r3, [pc, #240]	; (8001d68 <calc_pid+0x300>)
 8001c78:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <calc_pid+0x300>)
 8001c82:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	PID[2].sum_error += PID[2].error;
 8001c86:	4b38      	ldr	r3, [pc, #224]	; (8001d68 <calc_pid+0x300>)
 8001c88:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001c8c:	4b36      	ldr	r3, [pc, #216]	; (8001d68 <calc_pid+0x300>)
 8001c8e:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c96:	4b34      	ldr	r3, [pc, #208]	; (8001d68 <calc_pid+0x300>)
 8001c98:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	if(PID[2].sum_error > PID[2].max_sum_error) PID[2].sum_error = PID[2].max_sum_error;
 8001c9c:	4b32      	ldr	r3, [pc, #200]	; (8001d68 <calc_pid+0x300>)
 8001c9e:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001ca2:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <calc_pid+0x300>)
 8001ca4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001ca8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb0:	dd04      	ble.n	8001cbc <calc_pid+0x254>
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <calc_pid+0x300>)
 8001cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb8:	4a2b      	ldr	r2, [pc, #172]	; (8001d68 <calc_pid+0x300>)
 8001cba:	6793      	str	r3, [r2, #120]	; 0x78
	if(PID[2].sum_error < -PID[2].max_sum_error) PID[2].sum_error = -PID[2].max_sum_error;
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <calc_pid+0x300>)
 8001cbe:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 8001cc2:	4b29      	ldr	r3, [pc, #164]	; (8001d68 <calc_pid+0x300>)
 8001cc4:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001cc8:	eef1 7a67 	vneg.f32	s15, s15
 8001ccc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd4:	d507      	bpl.n	8001ce6 <calc_pid+0x27e>
 8001cd6:	4b24      	ldr	r3, [pc, #144]	; (8001d68 <calc_pid+0x300>)
 8001cd8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8001cdc:	eef1 7a67 	vneg.f32	s15, s15
 8001ce0:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <calc_pid+0x300>)
 8001ce2:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78

	PID[2].out = (PID[2].p_k * PID[2].error) + (PID[2].i_k * PID[2].sum_error) + (PID[2].d_k * PID[2].prev_error);
 8001ce6:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <calc_pid+0x300>)
 8001ce8:	ed93 7a24 	vldr	s14, [r3, #144]	; 0x90
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <calc_pid+0x300>)
 8001cee:	edd3 7a1d 	vldr	s15, [r3, #116]	; 0x74
 8001cf2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <calc_pid+0x300>)
 8001cf8:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8001cfc:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <calc_pid+0x300>)
 8001cfe:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8001d02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <calc_pid+0x300>)
 8001d0c:	edd3 6a26 	vldr	s13, [r3, #152]	; 0x98
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <calc_pid+0x300>)
 8001d12:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8001d16:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1e:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <calc_pid+0x300>)
 8001d20:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	if(PID[2].out > PID[2].max_out) PID[2].out = PID[2].max_out;
 8001d24:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <calc_pid+0x300>)
 8001d26:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <calc_pid+0x300>)
 8001d2c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d38:	dd04      	ble.n	8001d44 <calc_pid+0x2dc>
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <calc_pid+0x300>)
 8001d3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <calc_pid+0x300>)
 8001d42:	6713      	str	r3, [r2, #112]	; 0x70
	if(PID[2].out < -PID[2].max_out) PID[2].out = -PID[2].max_out;
 8001d44:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <calc_pid+0x300>)
 8001d46:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8001d4a:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <calc_pid+0x300>)
 8001d4c:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d50:	eef1 7a67 	vneg.f32	s15, s15
 8001d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d50b      	bpl.n	8001d76 <calc_pid+0x30e>
 8001d5e:	4b02      	ldr	r3, [pc, #8]	; (8001d68 <calc_pid+0x300>)
 8001d60:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001d64:	e002      	b.n	8001d6c <calc_pid+0x304>
 8001d66:	bf00      	nop
 8001d68:	20000934 	.word	0x20000934
 8001d6c:	eef1 7a67 	vneg.f32	s15, s15
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <calc_pid+0x430>)
 8001d72:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
	PID[2].prev_error = PID[2].error;
 8001d76:	4b48      	ldr	r3, [pc, #288]	; (8001e98 <calc_pid+0x430>)
 8001d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d7a:	4a47      	ldr	r2, [pc, #284]	; (8001e98 <calc_pid+0x430>)
 8001d7c:	67d3      	str	r3, [r2, #124]	; 0x7c

	PID[3].error = PID[3].target - PID[3].in;
 8001d7e:	4b46      	ldr	r3, [pc, #280]	; (8001e98 <calc_pid+0x430>)
 8001d80:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8001d84:	4b44      	ldr	r3, [pc, #272]	; (8001e98 <calc_pid+0x430>)
 8001d86:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 8001d8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8e:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <calc_pid+0x430>)
 8001d90:	edc3 7a2a 	vstr	s15, [r3, #168]	; 0xa8
	PID[3].sum_error += PID[3].error;
 8001d94:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <calc_pid+0x430>)
 8001d96:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8001d9a:	4b3f      	ldr	r3, [pc, #252]	; (8001e98 <calc_pid+0x430>)
 8001d9c:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	4b3c      	ldr	r3, [pc, #240]	; (8001e98 <calc_pid+0x430>)
 8001da6:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac
	if(PID[3].sum_error > PID[3].max_sum_error) PID[3].sum_error = PID[3].max_sum_error;
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <calc_pid+0x430>)
 8001dac:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8001db0:	4b39      	ldr	r3, [pc, #228]	; (8001e98 <calc_pid+0x430>)
 8001db2:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dbe:	dd05      	ble.n	8001dcc <calc_pid+0x364>
 8001dc0:	4b35      	ldr	r3, [pc, #212]	; (8001e98 <calc_pid+0x430>)
 8001dc2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001dc6:	4a34      	ldr	r2, [pc, #208]	; (8001e98 <calc_pid+0x430>)
 8001dc8:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	if(PID[3].sum_error < -PID[3].max_sum_error) PID[3].sum_error = -PID[3].max_sum_error;
 8001dcc:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <calc_pid+0x430>)
 8001dce:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <calc_pid+0x430>)
 8001dd4:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001dd8:	eef1 7a67 	vneg.f32	s15, s15
 8001ddc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d507      	bpl.n	8001df6 <calc_pid+0x38e>
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <calc_pid+0x430>)
 8001de8:	edd3 7a2f 	vldr	s15, [r3, #188]	; 0xbc
 8001dec:	eef1 7a67 	vneg.f32	s15, s15
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <calc_pid+0x430>)
 8001df2:	edc3 7a2b 	vstr	s15, [r3, #172]	; 0xac

	PID[3].out = (PID[3].p_k * PID[3].error) + (PID[3].i_k * PID[3].sum_error) + (PID[3].d_k * PID[3].prev_error);
 8001df6:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <calc_pid+0x430>)
 8001df8:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8001dfc:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <calc_pid+0x430>)
 8001dfe:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8001e02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e06:	4b24      	ldr	r3, [pc, #144]	; (8001e98 <calc_pid+0x430>)
 8001e08:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8001e0c:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <calc_pid+0x430>)
 8001e0e:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 8001e12:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	; (8001e98 <calc_pid+0x430>)
 8001e1c:	edd3 6a33 	vldr	s13, [r3, #204]	; 0xcc
 8001e20:	4b1d      	ldr	r3, [pc, #116]	; (8001e98 <calc_pid+0x430>)
 8001e22:	edd3 7a2c 	vldr	s15, [r3, #176]	; 0xb0
 8001e26:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <calc_pid+0x430>)
 8001e30:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	if(PID[3].out > PID[3].max_out) PID[3].out = PID[3].max_out;
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <calc_pid+0x430>)
 8001e36:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8001e3a:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <calc_pid+0x430>)
 8001e3c:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001e40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	dd05      	ble.n	8001e56 <calc_pid+0x3ee>
 8001e4a:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <calc_pid+0x430>)
 8001e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001e50:	4a11      	ldr	r2, [pc, #68]	; (8001e98 <calc_pid+0x430>)
 8001e52:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
	if(PID[3].out < -PID[3].max_out) PID[3].out = -PID[3].max_out;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <calc_pid+0x430>)
 8001e58:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <calc_pid+0x430>)
 8001e5e:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001e62:	eef1 7a67 	vneg.f32	s15, s15
 8001e66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6e:	d507      	bpl.n	8001e80 <calc_pid+0x418>
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <calc_pid+0x430>)
 8001e72:	edd3 7a2d 	vldr	s15, [r3, #180]	; 0xb4
 8001e76:	eef1 7a67 	vneg.f32	s15, s15
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <calc_pid+0x430>)
 8001e7c:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
	PID[3].prev_error = PID[3].error;
 8001e80:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <calc_pid+0x430>)
 8001e82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8001e86:	4a04      	ldr	r2, [pc, #16]	; (8001e98 <calc_pid+0x430>)
 8001e88:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	20000934 	.word	0x20000934

08001e9c <set_voltage>:

void set_voltage(uint8_t motor, float duty)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	ed87 0a00 	vstr	s0, [r7]
 8001ea8:	71fb      	strb	r3, [r7, #7]
	if(duty > 1.0) duty = 1.0;
 8001eaa:	edd7 7a00 	vldr	s15, [r7]
 8001eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001eb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	dd02      	ble.n	8001ec2 <set_voltage+0x26>
 8001ebc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ec0:	603b      	str	r3, [r7, #0]
	if(duty < -1.0) duty = -1.0;
 8001ec2:	edd7 7a00 	vldr	s15, [r7]
 8001ec6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed2:	d501      	bpl.n	8001ed8 <set_voltage+0x3c>
 8001ed4:	4b64      	ldr	r3, [pc, #400]	; (8002068 <set_voltage+0x1cc>)
 8001ed6:	603b      	str	r3, [r7, #0]
	switch(motor)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	f000 8082 	beq.w	8001fe4 <set_voltage+0x148>
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f300 80bc 	bgt.w	800205e <set_voltage+0x1c2>
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <set_voltage+0x54>
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d03d      	beq.n	8001f6a <set_voltage+0xce>
			TIM4->CCR3 = ((int32_t)(TIM4->ARR + (TIM4->ARR * duty)));
			HAL_GPIO_WritePin(BTN3_DIR_GPIO_Port, BTN3_DIR_Pin, GPIO_PIN_SET);
		}
		break;
	}
}
 8001eee:	e0b6      	b.n	800205e <set_voltage+0x1c2>
		if(duty >= 0.0)
 8001ef0:	edd7 7a00 	vldr	s15, [r7]
 8001ef4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001efc:	db16      	blt.n	8001f2c <set_voltage+0x90>
			TIM4->CCR1 = ((int32_t)(TIM4->ARR * duty));
 8001efe:	4b5b      	ldr	r3, [pc, #364]	; (800206c <set_voltage+0x1d0>)
 8001f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f02:	ee07 3a90 	vmov	s15, r3
 8001f06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f0a:	edd7 7a00 	vldr	s15, [r7]
 8001f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f16:	4b55      	ldr	r3, [pc, #340]	; (800206c <set_voltage+0x1d0>)
 8001f18:	ee17 2a90 	vmov	r2, s15
 8001f1c:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(BTN1_DIR_GPIO_Port, BTN1_DIR_Pin, GPIO_PIN_RESET);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f24:	4852      	ldr	r0, [pc, #328]	; (8002070 <set_voltage+0x1d4>)
 8001f26:	f002 fa53 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 8001f2a:	e098      	b.n	800205e <set_voltage+0x1c2>
			TIM4->CCR1 = ((int32_t)(TIM4->ARR + (TIM4->ARR * duty)));
 8001f2c:	4b4f      	ldr	r3, [pc, #316]	; (800206c <set_voltage+0x1d0>)
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	ee07 3a90 	vmov	s15, r3
 8001f34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f38:	4b4c      	ldr	r3, [pc, #304]	; (800206c <set_voltage+0x1d0>)
 8001f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3c:	ee07 3a90 	vmov	s15, r3
 8001f40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f44:	edd7 7a00 	vldr	s15, [r7]
 8001f48:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f54:	4b45      	ldr	r3, [pc, #276]	; (800206c <set_voltage+0x1d0>)
 8001f56:	ee17 2a90 	vmov	r2, s15
 8001f5a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(BTN1_DIR_GPIO_Port, BTN1_DIR_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f62:	4843      	ldr	r0, [pc, #268]	; (8002070 <set_voltage+0x1d4>)
 8001f64:	f002 fa34 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 8001f68:	e079      	b.n	800205e <set_voltage+0x1c2>
		if(duty >= 0.0)
 8001f6a:	edd7 7a00 	vldr	s15, [r7]
 8001f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f76:	db16      	blt.n	8001fa6 <set_voltage+0x10a>
			TIM4->CCR2 = ((int32_t)(TIM4->ARR * duty));
 8001f78:	4b3c      	ldr	r3, [pc, #240]	; (800206c <set_voltage+0x1d0>)
 8001f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f84:	edd7 7a00 	vldr	s15, [r7]
 8001f88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <set_voltage+0x1d0>)
 8001f92:	ee17 2a90 	vmov	r2, s15
 8001f96:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(BTN2_DIR_GPIO_Port, BTN2_DIR_Pin, GPIO_PIN_RESET);
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f9e:	4834      	ldr	r0, [pc, #208]	; (8002070 <set_voltage+0x1d4>)
 8001fa0:	f002 fa16 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 8001fa4:	e05b      	b.n	800205e <set_voltage+0x1c2>
			TIM4->CCR2 = ((int32_t)(TIM4->ARR + (TIM4->ARR * duty)));
 8001fa6:	4b31      	ldr	r3, [pc, #196]	; (800206c <set_voltage+0x1d0>)
 8001fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001fb2:	4b2e      	ldr	r3, [pc, #184]	; (800206c <set_voltage+0x1d0>)
 8001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fbe:	edd7 7a00 	vldr	s15, [r7]
 8001fc2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <set_voltage+0x1d0>)
 8001fd0:	ee17 2a90 	vmov	r2, s15
 8001fd4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_GPIO_WritePin(BTN2_DIR_GPIO_Port, BTN2_DIR_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <set_voltage+0x1d4>)
 8001fde:	f002 f9f7 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 8001fe2:	e03c      	b.n	800205e <set_voltage+0x1c2>
		if(duty >= 0.0)
 8001fe4:	edd7 7a00 	vldr	s15, [r7]
 8001fe8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff0:	db16      	blt.n	8002020 <set_voltage+0x184>
			TIM4->CCR3 = ((int32_t)(TIM4->ARR * duty));
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <set_voltage+0x1d0>)
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	ee07 3a90 	vmov	s15, r3
 8001ffa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ffe:	edd7 7a00 	vldr	s15, [r7]
 8002002:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002006:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <set_voltage+0x1d0>)
 800200c:	ee17 2a90 	vmov	r2, s15
 8002010:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(BTN3_DIR_GPIO_Port, BTN3_DIR_Pin, GPIO_PIN_RESET);
 8002012:	2200      	movs	r2, #0
 8002014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002018:	4816      	ldr	r0, [pc, #88]	; (8002074 <set_voltage+0x1d8>)
 800201a:	f002 f9d9 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 800201e:	e01d      	b.n	800205c <set_voltage+0x1c0>
			TIM4->CCR3 = ((int32_t)(TIM4->ARR + (TIM4->ARR * duty)));
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <set_voltage+0x1d0>)
 8002022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002024:	ee07 3a90 	vmov	s15, r3
 8002028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800202c:	4b0f      	ldr	r3, [pc, #60]	; (800206c <set_voltage+0x1d0>)
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	ee07 3a90 	vmov	s15, r3
 8002034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002038:	edd7 7a00 	vldr	s15, [r7]
 800203c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <set_voltage+0x1d0>)
 800204a:	ee17 2a90 	vmov	r2, s15
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
			HAL_GPIO_WritePin(BTN3_DIR_GPIO_Port, BTN3_DIR_Pin, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002056:	4807      	ldr	r0, [pc, #28]	; (8002074 <set_voltage+0x1d8>)
 8002058:	f002 f9ba 	bl	80043d0 <HAL_GPIO_WritePin>
		break;
 800205c:	bf00      	nop
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	bf800000 	.word	0xbf800000
 800206c:	40000800 	.word	0x40000800
 8002070:	40020800 	.word	0x40020800
 8002074:	40021000 	.word	0x40021000

08002078 <init_pid>:

void init_pid(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	// Speed regulators
	PID[0].p_k = 0.050;
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <init_pid+0x154>)
 800207e:	4a54      	ldr	r2, [pc, #336]	; (80021d0 <init_pid+0x158>)
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
	PID[0].i_k = 0.20;
 8002082:	4b52      	ldr	r3, [pc, #328]	; (80021cc <init_pid+0x154>)
 8002084:	4a53      	ldr	r2, [pc, #332]	; (80021d4 <init_pid+0x15c>)
 8002086:	62da      	str	r2, [r3, #44]	; 0x2c
	PID[0].d_k = 0.0;
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <init_pid+0x154>)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	631a      	str	r2, [r3, #48]	; 0x30
	PID[0].error = 0.0;
 8002090:	4b4e      	ldr	r3, [pc, #312]	; (80021cc <init_pid+0x154>)
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
	PID[0].sum_error = 0.0;
 8002098:	4b4c      	ldr	r3, [pc, #304]	; (80021cc <init_pid+0x154>)
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	611a      	str	r2, [r3, #16]
	PID[0].max_sum_error = 10.0;
 80020a0:	4b4a      	ldr	r3, [pc, #296]	; (80021cc <init_pid+0x154>)
 80020a2:	4a4d      	ldr	r2, [pc, #308]	; (80021d8 <init_pid+0x160>)
 80020a4:	621a      	str	r2, [r3, #32]
	PID[0].min_out = 0.1;
 80020a6:	4b49      	ldr	r3, [pc, #292]	; (80021cc <init_pid+0x154>)
 80020a8:	4a4c      	ldr	r2, [pc, #304]	; (80021dc <init_pid+0x164>)
 80020aa:	61da      	str	r2, [r3, #28]
	PID[0].max_out = 1.0;
 80020ac:	4b47      	ldr	r3, [pc, #284]	; (80021cc <init_pid+0x154>)
 80020ae:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020b2:	619a      	str	r2, [r3, #24]
	PID[0].out = 0.0;
 80020b4:	4b45      	ldr	r3, [pc, #276]	; (80021cc <init_pid+0x154>)
 80020b6:	f04f 0200 	mov.w	r2, #0
 80020ba:	609a      	str	r2, [r3, #8]
	PID[0].target = 0.0;
 80020bc:	4b43      	ldr	r3, [pc, #268]	; (80021cc <init_pid+0x154>)
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	605a      	str	r2, [r3, #4]

	PID[1].p_k = 0.050;
 80020c4:	4b41      	ldr	r3, [pc, #260]	; (80021cc <init_pid+0x154>)
 80020c6:	4a42      	ldr	r2, [pc, #264]	; (80021d0 <init_pid+0x158>)
 80020c8:	65da      	str	r2, [r3, #92]	; 0x5c
	PID[1].i_k = 0.200;
 80020ca:	4b40      	ldr	r3, [pc, #256]	; (80021cc <init_pid+0x154>)
 80020cc:	4a41      	ldr	r2, [pc, #260]	; (80021d4 <init_pid+0x15c>)
 80020ce:	661a      	str	r2, [r3, #96]	; 0x60
	PID[1].d_k = 0.0;
 80020d0:	4b3e      	ldr	r3, [pc, #248]	; (80021cc <init_pid+0x154>)
 80020d2:	f04f 0200 	mov.w	r2, #0
 80020d6:	665a      	str	r2, [r3, #100]	; 0x64
	PID[1].error = 0.0;
 80020d8:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <init_pid+0x154>)
 80020da:	f04f 0200 	mov.w	r2, #0
 80020de:	641a      	str	r2, [r3, #64]	; 0x40
	PID[1].sum_error = 0.0;
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <init_pid+0x154>)
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44
	PID[1].max_sum_error = 10.0;
 80020e8:	4b38      	ldr	r3, [pc, #224]	; (80021cc <init_pid+0x154>)
 80020ea:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <init_pid+0x160>)
 80020ec:	655a      	str	r2, [r3, #84]	; 0x54
	PID[1].min_out = 0.1;
 80020ee:	4b37      	ldr	r3, [pc, #220]	; (80021cc <init_pid+0x154>)
 80020f0:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <init_pid+0x164>)
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
	PID[1].max_out = 1.0;
 80020f4:	4b35      	ldr	r3, [pc, #212]	; (80021cc <init_pid+0x154>)
 80020f6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80020fa:	64da      	str	r2, [r3, #76]	; 0x4c
	PID[1].out = 0.0;
 80020fc:	4b33      	ldr	r3, [pc, #204]	; (80021cc <init_pid+0x154>)
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
	PID[1].target = 0.0;
 8002104:	4b31      	ldr	r3, [pc, #196]	; (80021cc <init_pid+0x154>)
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	639a      	str	r2, [r3, #56]	; 0x38

	PID[2].p_k = 0.40;
 800210c:	4b2f      	ldr	r3, [pc, #188]	; (80021cc <init_pid+0x154>)
 800210e:	4a34      	ldr	r2, [pc, #208]	; (80021e0 <init_pid+0x168>)
 8002110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	PID[2].i_k = 0.0780;
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <init_pid+0x154>)
 8002116:	4a33      	ldr	r2, [pc, #204]	; (80021e4 <init_pid+0x16c>)
 8002118:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	PID[2].d_k = 0.0;
 800211c:	4b2b      	ldr	r3, [pc, #172]	; (80021cc <init_pid+0x154>)
 800211e:	f04f 0200 	mov.w	r2, #0
 8002122:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	PID[2].error = 0.0;
 8002126:	4b29      	ldr	r3, [pc, #164]	; (80021cc <init_pid+0x154>)
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	675a      	str	r2, [r3, #116]	; 0x74
	PID[2].sum_error = 0.0;
 800212e:	4b27      	ldr	r3, [pc, #156]	; (80021cc <init_pid+0x154>)
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	679a      	str	r2, [r3, #120]	; 0x78
	PID[2].max_sum_error = 5.0;
 8002136:	4b25      	ldr	r3, [pc, #148]	; (80021cc <init_pid+0x154>)
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <init_pid+0x170>)
 800213a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	PID[2].min_out = 0.1;
 800213e:	4b23      	ldr	r3, [pc, #140]	; (80021cc <init_pid+0x154>)
 8002140:	4a26      	ldr	r2, [pc, #152]	; (80021dc <init_pid+0x164>)
 8002142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	PID[2].max_out = 1.0;
 8002146:	4b21      	ldr	r3, [pc, #132]	; (80021cc <init_pid+0x154>)
 8002148:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800214c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	PID[2].out = 0.0;
 8002150:	4b1e      	ldr	r3, [pc, #120]	; (80021cc <init_pid+0x154>)
 8002152:	f04f 0200 	mov.w	r2, #0
 8002156:	671a      	str	r2, [r3, #112]	; 0x70
	PID[2].target = 0.0;
 8002158:	4b1c      	ldr	r3, [pc, #112]	; (80021cc <init_pid+0x154>)
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	66da      	str	r2, [r3, #108]	; 0x6c

	// angle regulator
	PID[3].p_k = 1.0;
 8002160:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <init_pid+0x154>)
 8002162:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002166:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	PID[3].i_k = 0.0;
 800216a:	4b18      	ldr	r3, [pc, #96]	; (80021cc <init_pid+0x154>)
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	PID[3].d_k = 0.0;
 8002174:	4b15      	ldr	r3, [pc, #84]	; (80021cc <init_pid+0x154>)
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	PID[3].error = 0.0;
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <init_pid+0x154>)
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
	PID[3].sum_error = 0.0;
 8002188:	4b10      	ldr	r3, [pc, #64]	; (80021cc <init_pid+0x154>)
 800218a:	f04f 0200 	mov.w	r2, #0
 800218e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	PID[3].max_sum_error = 10.0;
 8002192:	4b0e      	ldr	r3, [pc, #56]	; (80021cc <init_pid+0x154>)
 8002194:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <init_pid+0x160>)
 8002196:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	PID[3].min_out = 0.1;
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <init_pid+0x154>)
 800219c:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <init_pid+0x164>)
 800219e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	PID[3].max_out = 0.25;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	; (80021cc <init_pid+0x154>)
 80021a4:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 80021a8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
	PID[3].out = 0.0;
 80021ac:	4b07      	ldr	r3, [pc, #28]	; (80021cc <init_pid+0x154>)
 80021ae:	f04f 0200 	mov.w	r2, #0
 80021b2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	PID[3].target = 0.0;
 80021b6:	4b05      	ldr	r3, [pc, #20]	; (80021cc <init_pid+0x154>)
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000934 	.word	0x20000934
 80021d0:	3d4ccccd 	.word	0x3d4ccccd
 80021d4:	3e4ccccd 	.word	0x3e4ccccd
 80021d8:	41200000 	.word	0x41200000
 80021dc:	3dcccccd 	.word	0x3dcccccd
 80021e0:	3ecccccd 	.word	0x3ecccccd
 80021e4:	3d9fbe77 	.word	0x3d9fbe77
 80021e8:	40a00000 	.word	0x40a00000

080021ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021fe:	f001 f877 	bl	80032f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000

08002210 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002214:	b672      	cpsid	i
}
 8002216:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002218:	e7fe      	b.n	8002218 <Error_Handler+0x8>
	...

0800221c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
 8002226:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_MspInit+0x54>)
 8002228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222a:	4a11      	ldr	r2, [pc, #68]	; (8002270 <HAL_MspInit+0x54>)
 800222c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002230:	6453      	str	r3, [r2, #68]	; 0x44
 8002232:	4b0f      	ldr	r3, [pc, #60]	; (8002270 <HAL_MspInit+0x54>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223a:	607b      	str	r3, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	603b      	str	r3, [r7, #0]
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <HAL_MspInit+0x54>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	4a0a      	ldr	r2, [pc, #40]	; (8002270 <HAL_MspInit+0x54>)
 8002248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224c:	6413      	str	r3, [r2, #64]	; 0x40
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <HAL_MspInit+0x54>)
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002256:	603b      	str	r3, [r7, #0]
 8002258:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	210f      	movs	r1, #15
 800225e:	f06f 0001 	mvn.w	r0, #1
 8002262:	f001 fb7f 	bl	8003964 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002266:	bf00      	nop
 8002268:	3708      	adds	r7, #8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800

08002274 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b08c      	sub	sp, #48	; 0x30
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800227c:	2300      	movs	r3, #0
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002280:	2300      	movs	r3, #0
 8002282:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002284:	2200      	movs	r2, #0
 8002286:	6879      	ldr	r1, [r7, #4]
 8002288:	2019      	movs	r0, #25
 800228a:	f001 fb6b 	bl	8003964 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800228e:	2019      	movs	r0, #25
 8002290:	f001 fb84 	bl	800399c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_InitTick+0xa4>)
 800229a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229c:	4a1e      	ldr	r2, [pc, #120]	; (8002318 <HAL_InitTick+0xa4>)
 800229e:	f043 0301 	orr.w	r3, r3, #1
 80022a2:	6453      	str	r3, [r2, #68]	; 0x44
 80022a4:	4b1c      	ldr	r3, [pc, #112]	; (8002318 <HAL_InitTick+0xa4>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	60fb      	str	r3, [r7, #12]
 80022ae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80022b0:	f107 0210 	add.w	r2, r7, #16
 80022b4:	f107 0314 	add.w	r3, r7, #20
 80022b8:	4611      	mov	r1, r2
 80022ba:	4618      	mov	r0, r3
 80022bc:	f002 fea2 	bl	8005004 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80022c0:	f002 fe8c 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80022c4:	4603      	mov	r3, r0
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022cc:	4a13      	ldr	r2, [pc, #76]	; (800231c <HAL_InitTick+0xa8>)
 80022ce:	fba2 2303 	umull	r2, r3, r2, r3
 80022d2:	0c9b      	lsrs	r3, r3, #18
 80022d4:	3b01      	subs	r3, #1
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80022d8:	4b11      	ldr	r3, [pc, #68]	; (8002320 <HAL_InitTick+0xac>)
 80022da:	4a12      	ldr	r2, [pc, #72]	; (8002324 <HAL_InitTick+0xb0>)
 80022dc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <HAL_InitTick+0xac>)
 80022e0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80022e4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80022e6:	4a0e      	ldr	r2, [pc, #56]	; (8002320 <HAL_InitTick+0xac>)
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80022ec:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <HAL_InitTick+0xac>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022f2:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_InitTick+0xac>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80022f8:	4809      	ldr	r0, [pc, #36]	; (8002320 <HAL_InitTick+0xac>)
 80022fa:	f002 feb5 	bl	8005068 <HAL_TIM_Base_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002304:	4806      	ldr	r0, [pc, #24]	; (8002320 <HAL_InitTick+0xac>)
 8002306:	f002 feff 	bl	8005108 <HAL_TIM_Base_Start_IT>
 800230a:	4603      	mov	r3, r0
 800230c:	e000      	b.n	8002310 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
}
 8002310:	4618      	mov	r0, r3
 8002312:	3730      	adds	r7, #48	; 0x30
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40023800 	.word	0x40023800
 800231c:	431bde83 	.word	0x431bde83
 8002320:	20000a04 	.word	0x20000a04
 8002324:	40010000 	.word	0x40010000

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800232c:	e7fe      	b.n	800232c <NMI_Handler+0x4>

0800232e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002332:	e7fe      	b.n	8002332 <HardFault_Handler+0x4>

08002334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002338:	e7fe      	b.n	8002338 <MemManage_Handler+0x4>

0800233a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800233e:	e7fe      	b.n	800233e <BusFault_Handler+0x4>

08002340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002344:	e7fe      	b.n	8002344 <UsageFault_Handler+0x4>

08002346 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8002358:	2001      	movs	r0, #1
 800235a:	f002 f853 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}

08002362 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI2_Pin);
 8002366:	2002      	movs	r0, #2
 8002368:	f002 f84c 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800236c:	bf00      	nop
 800236e:	bd80      	pop	{r7, pc}

08002370 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI3_Pin);
 8002374:	2004      	movs	r0, #4
 8002376:	f002 f845 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}

0800237e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI4_Pin);
 8002382:	2008      	movs	r0, #8
 8002384:	f002 f83e 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002388:	bf00      	nop
 800238a:	bd80      	pop	{r7, pc}

0800238c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI5_Pin);
 8002390:	2010      	movs	r0, #16
 8002392:	f002 f837 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}

0800239a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800239a:	b580      	push	{r7, lr}
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI6_Pin);
 800239e:	2040      	movs	r0, #64	; 0x40
 80023a0:	f002 f830 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI7_Pin);
 80023a4:	2080      	movs	r0, #128	; 0x80
 80023a6:	f002 f82d 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI8_Pin);
 80023aa:	f44f 7080 	mov.w	r0, #256	; 0x100
 80023ae:	f002 f829 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI9_Pin);
 80023b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80023b6:	f002 f825 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80023ba:	bf00      	nop
 80023bc:	bd80      	pop	{r7, pc}
	...

080023c0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80023c4:	4803      	ldr	r0, [pc, #12]	; (80023d4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 80023c6:	f003 f95b 	bl	8005680 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 80023cc:	f003 f958 	bl	8005680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000a04 	.word	0x20000a04
 80023d8:	20000c44 	.word	0x20000c44

080023dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI10_Pin);
 80023e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80023e4:	f002 f80e 	bl	8004404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023e8:	bf00      	nop
 80023ea:	bd80      	pop	{r7, pc}

080023ec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */
	PID[2].target = PID[3].out;
 80023f0:	4b12      	ldr	r3, [pc, #72]	; (800243c <TIM6_DAC_IRQHandler+0x50>)
 80023f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80023f6:	4a11      	ldr	r2, [pc, #68]	; (800243c <TIM6_DAC_IRQHandler+0x50>)
 80023f8:	66d3      	str	r3, [r2, #108]	; 0x6c
	get_encoder_data();
 80023fa:	f7ff fa61 	bl	80018c0 <get_encoder_data>
	calc_pid();
 80023fe:	f7ff fb33 	bl	8001a68 <calc_pid>
	set_voltage(0, PID[0].out);
 8002402:	4b0e      	ldr	r3, [pc, #56]	; (800243c <TIM6_DAC_IRQHandler+0x50>)
 8002404:	edd3 7a02 	vldr	s15, [r3, #8]
 8002408:	eeb0 0a67 	vmov.f32	s0, s15
 800240c:	2000      	movs	r0, #0
 800240e:	f7ff fd45 	bl	8001e9c <set_voltage>
	set_voltage(1, PID[1].out);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <TIM6_DAC_IRQHandler+0x50>)
 8002414:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002418:	eeb0 0a67 	vmov.f32	s0, s15
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff fd3d 	bl	8001e9c <set_voltage>
	set_voltage(2, PID[2].out);
 8002422:	4b06      	ldr	r3, [pc, #24]	; (800243c <TIM6_DAC_IRQHandler+0x50>)
 8002424:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8002428:	eeb0 0a67 	vmov.f32	s0, s15
 800242c:	2002      	movs	r0, #2
 800242e:	f7ff fd35 	bl	8001e9c <set_voltage>
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <TIM6_DAC_IRQHandler+0x54>)
 8002434:	f003 f924 	bl	8005680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	20000934 	.word	0x20000934
 8002440:	20000b24 	.word	0x20000b24

08002444 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002448:	4802      	ldr	r0, [pc, #8]	; (8002454 <TIM7_IRQHandler+0x10>)
 800244a:	f003 f919 	bl	8005680 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000b6c 	.word	0x20000b6c

08002458 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <DMA2_Stream0_IRQHandler+0x10>)
 800245e:	f001 fbb1 	bl	8003bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002462:	bf00      	nop
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200002d8 	.word	0x200002d8

0800246c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
	sync = 1;
 8002470:	4b03      	ldr	r3, [pc, #12]	; (8002480 <DMA2_Stream2_IRQHandler+0x14>)
 8002472:	2201      	movs	r2, #1
 8002474:	701a      	strb	r2, [r3, #0]
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002476:	4803      	ldr	r0, [pc, #12]	; (8002484 <DMA2_Stream2_IRQHandler+0x18>)
 8002478:	f001 fba4 	bl	8003bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800247c:	bf00      	nop
 800247e:	bd80      	pop	{r7, pc}
 8002480:	2000035c 	.word	0x2000035c
 8002484:	20000da4 	.word	0x20000da4

08002488 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800248c:	4802      	ldr	r0, [pc, #8]	; (8002498 <DMA2_Stream7_IRQHandler+0x10>)
 800248e:	f001 fb99 	bl	8003bc4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002492:	bf00      	nop
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000e04 	.word	0x20000e04

0800249c <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
TIM_HandleTypeDef htim12;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08c      	sub	sp, #48	; 0x30
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024a2:	f107 030c 	add.w	r3, r7, #12
 80024a6:	2224      	movs	r2, #36	; 0x24
 80024a8:	2100      	movs	r1, #0
 80024aa:	4618      	mov	r0, r3
 80024ac:	f007 fa1c 	bl	80098e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024b0:	1d3b      	adds	r3, r7, #4
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024b8:	4b21      	ldr	r3, [pc, #132]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024c6:	4b1e      	ldr	r3, [pc, #120]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024ce:	f04f 32ff 	mov.w	r2, #4294967295
 80024d2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024d4:	4b1a      	ldr	r3, [pc, #104]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <MX_TIM2_Init+0xa4>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80024e0:	2301      	movs	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024e8:	2301      	movs	r3, #1
 80024ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024f8:	2301      	movs	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002500:	2300      	movs	r3, #0
 8002502:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002504:	f107 030c 	add.w	r3, r7, #12
 8002508:	4619      	mov	r1, r3
 800250a:	480d      	ldr	r0, [pc, #52]	; (8002540 <MX_TIM2_Init+0xa4>)
 800250c:	f002 ff84 	bl	8005418 <HAL_TIM_Encoder_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8002516:	f7ff fe7b 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <MX_TIM2_Init+0xa4>)
 8002528:	f003 fd12 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8002532:	f7ff fe6d 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002536:	bf00      	nop
 8002538:	3730      	adds	r7, #48	; 0x30
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000a4c 	.word	0x20000a4c

08002544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08c      	sub	sp, #48	; 0x30
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800254a:	f107 030c 	add.w	r3, r7, #12
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f007 f9c8 	bl	80098e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002558:	1d3b      	adds	r3, r7, #4
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]
 800255e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <MX_TIM3_Init+0xa4>)
 8002564:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002568:	2200      	movs	r2, #0
 800256a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800256c:	4b1d      	ldr	r3, [pc, #116]	; (80025e4 <MX_TIM3_Init+0xa0>)
 800256e:	2200      	movs	r2, #0
 8002570:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800257a:	4b1a      	ldr	r3, [pc, #104]	; (80025e4 <MX_TIM3_Init+0xa0>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <MX_TIM3_Init+0xa0>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002586:	2301      	movs	r3, #1
 8002588:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800258a:	2300      	movs	r3, #0
 800258c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800258e:	2301      	movs	r3, #1
 8002590:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800259e:	2301      	movs	r3, #1
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80025a2:	2300      	movs	r3, #0
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	4619      	mov	r1, r3
 80025b0:	480c      	ldr	r0, [pc, #48]	; (80025e4 <MX_TIM3_Init+0xa0>)
 80025b2:	f002 ff31 	bl	8005418 <HAL_TIM_Encoder_Init>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80025bc:	f7ff fe28 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c0:	2300      	movs	r3, #0
 80025c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025c8:	1d3b      	adds	r3, r7, #4
 80025ca:	4619      	mov	r1, r3
 80025cc:	4805      	ldr	r0, [pc, #20]	; (80025e4 <MX_TIM3_Init+0xa0>)
 80025ce:	f003 fcbf 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80025d8:	f7ff fe1a 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80025dc:	bf00      	nop
 80025de:	3730      	adds	r7, #48	; 0x30
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000a94 	.word	0x20000a94
 80025e8:	40000400 	.word	0x40000400

080025ec <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08a      	sub	sp, #40	; 0x28
 80025f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
 800260a:	615a      	str	r2, [r3, #20]
 800260c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800260e:	4b32      	ldr	r3, [pc, #200]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002610:	4a32      	ldr	r2, [pc, #200]	; (80026dc <MX_TIM4_Init+0xf0>)
 8002612:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 6;
 8002614:	4b30      	ldr	r3, [pc, #192]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002616:	2206      	movs	r2, #6
 8002618:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <MX_TIM4_Init+0xec>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8002620:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002622:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002626:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002628:	4b2b      	ldr	r3, [pc, #172]	; (80026d8 <MX_TIM4_Init+0xec>)
 800262a:	2200      	movs	r2, #0
 800262c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002630:	2200      	movs	r2, #0
 8002632:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002634:	4828      	ldr	r0, [pc, #160]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002636:	f002 fdd7 	bl	80051e8 <HAL_TIM_PWM_Init>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002640:	f7ff fde6 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002648:	2300      	movs	r3, #0
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800264c:	f107 0320 	add.w	r3, r7, #32
 8002650:	4619      	mov	r1, r3
 8002652:	4821      	ldr	r0, [pc, #132]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002654:	f003 fc7c 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800265e:	f7ff fdd7 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002662:	2360      	movs	r3, #96	; 0x60
 8002664:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002672:	1d3b      	adds	r3, r7, #4
 8002674:	2200      	movs	r2, #0
 8002676:	4619      	mov	r1, r3
 8002678:	4817      	ldr	r0, [pc, #92]	; (80026d8 <MX_TIM4_Init+0xec>)
 800267a:	f003 f909 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002684:	f7ff fdc4 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002688:	1d3b      	adds	r3, r7, #4
 800268a:	2204      	movs	r2, #4
 800268c:	4619      	mov	r1, r3
 800268e:	4812      	ldr	r0, [pc, #72]	; (80026d8 <MX_TIM4_Init+0xec>)
 8002690:	f003 f8fe 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800269a:	f7ff fdb9 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2208      	movs	r2, #8
 80026a2:	4619      	mov	r1, r3
 80026a4:	480c      	ldr	r0, [pc, #48]	; (80026d8 <MX_TIM4_Init+0xec>)
 80026a6:	f003 f8f3 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80026b0:	f7ff fdae 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80026b4:	1d3b      	adds	r3, r7, #4
 80026b6:	220c      	movs	r2, #12
 80026b8:	4619      	mov	r1, r3
 80026ba:	4807      	ldr	r0, [pc, #28]	; (80026d8 <MX_TIM4_Init+0xec>)
 80026bc:	f003 f8e8 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80026c6:	f7ff fda3 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026ca:	4803      	ldr	r0, [pc, #12]	; (80026d8 <MX_TIM4_Init+0xec>)
 80026cc:	f000 fba0 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 80026d0:	bf00      	nop
 80026d2:	3728      	adds	r7, #40	; 0x28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000adc 	.word	0x20000adc
 80026dc:	40000800 	.word	0x40000800

080026e0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e6:	463b      	mov	r3, r7
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <MX_TIM6_Init+0x64>)
 80026f0:	4a15      	ldr	r2, [pc, #84]	; (8002748 <MX_TIM6_Init+0x68>)
 80026f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 839;
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <MX_TIM6_Init+0x64>)
 80026f6:	f240 3247 	movw	r2, #839	; 0x347
 80026fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <MX_TIM6_Init+0x64>)
 80026fe:	2200      	movs	r2, #0
 8002700:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002702:	4b10      	ldr	r3, [pc, #64]	; (8002744 <MX_TIM6_Init+0x64>)
 8002704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002708:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800270a:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_TIM6_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002710:	480c      	ldr	r0, [pc, #48]	; (8002744 <MX_TIM6_Init+0x64>)
 8002712:	f002 fca9 	bl	8005068 <HAL_TIM_Base_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800271c:	f7ff fd78 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002724:	2300      	movs	r3, #0
 8002726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002728:	463b      	mov	r3, r7
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <MX_TIM6_Init+0x64>)
 800272e:	f003 fc0f 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002738:	f7ff fd6a 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800273c:	bf00      	nop
 800273e:	3708      	adds	r7, #8
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000b24 	.word	0x20000b24
 8002748:	40001000 	.word	0x40001000

0800274c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002752:	463b      	mov	r3, r7
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800275a:	4b15      	ldr	r3, [pc, #84]	; (80027b0 <MX_TIM7_Init+0x64>)
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <MX_TIM7_Init+0x68>)
 800275e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 839;
 8002760:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002762:	f240 3247 	movw	r2, #839	; 0x347
 8002766:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <MX_TIM7_Init+0x64>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002774:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002776:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <MX_TIM7_Init+0x64>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <MX_TIM7_Init+0x64>)
 800277e:	f002 fc73 	bl	8005068 <HAL_TIM_Base_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002788:	f7ff fd42 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800278c:	2300      	movs	r3, #0
 800278e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002790:	2300      	movs	r3, #0
 8002792:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002794:	463b      	mov	r3, r7
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	; (80027b0 <MX_TIM7_Init+0x64>)
 800279a:	f003 fbd9 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80027a4:	f7ff fd34 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000b6c 	.word	0x20000b6c
 80027b4:	40001400 	.word	0x40001400

080027b8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08c      	sub	sp, #48	; 0x30
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80027be:	f107 030c 	add.w	r3, r7, #12
 80027c2:	2224      	movs	r2, #36	; 0x24
 80027c4:	2100      	movs	r1, #0
 80027c6:	4618      	mov	r0, r3
 80027c8:	f007 f88e 	bl	80098e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027cc:	1d3b      	adds	r3, r7, #4
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027d4:	4b22      	ldr	r3, [pc, #136]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027d6:	4a23      	ldr	r2, [pc, #140]	; (8002864 <MX_TIM8_Init+0xac>)
 80027d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80027da:	4b21      	ldr	r3, [pc, #132]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027dc:	2200      	movs	r2, #0
 80027de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e0:	4b1f      	ldr	r3, [pc, #124]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80027e6:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027f4:	4b1a      	ldr	r3, [pc, #104]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b19      	ldr	r3, [pc, #100]	; (8002860 <MX_TIM8_Init+0xa8>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002800:	2301      	movs	r3, #1
 8002802:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002804:	2300      	movs	r3, #0
 8002806:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002808:	2301      	movs	r3, #1
 800280a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002810:	2300      	movs	r3, #0
 8002812:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002814:	2300      	movs	r3, #0
 8002816:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002818:	2301      	movs	r3, #1
 800281a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800281c:	2300      	movs	r3, #0
 800281e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8002824:	f107 030c 	add.w	r3, r7, #12
 8002828:	4619      	mov	r1, r3
 800282a:	480d      	ldr	r0, [pc, #52]	; (8002860 <MX_TIM8_Init+0xa8>)
 800282c:	f002 fdf4 	bl	8005418 <HAL_TIM_Encoder_Init>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8002836:	f7ff fceb 	bl	8002210 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800283a:	2300      	movs	r3, #0
 800283c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	4619      	mov	r1, r3
 8002846:	4806      	ldr	r0, [pc, #24]	; (8002860 <MX_TIM8_Init+0xa8>)
 8002848:	f003 fb82 	bl	8005f50 <HAL_TIMEx_MasterConfigSynchronization>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8002852:	f7ff fcdd 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8002856:	bf00      	nop
 8002858:	3730      	adds	r7, #48	; 0x30
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	20000bb4 	.word	0x20000bb4
 8002864:	40010400 	.word	0x40010400

08002868 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	2200      	movs	r2, #0
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	605a      	str	r2, [r3, #4]
 8002876:	609a      	str	r2, [r3, #8]
 8002878:	60da      	str	r2, [r3, #12]
 800287a:	611a      	str	r2, [r3, #16]
 800287c:	615a      	str	r2, [r3, #20]
 800287e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002880:	4b1f      	ldr	r3, [pc, #124]	; (8002900 <MX_TIM9_Init+0x98>)
 8002882:	4a20      	ldr	r2, [pc, #128]	; (8002904 <MX_TIM9_Init+0x9c>)
 8002884:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 83;
 8002886:	4b1e      	ldr	r3, [pc, #120]	; (8002900 <MX_TIM9_Init+0x98>)
 8002888:	2253      	movs	r2, #83	; 0x53
 800288a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800288c:	4b1c      	ldr	r3, [pc, #112]	; (8002900 <MX_TIM9_Init+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8002892:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <MX_TIM9_Init+0x98>)
 8002894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002898:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800289a:	4b19      	ldr	r3, [pc, #100]	; (8002900 <MX_TIM9_Init+0x98>)
 800289c:	2200      	movs	r2, #0
 800289e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <MX_TIM9_Init+0x98>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80028a6:	4816      	ldr	r0, [pc, #88]	; (8002900 <MX_TIM9_Init+0x98>)
 80028a8:	f002 fc9e 	bl	80051e8 <HAL_TIM_PWM_Init>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 80028b2:	f7ff fcad 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028b6:	2360      	movs	r3, #96	; 0x60
 80028b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028ba:	2300      	movs	r3, #0
 80028bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028c6:	1d3b      	adds	r3, r7, #4
 80028c8:	2200      	movs	r2, #0
 80028ca:	4619      	mov	r1, r3
 80028cc:	480c      	ldr	r0, [pc, #48]	; (8002900 <MX_TIM9_Init+0x98>)
 80028ce:	f002 ffdf 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 80028d8:	f7ff fc9a 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028dc:	1d3b      	adds	r3, r7, #4
 80028de:	2204      	movs	r2, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4807      	ldr	r0, [pc, #28]	; (8002900 <MX_TIM9_Init+0x98>)
 80028e4:	f002 ffd4 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80028ee:	f7ff fc8f 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80028f2:	4803      	ldr	r0, [pc, #12]	; (8002900 <MX_TIM9_Init+0x98>)
 80028f4:	f000 fa8c 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 80028f8:	bf00      	nop
 80028fa:	3720      	adds	r7, #32
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000bfc 	.word	0x20000bfc
 8002904:	40014000 	.word	0x40014000

08002908 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b088      	sub	sp, #32
 800290c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	60da      	str	r2, [r3, #12]
 800291a:	611a      	str	r2, [r3, #16]
 800291c:	615a      	str	r2, [r3, #20]
 800291e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002920:	4b1e      	ldr	r3, [pc, #120]	; (800299c <MX_TIM10_Init+0x94>)
 8002922:	4a1f      	ldr	r2, [pc, #124]	; (80029a0 <MX_TIM10_Init+0x98>)
 8002924:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 8002926:	4b1d      	ldr	r3, [pc, #116]	; (800299c <MX_TIM10_Init+0x94>)
 8002928:	2253      	movs	r2, #83	; 0x53
 800292a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800292c:	4b1b      	ldr	r3, [pc, #108]	; (800299c <MX_TIM10_Init+0x94>)
 800292e:	2200      	movs	r2, #0
 8002930:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8002932:	4b1a      	ldr	r3, [pc, #104]	; (800299c <MX_TIM10_Init+0x94>)
 8002934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002938:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800293a:	4b18      	ldr	r3, [pc, #96]	; (800299c <MX_TIM10_Init+0x94>)
 800293c:	2200      	movs	r2, #0
 800293e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <MX_TIM10_Init+0x94>)
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002946:	4815      	ldr	r0, [pc, #84]	; (800299c <MX_TIM10_Init+0x94>)
 8002948:	f002 fb8e 	bl	8005068 <HAL_TIM_Base_Init>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002952:	f7ff fc5d 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002956:	4811      	ldr	r0, [pc, #68]	; (800299c <MX_TIM10_Init+0x94>)
 8002958:	f002 fc46 	bl	80051e8 <HAL_TIM_PWM_Init>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002962:	f7ff fc55 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002966:	2360      	movs	r3, #96	; 0x60
 8002968:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800296a:	2300      	movs	r3, #0
 800296c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002976:	1d3b      	adds	r3, r7, #4
 8002978:	2200      	movs	r2, #0
 800297a:	4619      	mov	r1, r3
 800297c:	4807      	ldr	r0, [pc, #28]	; (800299c <MX_TIM10_Init+0x94>)
 800297e:	f002 ff87 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002988:	f7ff fc42 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800298c:	4803      	ldr	r0, [pc, #12]	; (800299c <MX_TIM10_Init+0x94>)
 800298e:	f000 fa3f 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 8002992:	bf00      	nop
 8002994:	3720      	adds	r7, #32
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	20000c44 	.word	0x20000c44
 80029a0:	40014400 	.word	0x40014400

080029a4 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b088      	sub	sp, #32
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80029aa:	1d3b      	adds	r3, r7, #4
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
 80029b6:	611a      	str	r2, [r3, #16]
 80029b8:	615a      	str	r2, [r3, #20]
 80029ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80029bc:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029be:	4a1f      	ldr	r2, [pc, #124]	; (8002a3c <MX_TIM11_Init+0x98>)
 80029c0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 83;
 80029c2:	4b1d      	ldr	r3, [pc, #116]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029c4:	2253      	movs	r2, #83	; 0x53
 80029c6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000;
 80029ce:	4b1a      	ldr	r3, [pc, #104]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80029d4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029de:	2200      	movs	r2, #0
 80029e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80029e2:	4815      	ldr	r0, [pc, #84]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029e4:	f002 fb40 	bl	8005068 <HAL_TIM_Base_Init>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80029ee:	f7ff fc0f 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80029f2:	4811      	ldr	r0, [pc, #68]	; (8002a38 <MX_TIM11_Init+0x94>)
 80029f4:	f002 fbf8 	bl	80051e8 <HAL_TIM_PWM_Init>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80029fe:	f7ff fc07 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a02:	2360      	movs	r3, #96	; 0x60
 8002a04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a06:	2300      	movs	r3, #0
 8002a08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a12:	1d3b      	adds	r3, r7, #4
 8002a14:	2200      	movs	r2, #0
 8002a16:	4619      	mov	r1, r3
 8002a18:	4807      	ldr	r0, [pc, #28]	; (8002a38 <MX_TIM11_Init+0x94>)
 8002a1a:	f002 ff39 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d001      	beq.n	8002a28 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8002a24:	f7ff fbf4 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8002a28:	4803      	ldr	r0, [pc, #12]	; (8002a38 <MX_TIM11_Init+0x94>)
 8002a2a:	f000 f9f1 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 8002a2e:	bf00      	nop
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000c8c 	.word	0x20000c8c
 8002a3c:	40014800 	.word	0x40014800

08002a40 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b088      	sub	sp, #32
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a46:	1d3b      	adds	r3, r7, #4
 8002a48:	2200      	movs	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	605a      	str	r2, [r3, #4]
 8002a4e:	609a      	str	r2, [r3, #8]
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	611a      	str	r2, [r3, #16]
 8002a54:	615a      	str	r2, [r3, #20]
 8002a56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8002a58:	4b1f      	ldr	r3, [pc, #124]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a5a:	4a20      	ldr	r2, [pc, #128]	; (8002adc <MX_TIM12_Init+0x9c>)
 8002a5c:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 41;
 8002a5e:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a60:	2229      	movs	r2, #41	; 0x29
 8002a62:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a6c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a70:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a78:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002a7e:	4816      	ldr	r0, [pc, #88]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002a80:	f002 fbb2 	bl	80051e8 <HAL_TIM_PWM_Init>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d001      	beq.n	8002a8e <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002a8a:	f7ff fbc1 	bl	8002210 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a8e:	2360      	movs	r3, #96	; 0x60
 8002a90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a96:	2300      	movs	r3, #0
 8002a98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a9e:	1d3b      	adds	r3, r7, #4
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	480c      	ldr	r0, [pc, #48]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002aa6:	f002 fef3 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d001      	beq.n	8002ab4 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002ab0:	f7ff fbae 	bl	8002210 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002ab4:	1d3b      	adds	r3, r7, #4
 8002ab6:	2204      	movs	r2, #4
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4807      	ldr	r0, [pc, #28]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002abc:	f002 fee8 	bl	8005890 <HAL_TIM_PWM_ConfigChannel>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8002ac6:	f7ff fba3 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002aca:	4803      	ldr	r0, [pc, #12]	; (8002ad8 <MX_TIM12_Init+0x98>)
 8002acc:	f000 f9a0 	bl	8002e10 <HAL_TIM_MspPostInit>

}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	20000cd4 	.word	0x20000cd4
 8002adc:	40001800 	.word	0x40001800

08002ae0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b08e      	sub	sp, #56	; 0x38
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aec:	2200      	movs	r2, #0
 8002aee:	601a      	str	r2, [r3, #0]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d14b      	bne.n	8002b9a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	4a57      	ldr	r2, [pc, #348]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6413      	str	r3, [r2, #64]	; 0x40
 8002b12:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
 8002b22:	4b51      	ldr	r3, [pc, #324]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b26:	4a50      	ldr	r2, [pc, #320]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b28:	f043 0301 	orr.w	r3, r3, #1
 8002b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2e:	4b4e      	ldr	r3, [pc, #312]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	61fb      	str	r3, [r7, #28]
 8002b38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	4b4a      	ldr	r3, [pc, #296]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a49      	ldr	r2, [pc, #292]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b44:	f043 0302 	orr.w	r3, r3, #2
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b47      	ldr	r3, [pc, #284]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	61bb      	str	r3, [r7, #24]
 8002b54:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC2A_Pin;
 8002b56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b60:	2301      	movs	r3, #1
 8002b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b64:	2300      	movs	r3, #0
 8002b66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2A_GPIO_Port, &GPIO_InitStruct);
 8002b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b70:	4619      	mov	r1, r3
 8002b72:	483e      	ldr	r0, [pc, #248]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x18c>)
 8002b74:	f001 fa90 	bl	8004098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC2B_Pin;
 8002b78:	2308      	movs	r3, #8
 8002b7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ENC2B_GPIO_Port, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4837      	ldr	r0, [pc, #220]	; (8002c70 <HAL_TIM_Encoder_MspInit+0x190>)
 8002b94:	f001 fa80 	bl	8004098 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002b98:	e062      	b.n	8002c60 <HAL_TIM_Encoder_MspInit+0x180>
  else if(tim_encoderHandle->Instance==TIM3)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_TIM_Encoder_MspInit+0x194>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d12c      	bne.n	8002bfe <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	4a2e      	ldr	r2, [pc, #184]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bae:	f043 0302 	orr.w	r3, r3, #2
 8002bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bb4:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4a27      	ldr	r2, [pc, #156]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd0:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	613b      	str	r3, [r7, #16]
 8002bda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENC3A_Pin|ENC3B_Pin;
 8002bdc:	23c0      	movs	r3, #192	; 0xc0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bec:	2302      	movs	r3, #2
 8002bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	481d      	ldr	r0, [pc, #116]	; (8002c6c <HAL_TIM_Encoder_MspInit+0x18c>)
 8002bf8:	f001 fa4e 	bl	8004098 <HAL_GPIO_Init>
}
 8002bfc:	e030      	b.n	8002c60 <HAL_TIM_Encoder_MspInit+0x180>
  else if(tim_encoderHandle->Instance==TIM8)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a1d      	ldr	r2, [pc, #116]	; (8002c78 <HAL_TIM_Encoder_MspInit+0x198>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d12b      	bne.n	8002c60 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c10:	4a15      	ldr	r2, [pc, #84]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c12:	f043 0302 	orr.w	r3, r3, #2
 8002c16:	6453      	str	r3, [r2, #68]	; 0x44
 8002c18:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c24:	2300      	movs	r3, #0
 8002c26:	60bb      	str	r3, [r7, #8]
 8002c28:	4b0f      	ldr	r3, [pc, #60]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2c:	4a0e      	ldr	r2, [pc, #56]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c2e:	f043 0304 	orr.w	r3, r3, #4
 8002c32:	6313      	str	r3, [r2, #48]	; 0x30
 8002c34:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_TIM_Encoder_MspInit+0x188>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	60bb      	str	r3, [r7, #8]
 8002c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENC1A_Pin|ENC1B_Pin;
 8002c40:	23c0      	movs	r3, #192	; 0xc0
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c44:	2302      	movs	r3, #2
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c50:	2303      	movs	r3, #3
 8002c52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4808      	ldr	r0, [pc, #32]	; (8002c7c <HAL_TIM_Encoder_MspInit+0x19c>)
 8002c5c:	f001 fa1c 	bl	8004098 <HAL_GPIO_Init>
}
 8002c60:	bf00      	nop
 8002c62:	3738      	adds	r7, #56	; 0x38
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40020000 	.word	0x40020000
 8002c70:	40020400 	.word	0x40020400
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40010400 	.word	0x40010400
 8002c7c:	40020800 	.word	0x40020800

08002c80 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b087      	sub	sp, #28
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <HAL_TIM_PWM_MspInit+0x8c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10e      	bne.n	8002cb0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c92:	2300      	movs	r3, #0
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	4b1e      	ldr	r3, [pc, #120]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002c9c:	f043 0304 	orr.w	r3, r3, #4
 8002ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	f003 0304 	and.w	r3, r3, #4
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002cae:	e026      	b.n	8002cfe <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a17      	ldr	r2, [pc, #92]	; (8002d14 <HAL_TIM_PWM_MspInit+0x94>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d10e      	bne.n	8002cd8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	613b      	str	r3, [r7, #16]
 8002cbe:	4b14      	ldr	r3, [pc, #80]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cca:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd2:	613b      	str	r3, [r7, #16]
 8002cd4:	693b      	ldr	r3, [r7, #16]
}
 8002cd6:	e012      	b.n	8002cfe <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM12)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a0e      	ldr	r2, [pc, #56]	; (8002d18 <HAL_TIM_PWM_MspInit+0x98>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d10d      	bne.n	8002cfe <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a09      	ldr	r2, [pc, #36]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b07      	ldr	r3, [pc, #28]	; (8002d10 <HAL_TIM_PWM_MspInit+0x90>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
}
 8002cfe:	bf00      	nop
 8002d00:	371c      	adds	r7, #28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	40000800 	.word	0x40000800
 8002d10:	40023800 	.word	0x40023800
 8002d14:	40014000 	.word	0x40014000
 8002d18:	40001800 	.word	0x40001800

08002d1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <HAL_TIM_Base_MspInit+0xe0>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d116      	bne.n	8002d5c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	617b      	str	r3, [r7, #20]
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a32      	ldr	r2, [pc, #200]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d38:	f043 0310 	orr.w	r3, r3, #16
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b30      	ldr	r3, [pc, #192]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f003 0310 	and.w	r3, r3, #16
 8002d46:	617b      	str	r3, [r7, #20]
 8002d48:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	2105      	movs	r1, #5
 8002d4e:	2036      	movs	r0, #54	; 0x36
 8002d50:	f000 fe08 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d54:	2036      	movs	r0, #54	; 0x36
 8002d56:	f000 fe21 	bl	800399c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM11_CLK_ENABLE();
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8002d5a:	e04a      	b.n	8002df2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM7)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a28      	ldr	r2, [pc, #160]	; (8002e04 <HAL_TIM_Base_MspInit+0xe8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d116      	bne.n	8002d94 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	4a24      	ldr	r2, [pc, #144]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d70:	f043 0320 	orr.w	r3, r3, #32
 8002d74:	6413      	str	r3, [r2, #64]	; 0x40
 8002d76:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 0320 	and.w	r3, r3, #32
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2105      	movs	r1, #5
 8002d86:	2037      	movs	r0, #55	; 0x37
 8002d88:	f000 fdec 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002d8c:	2037      	movs	r0, #55	; 0x37
 8002d8e:	f000 fe05 	bl	800399c <HAL_NVIC_EnableIRQ>
}
 8002d92:	e02e      	b.n	8002df2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM10)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a1b      	ldr	r2, [pc, #108]	; (8002e08 <HAL_TIM_Base_MspInit+0xec>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d116      	bne.n	8002dcc <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	4b17      	ldr	r3, [pc, #92]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002da8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	210f      	movs	r1, #15
 8002dbe:	2019      	movs	r0, #25
 8002dc0:	f000 fdd0 	bl	8003964 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002dc4:	2019      	movs	r0, #25
 8002dc6:	f000 fde9 	bl	800399c <HAL_NVIC_EnableIRQ>
}
 8002dca:	e012      	b.n	8002df2 <HAL_TIM_Base_MspInit+0xd6>
  else if(tim_baseHandle->Instance==TIM11)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <HAL_TIM_Base_MspInit+0xf0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d10d      	bne.n	8002df2 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60bb      	str	r3, [r7, #8]
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a08      	ldr	r2, [pc, #32]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b06      	ldr	r3, [pc, #24]	; (8002e00 <HAL_TIM_Base_MspInit+0xe4>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
}
 8002df2:	bf00      	nop
 8002df4:	3718      	adds	r7, #24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40001000 	.word	0x40001000
 8002e00:	40023800 	.word	0x40023800
 8002e04:	40001400 	.word	0x40001400
 8002e08:	40014400 	.word	0x40014400
 8002e0c:	40014800 	.word	0x40014800

08002e10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b08c      	sub	sp, #48	; 0x30
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	609a      	str	r2, [r3, #8]
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a5c      	ldr	r2, [pc, #368]	; (8002fa0 <HAL_TIM_MspPostInit+0x190>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d11f      	bne.n	8002e72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e3c:	f043 0308 	orr.w	r3, r3, #8
 8002e40:	6313      	str	r3, [r2, #48]	; 0x30
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	61bb      	str	r3, [r7, #24]
 8002e4c:	69bb      	ldr	r3, [r7, #24]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = BTN1_PWM_Pin|BTN2_PWM_Pin|BTN3_PWM_Pin|BTN4_PWM_Pin;
 8002e4e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e54:	2302      	movs	r3, #2
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e60:	2302      	movs	r3, #2
 8002e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e64:	f107 031c 	add.w	r3, r7, #28
 8002e68:	4619      	mov	r1, r3
 8002e6a:	484f      	ldr	r0, [pc, #316]	; (8002fa8 <HAL_TIM_MspPostInit+0x198>)
 8002e6c:	f001 f914 	bl	8004098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e70:	e091      	b.n	8002f96 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM9)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a4d      	ldr	r2, [pc, #308]	; (8002fac <HAL_TIM_MspPostInit+0x19c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d11e      	bne.n	8002eba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	4a47      	ldr	r2, [pc, #284]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e86:	f043 0310 	orr.w	r3, r3, #16
 8002e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e8c:	4b45      	ldr	r3, [pc, #276]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	617b      	str	r3, [r7, #20]
 8002e96:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BTN8_PWM_Pin|BTN7_PWM_Pin;
 8002e98:	2360      	movs	r3, #96	; 0x60
 8002e9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e9c:	2302      	movs	r3, #2
 8002e9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002eac:	f107 031c 	add.w	r3, r7, #28
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	483f      	ldr	r0, [pc, #252]	; (8002fb0 <HAL_TIM_MspPostInit+0x1a0>)
 8002eb4:	f001 f8f0 	bl	8004098 <HAL_GPIO_Init>
}
 8002eb8:	e06d      	b.n	8002f96 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM10)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a3d      	ldr	r2, [pc, #244]	; (8002fb4 <HAL_TIM_MspPostInit+0x1a4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d11f      	bne.n	8002f04 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	4a35      	ldr	r2, [pc, #212]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002ece:	f043 0302 	orr.w	r3, r3, #2
 8002ed2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed4:	4b33      	ldr	r3, [pc, #204]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = BTN6_PWM_Pin;
 8002ee0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eea:	2300      	movs	r3, #0
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BTN6_PWM_GPIO_Port, &GPIO_InitStruct);
 8002ef6:	f107 031c 	add.w	r3, r7, #28
 8002efa:	4619      	mov	r1, r3
 8002efc:	482e      	ldr	r0, [pc, #184]	; (8002fb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002efe:	f001 f8cb 	bl	8004098 <HAL_GPIO_Init>
}
 8002f02:	e048      	b.n	8002f96 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM11)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a2c      	ldr	r2, [pc, #176]	; (8002fbc <HAL_TIM_MspPostInit+0x1ac>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d11f      	bne.n	8002f4e <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b24      	ldr	r3, [pc, #144]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a23      	ldr	r2, [pc, #140]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b21      	ldr	r3, [pc, #132]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BTN5_PWM_Pin;
 8002f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f30:	2302      	movs	r3, #2
 8002f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(BTN5_PWM_GPIO_Port, &GPIO_InitStruct);
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	4619      	mov	r1, r3
 8002f46:	481c      	ldr	r0, [pc, #112]	; (8002fb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002f48:	f001 f8a6 	bl	8004098 <HAL_GPIO_Init>
}
 8002f4c:	e023      	b.n	8002f96 <HAL_TIM_MspPostInit+0x186>
  else if(timHandle->Instance==TIM12)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a1b      	ldr	r2, [pc, #108]	; (8002fc0 <HAL_TIM_MspPostInit+0x1b0>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d11e      	bne.n	8002f96 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	4b11      	ldr	r3, [pc, #68]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	4a10      	ldr	r2, [pc, #64]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f62:	f043 0302 	orr.w	r3, r3, #2
 8002f66:	6313      	str	r3, [r2, #48]	; 0x30
 8002f68:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_TIM_MspPostInit+0x194>)
 8002f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BTN9_PWM_Pin|BTN10_PWM_Pin;
 8002f74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7a:	2302      	movs	r3, #2
 8002f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f86:	2309      	movs	r3, #9
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f8a:	f107 031c 	add.w	r3, r7, #28
 8002f8e:	4619      	mov	r1, r3
 8002f90:	4809      	ldr	r0, [pc, #36]	; (8002fb8 <HAL_TIM_MspPostInit+0x1a8>)
 8002f92:	f001 f881 	bl	8004098 <HAL_GPIO_Init>
}
 8002f96:	bf00      	nop
 8002f98:	3730      	adds	r7, #48	; 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	40000800 	.word	0x40000800
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40020c00 	.word	0x40020c00
 8002fac:	40014000 	.word	0x40014000
 8002fb0:	40021000 	.word	0x40021000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40020400 	.word	0x40020400
 8002fbc:	40014800 	.word	0x40014800
 8002fc0:	40001800 	.word	0x40001800

08002fc4 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fca:	4a12      	ldr	r2, [pc, #72]	; (8003014 <MX_USART1_UART_Init+0x50>)
 8002fcc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002fd6:	4b0e      	ldr	r3, [pc, #56]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002fe8:	4b09      	ldr	r3, [pc, #36]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002fea:	220c      	movs	r2, #12
 8002fec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fee:	4b08      	ldr	r3, [pc, #32]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ff4:	4b06      	ldr	r3, [pc, #24]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ffa:	4805      	ldr	r0, [pc, #20]	; (8003010 <MX_USART1_UART_Init+0x4c>)
 8002ffc:	f003 f838 	bl	8006070 <HAL_UART_Init>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003006:	f7ff f903 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20000d1c 	.word	0x20000d1c
 8003014:	40011000 	.word	0x40011000

08003018 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800301c:	4b11      	ldr	r3, [pc, #68]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 800301e:	4a12      	ldr	r2, [pc, #72]	; (8003068 <MX_USART3_UART_Init+0x50>)
 8003020:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 8003024:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003028:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 800302c:	2200      	movs	r2, #0
 800302e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003030:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 8003032:	2200      	movs	r2, #0
 8003034:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 8003038:	2200      	movs	r2, #0
 800303a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 800303e:	220c      	movs	r2, #12
 8003040:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003042:	4b08      	ldr	r3, [pc, #32]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003048:	4b06      	ldr	r3, [pc, #24]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 800304a:	2200      	movs	r2, #0
 800304c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800304e:	4805      	ldr	r0, [pc, #20]	; (8003064 <MX_USART3_UART_Init+0x4c>)
 8003050:	f003 f80e 	bl	8006070 <HAL_UART_Init>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d001      	beq.n	800305e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800305a:	f7ff f8d9 	bl	8002210 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	20000d60 	.word	0x20000d60
 8003068:	40004800 	.word	0x40004800

0800306c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08c      	sub	sp, #48	; 0x30
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 031c 	add.w	r3, r7, #28
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a61      	ldr	r2, [pc, #388]	; (8003210 <HAL_UART_MspInit+0x1a4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	f040 8089 	bne.w	80031a2 <HAL_UART_MspInit+0x136>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003090:	2300      	movs	r3, #0
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	4b5f      	ldr	r3, [pc, #380]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	4a5e      	ldr	r2, [pc, #376]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 800309a:	f043 0310 	orr.w	r3, r3, #16
 800309e:	6453      	str	r3, [r2, #68]	; 0x44
 80030a0:	4b5c      	ldr	r3, [pc, #368]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	f003 0310 	and.w	r3, r3, #16
 80030a8:	61bb      	str	r3, [r7, #24]
 80030aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
 80030b0:	4b58      	ldr	r3, [pc, #352]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	4a57      	ldr	r2, [pc, #348]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80030b6:	f043 0302 	orr.w	r3, r3, #2
 80030ba:	6313      	str	r3, [r2, #48]	; 0x30
 80030bc:	4b55      	ldr	r3, [pc, #340]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	f003 0302 	and.w	r3, r3, #2
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 80030c8:	23c0      	movs	r3, #192	; 0xc0
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030cc:	2302      	movs	r3, #2
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80030d8:	2307      	movs	r3, #7
 80030da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030dc:	f107 031c 	add.w	r3, r7, #28
 80030e0:	4619      	mov	r1, r3
 80030e2:	484d      	ldr	r0, [pc, #308]	; (8003218 <HAL_UART_MspInit+0x1ac>)
 80030e4:	f000 ffd8 	bl	8004098 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80030e8:	4b4c      	ldr	r3, [pc, #304]	; (800321c <HAL_UART_MspInit+0x1b0>)
 80030ea:	4a4d      	ldr	r2, [pc, #308]	; (8003220 <HAL_UART_MspInit+0x1b4>)
 80030ec:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80030ee:	4b4b      	ldr	r3, [pc, #300]	; (800321c <HAL_UART_MspInit+0x1b0>)
 80030f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80030f4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_UART_MspInit+0x1b0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fc:	4b47      	ldr	r3, [pc, #284]	; (800321c <HAL_UART_MspInit+0x1b0>)
 80030fe:	2200      	movs	r2, #0
 8003100:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003102:	4b46      	ldr	r3, [pc, #280]	; (800321c <HAL_UART_MspInit+0x1b0>)
 8003104:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003108:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310a:	4b44      	ldr	r3, [pc, #272]	; (800321c <HAL_UART_MspInit+0x1b0>)
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003110:	4b42      	ldr	r3, [pc, #264]	; (800321c <HAL_UART_MspInit+0x1b0>)
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003116:	4b41      	ldr	r3, [pc, #260]	; (800321c <HAL_UART_MspInit+0x1b0>)
 8003118:	2200      	movs	r2, #0
 800311a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800311c:	4b3f      	ldr	r3, [pc, #252]	; (800321c <HAL_UART_MspInit+0x1b0>)
 800311e:	2200      	movs	r2, #0
 8003120:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003122:	4b3e      	ldr	r3, [pc, #248]	; (800321c <HAL_UART_MspInit+0x1b0>)
 8003124:	2200      	movs	r2, #0
 8003126:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003128:	483c      	ldr	r0, [pc, #240]	; (800321c <HAL_UART_MspInit+0x1b0>)
 800312a:	f000 fc45 	bl	80039b8 <HAL_DMA_Init>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003134:	f7ff f86c 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a38      	ldr	r2, [pc, #224]	; (800321c <HAL_UART_MspInit+0x1b0>)
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
 800313e:	4a37      	ldr	r2, [pc, #220]	; (800321c <HAL_UART_MspInit+0x1b0>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003144:	4b37      	ldr	r3, [pc, #220]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003146:	4a38      	ldr	r2, [pc, #224]	; (8003228 <HAL_UART_MspInit+0x1bc>)
 8003148:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800314a:	4b36      	ldr	r3, [pc, #216]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 800314c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003150:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003152:	4b34      	ldr	r3, [pc, #208]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003154:	2240      	movs	r2, #64	; 0x40
 8003156:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 800315a:	2200      	movs	r2, #0
 800315c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800315e:	4b31      	ldr	r3, [pc, #196]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003164:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003166:	4b2f      	ldr	r3, [pc, #188]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003168:	2200      	movs	r2, #0
 800316a:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800316c:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 800316e:	2200      	movs	r2, #0
 8003170:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003172:	4b2c      	ldr	r3, [pc, #176]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003174:	2200      	movs	r2, #0
 8003176:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003178:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 800317a:	2200      	movs	r2, #0
 800317c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800317e:	4b29      	ldr	r3, [pc, #164]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003180:	2200      	movs	r2, #0
 8003182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003184:	4827      	ldr	r0, [pc, #156]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003186:	f000 fc17 	bl	80039b8 <HAL_DMA_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003190:	f7ff f83e 	bl	8002210 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a23      	ldr	r2, [pc, #140]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	4a22      	ldr	r2, [pc, #136]	; (8003224 <HAL_UART_MspInit+0x1b8>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80031a0:	e031      	b.n	8003206 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART3)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a21      	ldr	r2, [pc, #132]	; (800322c <HAL_UART_MspInit+0x1c0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d12c      	bne.n	8003206 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
 80031b0:	4b18      	ldr	r3, [pc, #96]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	4a17      	ldr	r2, [pc, #92]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ba:	6413      	str	r3, [r2, #64]	; 0x40
 80031bc:	4b15      	ldr	r3, [pc, #84]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	4b11      	ldr	r3, [pc, #68]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d0:	4a10      	ldr	r2, [pc, #64]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031d2:	f043 0304 	orr.w	r3, r3, #4
 80031d6:	6313      	str	r3, [r2, #48]	; 0x30
 80031d8:	4b0e      	ldr	r3, [pc, #56]	; (8003214 <HAL_UART_MspInit+0x1a8>)
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	60fb      	str	r3, [r7, #12]
 80031e2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 80031e4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80031f6:	2307      	movs	r3, #7
 80031f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031fa:	f107 031c 	add.w	r3, r7, #28
 80031fe:	4619      	mov	r1, r3
 8003200:	480b      	ldr	r0, [pc, #44]	; (8003230 <HAL_UART_MspInit+0x1c4>)
 8003202:	f000 ff49 	bl	8004098 <HAL_GPIO_Init>
}
 8003206:	bf00      	nop
 8003208:	3730      	adds	r7, #48	; 0x30
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40011000 	.word	0x40011000
 8003214:	40023800 	.word	0x40023800
 8003218:	40020400 	.word	0x40020400
 800321c:	20000da4 	.word	0x20000da4
 8003220:	40026440 	.word	0x40026440
 8003224:	20000e04 	.word	0x20000e04
 8003228:	400264b8 	.word	0x400264b8
 800322c:	40004800 	.word	0x40004800
 8003230:	40020800 	.word	0x40020800

08003234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800326c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003238:	480d      	ldr	r0, [pc, #52]	; (8003270 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800323a:	490e      	ldr	r1, [pc, #56]	; (8003274 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800323c:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800323e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003240:	e002      	b.n	8003248 <LoopCopyDataInit>

08003242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003246:	3304      	adds	r3, #4

08003248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800324a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800324c:	d3f9      	bcc.n	8003242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800324e:	4a0b      	ldr	r2, [pc, #44]	; (800327c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003250:	4c0b      	ldr	r4, [pc, #44]	; (8003280 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003254:	e001      	b.n	800325a <LoopFillZerobss>

08003256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003258:	3204      	adds	r2, #4

0800325a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800325a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800325c:	d3fb      	bcc.n	8003256 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800325e:	f000 f813 	bl	8003288 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003262:	f006 fb0d 	bl	8009880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003266:	f7fe fa59 	bl	800171c <main>
  bx  lr    
 800326a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800326c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003274:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8003278:	08009b98 	.word	0x08009b98
  ldr r2, =_sbss
 800327c:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8003280:	20005880 	.word	0x20005880

08003284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003284:	e7fe      	b.n	8003284 <ADC_IRQHandler>
	...

08003288 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800328c:	4b06      	ldr	r3, [pc, #24]	; (80032a8 <SystemInit+0x20>)
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	4a05      	ldr	r2, [pc, #20]	; (80032a8 <SystemInit+0x20>)
 8003294:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003298:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_Init+0x40>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <HAL_Init+0x40>)
 80032c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_Init+0x40>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f000 fb3a 	bl	800394e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032da:	200f      	movs	r0, #15
 80032dc:	f7fe ffca 	bl	8002274 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e0:	f7fe ff9c 	bl	800221c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00

080032f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80032f4:	4b06      	ldr	r3, [pc, #24]	; (8003310 <HAL_IncTick+0x20>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b06      	ldr	r3, [pc, #24]	; (8003314 <HAL_IncTick+0x24>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4413      	add	r3, r2
 8003300:	4a04      	ldr	r2, [pc, #16]	; (8003314 <HAL_IncTick+0x24>)
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	20000208 	.word	0x20000208
 8003314:	20000e64 	.word	0x20000e64

08003318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  return uwTick;
 800331c:	4b03      	ldr	r3, [pc, #12]	; (800332c <HAL_GetTick+0x14>)
 800331e:	681b      	ldr	r3, [r3, #0]
}
 8003320:	4618      	mov	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	20000e64 	.word	0x20000e64

08003330 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003338:	2300      	movs	r3, #0
 800333a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e033      	b.n	80033ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d109      	bne.n	8003362 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7fd fdae 	bl	8000eb0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d118      	bne.n	80033a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003376:	f023 0302 	bic.w	r3, r3, #2
 800337a:	f043 0202 	orr.w	r2, r3, #2
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f93a 	bl	80035fc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	f023 0303 	bic.w	r3, r3, #3
 8003396:	f043 0201 	orr.w	r2, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	641a      	str	r2, [r3, #64]	; 0x40
 800339e:	e001      	b.n	80033a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80033ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
	...

080033b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x1c>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e105      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x228>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b09      	cmp	r3, #9
 80033e2:	d925      	bls.n	8003430 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68d9      	ldr	r1, [r3, #12]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	461a      	mov	r2, r3
 80033f2:	4613      	mov	r3, r2
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	4413      	add	r3, r2
 80033f8:	3b1e      	subs	r3, #30
 80033fa:	2207      	movs	r2, #7
 80033fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003400:	43da      	mvns	r2, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	400a      	ands	r2, r1
 8003408:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68d9      	ldr	r1, [r3, #12]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	689a      	ldr	r2, [r3, #8]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	4618      	mov	r0, r3
 800341c:	4603      	mov	r3, r0
 800341e:	005b      	lsls	r3, r3, #1
 8003420:	4403      	add	r3, r0
 8003422:	3b1e      	subs	r3, #30
 8003424:	409a      	lsls	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	430a      	orrs	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
 800342e:	e022      	b.n	8003476 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6919      	ldr	r1, [r3, #16]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	b29b      	uxth	r3, r3
 800343c:	461a      	mov	r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	2207      	movs	r2, #7
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43da      	mvns	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	400a      	ands	r2, r1
 8003452:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6919      	ldr	r1, [r3, #16]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	b29b      	uxth	r3, r3
 8003464:	4618      	mov	r0, r3
 8003466:	4603      	mov	r3, r0
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	4403      	add	r3, r0
 800346c:	409a      	lsls	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	2b06      	cmp	r3, #6
 800347c:	d824      	bhi.n	80034c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b05      	subs	r3, #5
 8003490:	221f      	movs	r2, #31
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43da      	mvns	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	400a      	ands	r2, r1
 800349e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4618      	mov	r0, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	fa00 f203 	lsl.w	r2, r0, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	430a      	orrs	r2, r1
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34
 80034c6:	e04c      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b0c      	cmp	r3, #12
 80034ce:	d824      	bhi.n	800351a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685a      	ldr	r2, [r3, #4]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	3b23      	subs	r3, #35	; 0x23
 80034e2:	221f      	movs	r2, #31
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	43da      	mvns	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	400a      	ands	r2, r1
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	4618      	mov	r0, r3
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	3b23      	subs	r3, #35	; 0x23
 800350c:	fa00 f203 	lsl.w	r2, r0, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	430a      	orrs	r2, r1
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
 8003518:	e023      	b.n	8003562 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685a      	ldr	r2, [r3, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	3b41      	subs	r3, #65	; 0x41
 800352c:	221f      	movs	r2, #31
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43da      	mvns	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	400a      	ands	r2, r1
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	b29b      	uxth	r3, r3
 8003548:	4618      	mov	r0, r3
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	685a      	ldr	r2, [r3, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	4413      	add	r3, r2
 8003554:	3b41      	subs	r3, #65	; 0x41
 8003556:	fa00 f203 	lsl.w	r2, r0, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003562:	4b22      	ldr	r3, [pc, #136]	; (80035ec <HAL_ADC_ConfigChannel+0x234>)
 8003564:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a21      	ldr	r2, [pc, #132]	; (80035f0 <HAL_ADC_ConfigChannel+0x238>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d109      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1cc>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b12      	cmp	r3, #18
 8003576:	d105      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <HAL_ADC_ConfigChannel+0x238>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d123      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2b10      	cmp	r3, #16
 8003594:	d003      	beq.n	800359e <HAL_ADC_ConfigChannel+0x1e6>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b11      	cmp	r3, #17
 800359c:	d11b      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b10      	cmp	r3, #16
 80035b0:	d111      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <HAL_ADC_ConfigChannel+0x23c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a10      	ldr	r2, [pc, #64]	; (80035f8 <HAL_ADC_ConfigChannel+0x240>)
 80035b8:	fba2 2303 	umull	r2, r3, r2, r3
 80035bc:	0c9a      	lsrs	r2, r3, #18
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035c8:	e002      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f9      	bne.n	80035ca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3714      	adds	r7, #20
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	40012300 	.word	0x40012300
 80035f0:	40012000 	.word	0x40012000
 80035f4:	20000200 	.word	0x20000200
 80035f8:	431bde83 	.word	0x431bde83

080035fc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003604:	4b79      	ldr	r3, [pc, #484]	; (80037ec <ADC_Init+0x1f0>)
 8003606:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	431a      	orrs	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003630:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6859      	ldr	r1, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	021a      	lsls	r2, r3, #8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	430a      	orrs	r2, r1
 8003644:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685a      	ldr	r2, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003654:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6859      	ldr	r1, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	430a      	orrs	r2, r1
 8003666:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	689a      	ldr	r2, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003676:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6899      	ldr	r1, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	4a58      	ldr	r2, [pc, #352]	; (80037f0 <ADC_Init+0x1f4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d022      	beq.n	80036da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689a      	ldr	r2, [r3, #8]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6899      	ldr	r1, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	6899      	ldr	r1, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	609a      	str	r2, [r3, #8]
 80036d8:	e00f      	b.n	80036fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80036f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 0202 	bic.w	r2, r2, #2
 8003708:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7e1b      	ldrb	r3, [r3, #24]
 8003714:	005a      	lsls	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	430a      	orrs	r2, r1
 800371c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003746:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003752:	3b01      	subs	r3, #1
 8003754:	035a      	lsls	r2, r3, #13
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	e007      	b.n	8003770 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	685a      	ldr	r2, [r3, #4]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800376e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800377e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69db      	ldr	r3, [r3, #28]
 800378a:	3b01      	subs	r3, #1
 800378c:	051a      	lsls	r2, r3, #20
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80037a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6899      	ldr	r1, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80037b2:	025a      	lsls	r2, r3, #9
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6899      	ldr	r1, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	029a      	lsls	r2, r3, #10
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]
}
 80037e0:	bf00      	nop
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr
 80037ec:	40012300 	.word	0x40012300
 80037f0:	0f000001 	.word	0x0f000001

080037f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003810:	4013      	ands	r3, r2
 8003812:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800381c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x44>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00

0800383c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__NVIC_GetPriorityGrouping+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	0a1b      	lsrs	r3, r3, #8
 8003846:	f003 0307 	and.w	r3, r3, #7
}
 800384a:	4618      	mov	r0, r3
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr
 8003854:	e000ed00 	.word	0xe000ed00

08003858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	4603      	mov	r3, r0
 8003860:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003862:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003866:	2b00      	cmp	r3, #0
 8003868:	db0b      	blt.n	8003882 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386a:	79fb      	ldrb	r3, [r7, #7]
 800386c:	f003 021f 	and.w	r2, r3, #31
 8003870:	4907      	ldr	r1, [pc, #28]	; (8003890 <__NVIC_EnableIRQ+0x38>)
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	2001      	movs	r0, #1
 800387a:	fa00 f202 	lsl.w	r2, r0, r2
 800387e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003882:	bf00      	nop
 8003884:	370c      	adds	r7, #12
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	e000e100 	.word	0xe000e100

08003894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	db0a      	blt.n	80038be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	490c      	ldr	r1, [pc, #48]	; (80038e0 <__NVIC_SetPriority+0x4c>)
 80038ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b2:	0112      	lsls	r2, r2, #4
 80038b4:	b2d2      	uxtb	r2, r2
 80038b6:	440b      	add	r3, r1
 80038b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038bc:	e00a      	b.n	80038d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	4908      	ldr	r1, [pc, #32]	; (80038e4 <__NVIC_SetPriority+0x50>)
 80038c4:	79fb      	ldrb	r3, [r7, #7]
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	3b04      	subs	r3, #4
 80038cc:	0112      	lsls	r2, r2, #4
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	440b      	add	r3, r1
 80038d2:	761a      	strb	r2, [r3, #24]
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000e100 	.word	0xe000e100
 80038e4:	e000ed00 	.word	0xe000ed00

080038e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b089      	sub	sp, #36	; 0x24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f003 0307 	and.w	r3, r3, #7
 80038fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f1c3 0307 	rsb	r3, r3, #7
 8003902:	2b04      	cmp	r3, #4
 8003904:	bf28      	it	cs
 8003906:	2304      	movcs	r3, #4
 8003908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3304      	adds	r3, #4
 800390e:	2b06      	cmp	r3, #6
 8003910:	d902      	bls.n	8003918 <NVIC_EncodePriority+0x30>
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3b03      	subs	r3, #3
 8003916:	e000      	b.n	800391a <NVIC_EncodePriority+0x32>
 8003918:	2300      	movs	r3, #0
 800391a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	f04f 32ff 	mov.w	r2, #4294967295
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	fa02 f303 	lsl.w	r3, r2, r3
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	401a      	ands	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003930:	f04f 31ff 	mov.w	r1, #4294967295
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	43d9      	mvns	r1, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003940:	4313      	orrs	r3, r2
         );
}
 8003942:	4618      	mov	r0, r3
 8003944:	3724      	adds	r7, #36	; 0x24
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b082      	sub	sp, #8
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff ff4c 	bl	80037f4 <__NVIC_SetPriorityGrouping>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	4603      	mov	r3, r0
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003972:	2300      	movs	r3, #0
 8003974:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003976:	f7ff ff61 	bl	800383c <__NVIC_GetPriorityGrouping>
 800397a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	68b9      	ldr	r1, [r7, #8]
 8003980:	6978      	ldr	r0, [r7, #20]
 8003982:	f7ff ffb1 	bl	80038e8 <NVIC_EncodePriority>
 8003986:	4602      	mov	r2, r0
 8003988:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f7ff ff80 	bl	8003894 <__NVIC_SetPriority>
}
 8003994:	bf00      	nop
 8003996:	3718      	adds	r7, #24
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	4603      	mov	r3, r0
 80039a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff ff54 	bl	8003858 <__NVIC_EnableIRQ>
}
 80039b0:	bf00      	nop
 80039b2:	3708      	adds	r7, #8
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80039c4:	f7ff fca8 	bl	8003318 <HAL_GetTick>
 80039c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d101      	bne.n	80039d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e099      	b.n	8003b08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0201 	bic.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039f4:	e00f      	b.n	8003a16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039f6:	f7ff fc8f 	bl	8003318 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b05      	cmp	r3, #5
 8003a02:	d908      	bls.n	8003a16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2220      	movs	r2, #32
 8003a08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e078      	b.n	8003b08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e8      	bne.n	80039f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003a2c:	697a      	ldr	r2, [r7, #20]
 8003a2e:	4b38      	ldr	r3, [pc, #224]	; (8003b10 <HAL_DMA_Init+0x158>)
 8003a30:	4013      	ands	r3, r2
 8003a32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685a      	ldr	r2, [r3, #4]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6c:	2b04      	cmp	r3, #4
 8003a6e:	d107      	bne.n	8003a80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	697a      	ldr	r2, [r7, #20]
 8003a86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 0307 	bic.w	r3, r3, #7
 8003a96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d117      	bne.n	8003ada <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00e      	beq.n	8003ada <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 fa6f 	bl	8003fa0 <DMA_CheckFifoParam>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d008      	beq.n	8003ada <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2240      	movs	r2, #64	; 0x40
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e016      	b.n	8003b08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa26 	bl	8003f34 <DMA_CalcBaseAndBitshift>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	223f      	movs	r2, #63	; 0x3f
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3718      	adds	r7, #24
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	f010803f 	.word	0xf010803f

08003b14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d101      	bne.n	8003b3a <HAL_DMA_Start_IT+0x26>
 8003b36:	2302      	movs	r3, #2
 8003b38:	e040      	b.n	8003bbc <HAL_DMA_Start_IT+0xa8>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b48:	b2db      	uxtb	r3, r3
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d12f      	bne.n	8003bae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2202      	movs	r2, #2
 8003b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	68b9      	ldr	r1, [r7, #8]
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f000 f9b8 	bl	8003ed8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6c:	223f      	movs	r2, #63	; 0x3f
 8003b6e:	409a      	lsls	r2, r3
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f042 0216 	orr.w	r2, r2, #22
 8003b82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0208 	orr.w	r2, r2, #8
 8003b9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
 8003bac:	e005      	b.n	8003bba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003bb6:	2302      	movs	r3, #2
 8003bb8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3718      	adds	r7, #24
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bd0:	4b8e      	ldr	r3, [pc, #568]	; (8003e0c <HAL_DMA_IRQHandler+0x248>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a8e      	ldr	r2, [pc, #568]	; (8003e10 <HAL_DMA_IRQHandler+0x24c>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	0a9b      	lsrs	r3, r3, #10
 8003bdc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	2208      	movs	r2, #8
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d01a      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d013      	beq.n	8003c30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0204 	bic.w	r2, r2, #4
 8003c16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	409a      	lsls	r2, r3
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	f043 0201 	orr.w	r2, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	2201      	movs	r2, #1
 8003c36:	409a      	lsls	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d012      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00b      	beq.n	8003c66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c52:	2201      	movs	r2, #1
 8003c54:	409a      	lsls	r2, r3
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c5e:	f043 0202 	orr.w	r2, r3, #2
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6a:	2204      	movs	r2, #4
 8003c6c:	409a      	lsls	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4013      	ands	r3, r2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d012      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00b      	beq.n	8003c9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	2204      	movs	r2, #4
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c94:	f043 0204 	orr.w	r2, r3, #4
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca0:	2210      	movs	r2, #16
 8003ca2:	409a      	lsls	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d043      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d03c      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	409a      	lsls	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d018      	beq.n	8003d06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d024      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e01f      	b.n	8003d34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	4798      	blx	r3
 8003d04:	e016      	b.n	8003d34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0208 	bic.w	r2, r2, #8
 8003d22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d38:	2220      	movs	r2, #32
 8003d3a:	409a      	lsls	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	f000 808f 	beq.w	8003e64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 8087 	beq.w	8003e64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	409a      	lsls	r2, r3
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b05      	cmp	r3, #5
 8003d6c:	d136      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 0216 	bic.w	r2, r2, #22
 8003d7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695a      	ldr	r2, [r3, #20]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d103      	bne.n	8003d9e <HAL_DMA_IRQHandler+0x1da>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0208 	bic.w	r2, r2, #8
 8003dac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db2:	223f      	movs	r2, #63	; 0x3f
 8003db4:	409a      	lsls	r2, r3
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d07e      	beq.n	8003ed0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4798      	blx	r3
        }
        return;
 8003dda:	e079      	b.n	8003ed0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01d      	beq.n	8003e26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d031      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	4798      	blx	r3
 8003e08:	e02c      	b.n	8003e64 <HAL_DMA_IRQHandler+0x2a0>
 8003e0a:	bf00      	nop
 8003e0c:	20000200 	.word	0x20000200
 8003e10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d023      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	4798      	blx	r3
 8003e24:	e01e      	b.n	8003e64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10f      	bne.n	8003e54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f022 0210 	bic.w	r2, r2, #16
 8003e42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d032      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d022      	beq.n	8003ebe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2205      	movs	r2, #5
 8003e7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	3301      	adds	r3, #1
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d307      	bcc.n	8003eac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f003 0301 	and.w	r3, r3, #1
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f2      	bne.n	8003e90 <HAL_DMA_IRQHandler+0x2cc>
 8003eaa:	e000      	b.n	8003eae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003eac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d005      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	4798      	blx	r3
 8003ece:	e000      	b.n	8003ed2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ed0:	bf00      	nop
    }
  }
}
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
 8003ee4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ef4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	2b40      	cmp	r3, #64	; 0x40
 8003f04:	d108      	bne.n	8003f18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003f16:	e007      	b.n	8003f28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68ba      	ldr	r2, [r7, #8]
 8003f1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
}
 8003f28:	bf00      	nop
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	3b10      	subs	r3, #16
 8003f44:	4a14      	ldr	r2, [pc, #80]	; (8003f98 <DMA_CalcBaseAndBitshift+0x64>)
 8003f46:	fba2 2303 	umull	r2, r3, r2, r3
 8003f4a:	091b      	lsrs	r3, r3, #4
 8003f4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003f4e:	4a13      	ldr	r2, [pc, #76]	; (8003f9c <DMA_CalcBaseAndBitshift+0x68>)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	461a      	mov	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d909      	bls.n	8003f76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f6a:	f023 0303 	bic.w	r3, r3, #3
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58
 8003f74:	e007      	b.n	8003f86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3714      	adds	r7, #20
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	aaaaaaab 	.word	0xaaaaaaab
 8003f9c:	08009b20 	.word	0x08009b20

08003fa0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d11f      	bne.n	8003ffa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d856      	bhi.n	800406e <DMA_CheckFifoParam+0xce>
 8003fc0:	a201      	add	r2, pc, #4	; (adr r2, 8003fc8 <DMA_CheckFifoParam+0x28>)
 8003fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc6:	bf00      	nop
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003feb 	.word	0x08003feb
 8003fd0:	08003fd9 	.word	0x08003fd9
 8003fd4:	0800406f 	.word	0x0800406f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d046      	beq.n	8004072 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fe8:	e043      	b.n	8004072 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003ff2:	d140      	bne.n	8004076 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ff8:	e03d      	b.n	8004076 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004002:	d121      	bne.n	8004048 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b03      	cmp	r3, #3
 8004008:	d837      	bhi.n	800407a <DMA_CheckFifoParam+0xda>
 800400a:	a201      	add	r2, pc, #4	; (adr r2, 8004010 <DMA_CheckFifoParam+0x70>)
 800400c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004010:	08004021 	.word	0x08004021
 8004014:	08004027 	.word	0x08004027
 8004018:	08004021 	.word	0x08004021
 800401c:	08004039 	.word	0x08004039
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	73fb      	strb	r3, [r7, #15]
      break;
 8004024:	e030      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d025      	beq.n	800407e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004036:	e022      	b.n	800407e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004040:	d11f      	bne.n	8004082 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004046:	e01c      	b.n	8004082 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2b02      	cmp	r3, #2
 800404c:	d903      	bls.n	8004056 <DMA_CheckFifoParam+0xb6>
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b03      	cmp	r3, #3
 8004052:	d003      	beq.n	800405c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004054:	e018      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	73fb      	strb	r3, [r7, #15]
      break;
 800405a:	e015      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	73fb      	strb	r3, [r7, #15]
      break;
 800406c:	e00b      	b.n	8004086 <DMA_CheckFifoParam+0xe6>
      break;
 800406e:	bf00      	nop
 8004070:	e00a      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;
 8004072:	bf00      	nop
 8004074:	e008      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;
 8004076:	bf00      	nop
 8004078:	e006      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;
 800407a:	bf00      	nop
 800407c:	e004      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;
 800407e:	bf00      	nop
 8004080:	e002      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;   
 8004082:	bf00      	nop
 8004084:	e000      	b.n	8004088 <DMA_CheckFifoParam+0xe8>
      break;
 8004086:	bf00      	nop
    }
  } 
  
  return status; 
 8004088:	7bfb      	ldrb	r3, [r7, #15]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop

08004098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004098:	b480      	push	{r7}
 800409a:	b089      	sub	sp, #36	; 0x24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040aa:	2300      	movs	r3, #0
 80040ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ae:	2300      	movs	r3, #0
 80040b0:	61fb      	str	r3, [r7, #28]
 80040b2:	e16b      	b.n	800438c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040b4:	2201      	movs	r2, #1
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	f040 815a 	bne.w	8004386 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d005      	beq.n	80040ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d130      	bne.n	800414c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	2203      	movs	r2, #3
 80040f6:	fa02 f303 	lsl.w	r3, r2, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	4313      	orrs	r3, r2
 8004112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004120:	2201      	movs	r2, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	fa02 f303 	lsl.w	r3, r2, r3
 8004128:	43db      	mvns	r3, r3
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	4013      	ands	r3, r2
 800412e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 0201 	and.w	r2, r3, #1
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	fa02 f303 	lsl.w	r3, r2, r3
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	4313      	orrs	r3, r2
 8004144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	69ba      	ldr	r2, [r7, #24]
 800414a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2b03      	cmp	r3, #3
 8004156:	d017      	beq.n	8004188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689a      	ldr	r2, [r3, #8]
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	fa02 f303 	lsl.w	r3, r2, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f003 0303 	and.w	r3, r3, #3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d123      	bne.n	80041dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	08da      	lsrs	r2, r3, #3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3208      	adds	r2, #8
 800419c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	009b      	lsls	r3, r3, #2
 80041aa:	220f      	movs	r2, #15
 80041ac:	fa02 f303 	lsl.w	r3, r2, r3
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f003 0307 	and.w	r3, r3, #7
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	08da      	lsrs	r2, r3, #3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3208      	adds	r2, #8
 80041d6:	69b9      	ldr	r1, [r7, #24]
 80041d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	2203      	movs	r2, #3
 80041e8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	4013      	ands	r3, r2
 80041f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	f003 0203 	and.w	r2, r3, #3
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	fa02 f303 	lsl.w	r3, r2, r3
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	4313      	orrs	r3, r2
 8004208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80b4 	beq.w	8004386 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
 8004222:	4b60      	ldr	r3, [pc, #384]	; (80043a4 <HAL_GPIO_Init+0x30c>)
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	4a5f      	ldr	r2, [pc, #380]	; (80043a4 <HAL_GPIO_Init+0x30c>)
 8004228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800422c:	6453      	str	r3, [r2, #68]	; 0x44
 800422e:	4b5d      	ldr	r3, [pc, #372]	; (80043a4 <HAL_GPIO_Init+0x30c>)
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800423a:	4a5b      	ldr	r2, [pc, #364]	; (80043a8 <HAL_GPIO_Init+0x310>)
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	089b      	lsrs	r3, r3, #2
 8004240:	3302      	adds	r3, #2
 8004242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f003 0303 	and.w	r3, r3, #3
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	220f      	movs	r2, #15
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43db      	mvns	r3, r3
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4013      	ands	r3, r2
 800425c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a52      	ldr	r2, [pc, #328]	; (80043ac <HAL_GPIO_Init+0x314>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d02b      	beq.n	80042be <HAL_GPIO_Init+0x226>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a51      	ldr	r2, [pc, #324]	; (80043b0 <HAL_GPIO_Init+0x318>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d025      	beq.n	80042ba <HAL_GPIO_Init+0x222>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a50      	ldr	r2, [pc, #320]	; (80043b4 <HAL_GPIO_Init+0x31c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d01f      	beq.n	80042b6 <HAL_GPIO_Init+0x21e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a4f      	ldr	r2, [pc, #316]	; (80043b8 <HAL_GPIO_Init+0x320>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d019      	beq.n	80042b2 <HAL_GPIO_Init+0x21a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a4e      	ldr	r2, [pc, #312]	; (80043bc <HAL_GPIO_Init+0x324>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d013      	beq.n	80042ae <HAL_GPIO_Init+0x216>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a4d      	ldr	r2, [pc, #308]	; (80043c0 <HAL_GPIO_Init+0x328>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d00d      	beq.n	80042aa <HAL_GPIO_Init+0x212>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a4c      	ldr	r2, [pc, #304]	; (80043c4 <HAL_GPIO_Init+0x32c>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d007      	beq.n	80042a6 <HAL_GPIO_Init+0x20e>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a4b      	ldr	r2, [pc, #300]	; (80043c8 <HAL_GPIO_Init+0x330>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d101      	bne.n	80042a2 <HAL_GPIO_Init+0x20a>
 800429e:	2307      	movs	r3, #7
 80042a0:	e00e      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042a2:	2308      	movs	r3, #8
 80042a4:	e00c      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042a6:	2306      	movs	r3, #6
 80042a8:	e00a      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042aa:	2305      	movs	r3, #5
 80042ac:	e008      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042ae:	2304      	movs	r3, #4
 80042b0:	e006      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042b2:	2303      	movs	r3, #3
 80042b4:	e004      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042b6:	2302      	movs	r3, #2
 80042b8:	e002      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042ba:	2301      	movs	r3, #1
 80042bc:	e000      	b.n	80042c0 <HAL_GPIO_Init+0x228>
 80042be:	2300      	movs	r3, #0
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	f002 0203 	and.w	r2, r2, #3
 80042c6:	0092      	lsls	r2, r2, #2
 80042c8:	4093      	lsls	r3, r2
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042d0:	4935      	ldr	r1, [pc, #212]	; (80043a8 <HAL_GPIO_Init+0x310>)
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	089b      	lsrs	r3, r3, #2
 80042d6:	3302      	adds	r3, #2
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80042de:	4b3b      	ldr	r3, [pc, #236]	; (80043cc <HAL_GPIO_Init+0x334>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	43db      	mvns	r3, r3
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	4013      	ands	r3, r2
 80042ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	4313      	orrs	r3, r2
 8004300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004302:	4a32      	ldr	r2, [pc, #200]	; (80043cc <HAL_GPIO_Init+0x334>)
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004308:	4b30      	ldr	r3, [pc, #192]	; (80043cc <HAL_GPIO_Init+0x334>)
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	43db      	mvns	r3, r3
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	4013      	ands	r3, r2
 8004316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004320:	2b00      	cmp	r3, #0
 8004322:	d003      	beq.n	800432c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4313      	orrs	r3, r2
 800432a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800432c:	4a27      	ldr	r2, [pc, #156]	; (80043cc <HAL_GPIO_Init+0x334>)
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004332:	4b26      	ldr	r3, [pc, #152]	; (80043cc <HAL_GPIO_Init+0x334>)
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_GPIO_Init+0x334>)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_GPIO_Init+0x334>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	43db      	mvns	r3, r3
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	4013      	ands	r3, r2
 800436a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004378:	69ba      	ldr	r2, [r7, #24]
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	4313      	orrs	r3, r2
 800437e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004380:	4a12      	ldr	r2, [pc, #72]	; (80043cc <HAL_GPIO_Init+0x334>)
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	3301      	adds	r3, #1
 800438a:	61fb      	str	r3, [r7, #28]
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	2b0f      	cmp	r3, #15
 8004390:	f67f ae90 	bls.w	80040b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004394:	bf00      	nop
 8004396:	bf00      	nop
 8004398:	3724      	adds	r7, #36	; 0x24
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
 80043a2:	bf00      	nop
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40013800 	.word	0x40013800
 80043ac:	40020000 	.word	0x40020000
 80043b0:	40020400 	.word	0x40020400
 80043b4:	40020800 	.word	0x40020800
 80043b8:	40020c00 	.word	0x40020c00
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40021400 	.word	0x40021400
 80043c4:	40021800 	.word	0x40021800
 80043c8:	40021c00 	.word	0x40021c00
 80043cc:	40013c00 	.word	0x40013c00

080043d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	807b      	strh	r3, [r7, #2]
 80043dc:	4613      	mov	r3, r2
 80043de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043e0:	787b      	ldrb	r3, [r7, #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043e6:	887a      	ldrh	r2, [r7, #2]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043ec:	e003      	b.n	80043f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043ee:	887b      	ldrh	r3, [r7, #2]
 80043f0:	041a      	lsls	r2, r3, #16
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	619a      	str	r2, [r3, #24]
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
	...

08004404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	4603      	mov	r3, r0
 800440c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800440e:	4b08      	ldr	r3, [pc, #32]	; (8004430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004410:	695a      	ldr	r2, [r3, #20]
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d006      	beq.n	8004428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800441a:	4a05      	ldr	r2, [pc, #20]	; (8004430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800441c:	88fb      	ldrh	r3, [r7, #6]
 800441e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f806 	bl	8004434 <HAL_GPIO_EXTI_Callback>
  }
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	40013c00 	.word	0x40013c00

08004434 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr
	...

0800444c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e12b      	b.n	80046b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd f90a 	bl	800168c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2224      	movs	r2, #36	; 0x24
 800447c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800449e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b0:	f000 fd80 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80044b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	4a81      	ldr	r2, [pc, #516]	; (80046c0 <HAL_I2C_Init+0x274>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d807      	bhi.n	80044d0 <HAL_I2C_Init+0x84>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a80      	ldr	r2, [pc, #512]	; (80046c4 <HAL_I2C_Init+0x278>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	bf94      	ite	ls
 80044c8:	2301      	movls	r3, #1
 80044ca:	2300      	movhi	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	e006      	b.n	80044de <HAL_I2C_Init+0x92>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a7d      	ldr	r2, [pc, #500]	; (80046c8 <HAL_I2C_Init+0x27c>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	bf94      	ite	ls
 80044d8:	2301      	movls	r3, #1
 80044da:	2300      	movhi	r3, #0
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e0e7      	b.n	80046b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4a78      	ldr	r2, [pc, #480]	; (80046cc <HAL_I2C_Init+0x280>)
 80044ea:	fba2 2303 	umull	r2, r3, r2, r3
 80044ee:	0c9b      	lsrs	r3, r3, #18
 80044f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	4a6a      	ldr	r2, [pc, #424]	; (80046c0 <HAL_I2C_Init+0x274>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d802      	bhi.n	8004520 <HAL_I2C_Init+0xd4>
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3301      	adds	r3, #1
 800451e:	e009      	b.n	8004534 <HAL_I2C_Init+0xe8>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004526:	fb02 f303 	mul.w	r3, r2, r3
 800452a:	4a69      	ldr	r2, [pc, #420]	; (80046d0 <HAL_I2C_Init+0x284>)
 800452c:	fba2 2303 	umull	r2, r3, r2, r3
 8004530:	099b      	lsrs	r3, r3, #6
 8004532:	3301      	adds	r3, #1
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	430b      	orrs	r3, r1
 800453a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69db      	ldr	r3, [r3, #28]
 8004542:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004546:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	495c      	ldr	r1, [pc, #368]	; (80046c0 <HAL_I2C_Init+0x274>)
 8004550:	428b      	cmp	r3, r1
 8004552:	d819      	bhi.n	8004588 <HAL_I2C_Init+0x13c>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	1e59      	subs	r1, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004568:	400b      	ands	r3, r1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <HAL_I2C_Init+0x138>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1e59      	subs	r1, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	005b      	lsls	r3, r3, #1
 8004578:	fbb1 f3f3 	udiv	r3, r1, r3
 800457c:	3301      	adds	r3, #1
 800457e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004582:	e051      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004584:	2304      	movs	r3, #4
 8004586:	e04f      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d111      	bne.n	80045b4 <HAL_I2C_Init+0x168>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	1e58      	subs	r0, r3, #1
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6859      	ldr	r1, [r3, #4]
 8004598:	460b      	mov	r3, r1
 800459a:	005b      	lsls	r3, r3, #1
 800459c:	440b      	add	r3, r1
 800459e:	fbb0 f3f3 	udiv	r3, r0, r3
 80045a2:	3301      	adds	r3, #1
 80045a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e012      	b.n	80045da <HAL_I2C_Init+0x18e>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1e58      	subs	r0, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	460b      	mov	r3, r1
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	0099      	lsls	r1, r3, #2
 80045c4:	440b      	add	r3, r1
 80045c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045ca:	3301      	adds	r3, #1
 80045cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	bf0c      	ite	eq
 80045d4:	2301      	moveq	r3, #1
 80045d6:	2300      	movne	r3, #0
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_I2C_Init+0x196>
 80045de:	2301      	movs	r3, #1
 80045e0:	e022      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10e      	bne.n	8004608 <HAL_I2C_Init+0x1bc>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	1e58      	subs	r0, r3, #1
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6859      	ldr	r1, [r3, #4]
 80045f2:	460b      	mov	r3, r1
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	440b      	add	r3, r1
 80045f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80045fc:	3301      	adds	r3, #1
 80045fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	e00f      	b.n	8004628 <HAL_I2C_Init+0x1dc>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	1e58      	subs	r0, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6859      	ldr	r1, [r3, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	0099      	lsls	r1, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	fbb0 f3f3 	udiv	r3, r0, r3
 800461e:	3301      	adds	r3, #1
 8004620:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004624:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004628:	6879      	ldr	r1, [r7, #4]
 800462a:	6809      	ldr	r1, [r1, #0]
 800462c:	4313      	orrs	r3, r2
 800462e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	69da      	ldr	r2, [r3, #28]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	431a      	orrs	r2, r3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	430a      	orrs	r2, r1
 800464a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004656:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6911      	ldr	r1, [r2, #16]
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	68d2      	ldr	r2, [r2, #12]
 8004662:	4311      	orrs	r1, r2
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6812      	ldr	r2, [r2, #0]
 8004668:	430b      	orrs	r3, r1
 800466a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f042 0201 	orr.w	r2, r2, #1
 8004696:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2220      	movs	r2, #32
 80046a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	000186a0 	.word	0x000186a0
 80046c4:	001e847f 	.word	0x001e847f
 80046c8:	003d08ff 	.word	0x003d08ff
 80046cc:	431bde83 	.word	0x431bde83
 80046d0:	10624dd3 	.word	0x10624dd3

080046d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e267      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d075      	beq.n	80047de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046f2:	4b88      	ldr	r3, [pc, #544]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 030c 	and.w	r3, r3, #12
 80046fa:	2b04      	cmp	r3, #4
 80046fc:	d00c      	beq.n	8004718 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046fe:	4b85      	ldr	r3, [pc, #532]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004706:	2b08      	cmp	r3, #8
 8004708:	d112      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800470a:	4b82      	ldr	r3, [pc, #520]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004716:	d10b      	bne.n	8004730 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004718:	4b7e      	ldr	r3, [pc, #504]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d05b      	beq.n	80047dc <HAL_RCC_OscConfig+0x108>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d157      	bne.n	80047dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e242      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004738:	d106      	bne.n	8004748 <HAL_RCC_OscConfig+0x74>
 800473a:	4b76      	ldr	r3, [pc, #472]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a75      	ldr	r2, [pc, #468]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e01d      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004750:	d10c      	bne.n	800476c <HAL_RCC_OscConfig+0x98>
 8004752:	4b70      	ldr	r3, [pc, #448]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a6f      	ldr	r2, [pc, #444]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004758:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800475c:	6013      	str	r3, [r2, #0]
 800475e:	4b6d      	ldr	r3, [pc, #436]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a6c      	ldr	r2, [pc, #432]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	e00b      	b.n	8004784 <HAL_RCC_OscConfig+0xb0>
 800476c:	4b69      	ldr	r3, [pc, #420]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a68      	ldr	r2, [pc, #416]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004772:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	4b66      	ldr	r3, [pc, #408]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a65      	ldr	r2, [pc, #404]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 800477e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004782:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d013      	beq.n	80047b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478c:	f7fe fdc4 	bl	8003318 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004794:	f7fe fdc0 	bl	8003318 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b64      	cmp	r3, #100	; 0x64
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e207      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047a6:	4b5b      	ldr	r3, [pc, #364]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0xc0>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b4:	f7fe fdb0 	bl	8003318 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ba:	e008      	b.n	80047ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047bc:	f7fe fdac 	bl	8003318 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b64      	cmp	r3, #100	; 0x64
 80047c8:	d901      	bls.n	80047ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e1f3      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ce:	4b51      	ldr	r3, [pc, #324]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1f0      	bne.n	80047bc <HAL_RCC_OscConfig+0xe8>
 80047da:	e000      	b.n	80047de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d063      	beq.n	80048b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047ea:	4b4a      	ldr	r3, [pc, #296]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00b      	beq.n	800480e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047f6:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047fe:	2b08      	cmp	r3, #8
 8004800:	d11c      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004802:	4b44      	ldr	r3, [pc, #272]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480e:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0302 	and.w	r3, r3, #2
 8004816:	2b00      	cmp	r3, #0
 8004818:	d005      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d001      	beq.n	8004826 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e1c7      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004826:	4b3b      	ldr	r3, [pc, #236]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4937      	ldr	r1, [pc, #220]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004836:	4313      	orrs	r3, r2
 8004838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800483a:	e03a      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d020      	beq.n	8004886 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <HAL_RCC_OscConfig+0x244>)
 8004846:	2201      	movs	r2, #1
 8004848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800484a:	f7fe fd65 	bl	8003318 <HAL_GetTick>
 800484e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004850:	e008      	b.n	8004864 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004852:	f7fe fd61 	bl	8003318 <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	2b02      	cmp	r3, #2
 800485e:	d901      	bls.n	8004864 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e1a8      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004864:	4b2b      	ldr	r3, [pc, #172]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d0f0      	beq.n	8004852 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004870:	4b28      	ldr	r3, [pc, #160]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	691b      	ldr	r3, [r3, #16]
 800487c:	00db      	lsls	r3, r3, #3
 800487e:	4925      	ldr	r1, [pc, #148]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 8004880:	4313      	orrs	r3, r2
 8004882:	600b      	str	r3, [r1, #0]
 8004884:	e015      	b.n	80048b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_RCC_OscConfig+0x244>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800488c:	f7fe fd44 	bl	8003318 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004894:	f7fe fd40 	bl	8003318 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e187      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	4b1b      	ldr	r3, [pc, #108]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1f0      	bne.n	8004894 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d036      	beq.n	800492c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	695b      	ldr	r3, [r3, #20]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d016      	beq.n	80048f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048c6:	4b15      	ldr	r3, [pc, #84]	; (800491c <HAL_RCC_OscConfig+0x248>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048cc:	f7fe fd24 	bl	8003318 <HAL_GetTick>
 80048d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048d2:	e008      	b.n	80048e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048d4:	f7fe fd20 	bl	8003318 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e167      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_OscConfig+0x240>)
 80048e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0f0      	beq.n	80048d4 <HAL_RCC_OscConfig+0x200>
 80048f2:	e01b      	b.n	800492c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048f4:	4b09      	ldr	r3, [pc, #36]	; (800491c <HAL_RCC_OscConfig+0x248>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fa:	f7fe fd0d 	bl	8003318 <HAL_GetTick>
 80048fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004900:	e00e      	b.n	8004920 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004902:	f7fe fd09 	bl	8003318 <HAL_GetTick>
 8004906:	4602      	mov	r2, r0
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d907      	bls.n	8004920 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e150      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
 8004914:	40023800 	.word	0x40023800
 8004918:	42470000 	.word	0x42470000
 800491c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004920:	4b88      	ldr	r3, [pc, #544]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1ea      	bne.n	8004902 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8097 	beq.w	8004a68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493e:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d10f      	bne.n	800496a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	60bb      	str	r3, [r7, #8]
 800494e:	4b7d      	ldr	r3, [pc, #500]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a7c      	ldr	r2, [pc, #496]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b7a      	ldr	r3, [pc, #488]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004962:	60bb      	str	r3, [r7, #8]
 8004964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004966:	2301      	movs	r3, #1
 8004968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496a:	4b77      	ldr	r3, [pc, #476]	; (8004b48 <HAL_RCC_OscConfig+0x474>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d118      	bne.n	80049a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004976:	4b74      	ldr	r3, [pc, #464]	; (8004b48 <HAL_RCC_OscConfig+0x474>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a73      	ldr	r2, [pc, #460]	; (8004b48 <HAL_RCC_OscConfig+0x474>)
 800497c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004982:	f7fe fcc9 	bl	8003318 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498a:	f7fe fcc5 	bl	8003318 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e10c      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499c:	4b6a      	ldr	r3, [pc, #424]	; (8004b48 <HAL_RCC_OscConfig+0x474>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d106      	bne.n	80049be <HAL_RCC_OscConfig+0x2ea>
 80049b0:	4b64      	ldr	r3, [pc, #400]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b4:	4a63      	ldr	r2, [pc, #396]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f043 0301 	orr.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	; 0x70
 80049bc:	e01c      	b.n	80049f8 <HAL_RCC_OscConfig+0x324>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	2b05      	cmp	r3, #5
 80049c4:	d10c      	bne.n	80049e0 <HAL_RCC_OscConfig+0x30c>
 80049c6:	4b5f      	ldr	r3, [pc, #380]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ca:	4a5e      	ldr	r2, [pc, #376]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049cc:	f043 0304 	orr.w	r3, r3, #4
 80049d0:	6713      	str	r3, [r2, #112]	; 0x70
 80049d2:	4b5c      	ldr	r3, [pc, #368]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d6:	4a5b      	ldr	r2, [pc, #364]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6713      	str	r3, [r2, #112]	; 0x70
 80049de:	e00b      	b.n	80049f8 <HAL_RCC_OscConfig+0x324>
 80049e0:	4b58      	ldr	r3, [pc, #352]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049e4:	4a57      	ldr	r2, [pc, #348]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049e6:	f023 0301 	bic.w	r3, r3, #1
 80049ea:	6713      	str	r3, [r2, #112]	; 0x70
 80049ec:	4b55      	ldr	r3, [pc, #340]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049f0:	4a54      	ldr	r2, [pc, #336]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 80049f2:	f023 0304 	bic.w	r3, r3, #4
 80049f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d015      	beq.n	8004a2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a00:	f7fe fc8a 	bl	8003318 <HAL_GetTick>
 8004a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a06:	e00a      	b.n	8004a1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a08:	f7fe fc86 	bl	8003318 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e0cb      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1e:	4b49      	ldr	r3, [pc, #292]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0ee      	beq.n	8004a08 <HAL_RCC_OscConfig+0x334>
 8004a2a:	e014      	b.n	8004a56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2c:	f7fe fc74 	bl	8003318 <HAL_GetTick>
 8004a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a34:	f7fe fc70 	bl	8003318 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0b5      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ee      	bne.n	8004a34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a5c:	4b39      	ldr	r3, [pc, #228]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a60:	4a38      	ldr	r2, [pc, #224]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a1 	beq.w	8004bb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a72:	4b34      	ldr	r3, [pc, #208]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f003 030c 	and.w	r3, r3, #12
 8004a7a:	2b08      	cmp	r3, #8
 8004a7c:	d05c      	beq.n	8004b38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	2b02      	cmp	r3, #2
 8004a84:	d141      	bne.n	8004b0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a86:	4b31      	ldr	r3, [pc, #196]	; (8004b4c <HAL_RCC_OscConfig+0x478>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fe fc44 	bl	8003318 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a94:	f7fe fc40 	bl	8003318 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e087      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aa6:	4b27      	ldr	r3, [pc, #156]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	69da      	ldr	r2, [r3, #28]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	431a      	orrs	r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	019b      	lsls	r3, r3, #6
 8004ac2:	431a      	orrs	r2, r3
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	3b01      	subs	r3, #1
 8004acc:	041b      	lsls	r3, r3, #16
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad4:	061b      	lsls	r3, r3, #24
 8004ad6:	491b      	ldr	r1, [pc, #108]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004adc:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_RCC_OscConfig+0x478>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae2:	f7fe fc19 	bl	8003318 <HAL_GetTick>
 8004ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ae8:	e008      	b.n	8004afc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aea:	f7fe fc15 	bl	8003318 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	d901      	bls.n	8004afc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e05c      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afc:	4b11      	ldr	r3, [pc, #68]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d0f0      	beq.n	8004aea <HAL_RCC_OscConfig+0x416>
 8004b08:	e054      	b.n	8004bb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b0a:	4b10      	ldr	r3, [pc, #64]	; (8004b4c <HAL_RCC_OscConfig+0x478>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b10:	f7fe fc02 	bl	8003318 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b18:	f7fe fbfe 	bl	8003318 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e045      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b2a:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d1f0      	bne.n	8004b18 <HAL_RCC_OscConfig+0x444>
 8004b36:	e03d      	b.n	8004bb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d107      	bne.n	8004b50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e038      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b50:	4b1b      	ldr	r3, [pc, #108]	; (8004bc0 <HAL_RCC_OscConfig+0x4ec>)
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d121      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d11a      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b80:	4013      	ands	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d111      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	085b      	lsrs	r3, r3, #1
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d107      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3718      	adds	r7, #24
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40023800 	.word	0x40023800

08004bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0cc      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bd8:	4b68      	ldr	r3, [pc, #416]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0307 	and.w	r3, r3, #7
 8004be0:	683a      	ldr	r2, [r7, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d90c      	bls.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be6:	4b65      	ldr	r3, [pc, #404]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	b2d2      	uxtb	r2, r2
 8004bec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bee:	4b63      	ldr	r3, [pc, #396]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	683a      	ldr	r2, [r7, #0]
 8004bf8:	429a      	cmp	r2, r3
 8004bfa:	d001      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0b8      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d020      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c18:	4b59      	ldr	r3, [pc, #356]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	4a58      	ldr	r2, [pc, #352]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c30:	4b53      	ldr	r3, [pc, #332]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a52      	ldr	r2, [pc, #328]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c3c:	4b50      	ldr	r3, [pc, #320]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	494d      	ldr	r1, [pc, #308]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d044      	beq.n	8004ce4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d107      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d119      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e07f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d003      	beq.n	8004c82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d107      	bne.n	8004c92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c82:	4b3f      	ldr	r3, [pc, #252]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e06f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c92:	4b3b      	ldr	r3, [pc, #236]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e067      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ca2:	4b37      	ldr	r3, [pc, #220]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f023 0203 	bic.w	r2, r3, #3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	4934      	ldr	r1, [pc, #208]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cb4:	f7fe fb30 	bl	8003318 <HAL_GetTick>
 8004cb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cba:	e00a      	b.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cbc:	f7fe fb2c 	bl	8003318 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d901      	bls.n	8004cd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	e04f      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cd2:	4b2b      	ldr	r3, [pc, #172]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 020c 	and.w	r2, r3, #12
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	685b      	ldr	r3, [r3, #4]
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d1eb      	bne.n	8004cbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	683a      	ldr	r2, [r7, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d20c      	bcs.n	8004d0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf2:	4b22      	ldr	r3, [pc, #136]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0307 	and.w	r3, r3, #7
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d001      	beq.n	8004d0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e032      	b.n	8004d72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d18:	4b19      	ldr	r3, [pc, #100]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	4916      	ldr	r1, [pc, #88]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0308 	and.w	r3, r3, #8
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d36:	4b12      	ldr	r3, [pc, #72]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	490e      	ldr	r1, [pc, #56]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d4a:	f000 f821 	bl	8004d90 <HAL_RCC_GetSysClockFreq>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	490a      	ldr	r1, [pc, #40]	; (8004d84 <HAL_RCC_ClockConfig+0x1c0>)
 8004d5c:	5ccb      	ldrb	r3, [r1, r3]
 8004d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d62:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <HAL_RCC_ClockConfig+0x1c4>)
 8004d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d66:	4b09      	ldr	r3, [pc, #36]	; (8004d8c <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fd fa82 	bl	8002274 <HAL_InitTick>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	40023c00 	.word	0x40023c00
 8004d80:	40023800 	.word	0x40023800
 8004d84:	08009b08 	.word	0x08009b08
 8004d88:	20000200 	.word	0x20000200
 8004d8c:	20000204 	.word	0x20000204

08004d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d94:	b094      	sub	sp, #80	; 0x50
 8004d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004da0:	2300      	movs	r3, #0
 8004da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004da8:	4b79      	ldr	r3, [pc, #484]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	f003 030c 	and.w	r3, r3, #12
 8004db0:	2b08      	cmp	r3, #8
 8004db2:	d00d      	beq.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	f200 80e1 	bhi.w	8004f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8004dbe:	2b04      	cmp	r3, #4
 8004dc0:	d003      	beq.n	8004dca <HAL_RCC_GetSysClockFreq+0x3a>
 8004dc2:	e0db      	b.n	8004f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4b73      	ldr	r3, [pc, #460]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dc6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004dc8:	e0db      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dca:	4b73      	ldr	r3, [pc, #460]	; (8004f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8004dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004dce:	e0d8      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dd0:	4b6f      	ldr	r3, [pc, #444]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004dda:	4b6d      	ldr	r3, [pc, #436]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d063      	beq.n	8004eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004de6:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	099b      	lsrs	r3, r3, #6
 8004dec:	2200      	movs	r2, #0
 8004dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004df8:	633b      	str	r3, [r7, #48]	; 0x30
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004e02:	4622      	mov	r2, r4
 8004e04:	462b      	mov	r3, r5
 8004e06:	f04f 0000 	mov.w	r0, #0
 8004e0a:	f04f 0100 	mov.w	r1, #0
 8004e0e:	0159      	lsls	r1, r3, #5
 8004e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e14:	0150      	lsls	r0, r2, #5
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	1a51      	subs	r1, r2, r1
 8004e1e:	6139      	str	r1, [r7, #16]
 8004e20:	4629      	mov	r1, r5
 8004e22:	eb63 0301 	sbc.w	r3, r3, r1
 8004e26:	617b      	str	r3, [r7, #20]
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	f04f 0300 	mov.w	r3, #0
 8004e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e34:	4659      	mov	r1, fp
 8004e36:	018b      	lsls	r3, r1, #6
 8004e38:	4651      	mov	r1, sl
 8004e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e3e:	4651      	mov	r1, sl
 8004e40:	018a      	lsls	r2, r1, #6
 8004e42:	4651      	mov	r1, sl
 8004e44:	ebb2 0801 	subs.w	r8, r2, r1
 8004e48:	4659      	mov	r1, fp
 8004e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e4e:	f04f 0200 	mov.w	r2, #0
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e62:	4690      	mov	r8, r2
 8004e64:	4699      	mov	r9, r3
 8004e66:	4623      	mov	r3, r4
 8004e68:	eb18 0303 	adds.w	r3, r8, r3
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	462b      	mov	r3, r5
 8004e70:	eb49 0303 	adc.w	r3, r9, r3
 8004e74:	60fb      	str	r3, [r7, #12]
 8004e76:	f04f 0200 	mov.w	r2, #0
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e82:	4629      	mov	r1, r5
 8004e84:	024b      	lsls	r3, r1, #9
 8004e86:	4621      	mov	r1, r4
 8004e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e8c:	4621      	mov	r1, r4
 8004e8e:	024a      	lsls	r2, r1, #9
 8004e90:	4610      	mov	r0, r2
 8004e92:	4619      	mov	r1, r3
 8004e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e96:	2200      	movs	r2, #0
 8004e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004ea0:	f7fb fdb4 	bl	8000a0c <__aeabi_uldivmod>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004eac:	e058      	b.n	8004f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eae:	4b38      	ldr	r3, [pc, #224]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	4611      	mov	r1, r2
 8004eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ebe:	623b      	str	r3, [r7, #32]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ec8:	4642      	mov	r2, r8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	f04f 0000 	mov.w	r0, #0
 8004ed0:	f04f 0100 	mov.w	r1, #0
 8004ed4:	0159      	lsls	r1, r3, #5
 8004ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eda:	0150      	lsls	r0, r2, #5
 8004edc:	4602      	mov	r2, r0
 8004ede:	460b      	mov	r3, r1
 8004ee0:	4641      	mov	r1, r8
 8004ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ee6:	4649      	mov	r1, r9
 8004ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004eec:	f04f 0200 	mov.w	r2, #0
 8004ef0:	f04f 0300 	mov.w	r3, #0
 8004ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f00:	ebb2 040a 	subs.w	r4, r2, sl
 8004f04:	eb63 050b 	sbc.w	r5, r3, fp
 8004f08:	f04f 0200 	mov.w	r2, #0
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	00eb      	lsls	r3, r5, #3
 8004f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f16:	00e2      	lsls	r2, r4, #3
 8004f18:	4614      	mov	r4, r2
 8004f1a:	461d      	mov	r5, r3
 8004f1c:	4643      	mov	r3, r8
 8004f1e:	18e3      	adds	r3, r4, r3
 8004f20:	603b      	str	r3, [r7, #0]
 8004f22:	464b      	mov	r3, r9
 8004f24:	eb45 0303 	adc.w	r3, r5, r3
 8004f28:	607b      	str	r3, [r7, #4]
 8004f2a:	f04f 0200 	mov.w	r2, #0
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f36:	4629      	mov	r1, r5
 8004f38:	028b      	lsls	r3, r1, #10
 8004f3a:	4621      	mov	r1, r4
 8004f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f40:	4621      	mov	r1, r4
 8004f42:	028a      	lsls	r2, r1, #10
 8004f44:	4610      	mov	r0, r2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	61bb      	str	r3, [r7, #24]
 8004f4e:	61fa      	str	r2, [r7, #28]
 8004f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f54:	f7fb fd5a 	bl	8000a0c <__aeabi_uldivmod>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	0c1b      	lsrs	r3, r3, #16
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	3301      	adds	r3, #1
 8004f6c:	005b      	lsls	r3, r3, #1
 8004f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f7a:	e002      	b.n	8004f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f7c:	4b05      	ldr	r3, [pc, #20]	; (8004f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3750      	adds	r7, #80	; 0x50
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	00f42400 	.word	0x00f42400
 8004f98:	007a1200 	.word	0x007a1200

08004f9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fa0:	4b03      	ldr	r3, [pc, #12]	; (8004fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
 8004fae:	bf00      	nop
 8004fb0:	20000200 	.word	0x20000200

08004fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004fb8:	f7ff fff0 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	0a9b      	lsrs	r3, r3, #10
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	4903      	ldr	r1, [pc, #12]	; (8004fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fca:	5ccb      	ldrb	r3, [r1, r3]
 8004fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40023800 	.word	0x40023800
 8004fd8:	08009b18 	.word	0x08009b18

08004fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004fe0:	f7ff ffdc 	bl	8004f9c <HAL_RCC_GetHCLKFreq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4b05      	ldr	r3, [pc, #20]	; (8004ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	0b5b      	lsrs	r3, r3, #13
 8004fec:	f003 0307 	and.w	r3, r3, #7
 8004ff0:	4903      	ldr	r1, [pc, #12]	; (8005000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff2:	5ccb      	ldrb	r3, [r1, r3]
 8004ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40023800 	.word	0x40023800
 8005000:	08009b18 	.word	0x08009b18

08005004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	220f      	movs	r2, #15
 8005012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005014:	4b12      	ldr	r3, [pc, #72]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005020:	4b0f      	ldr	r3, [pc, #60]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800502c:	4b0c      	ldr	r3, [pc, #48]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005038:	4b09      	ldr	r3, [pc, #36]	; (8005060 <HAL_RCC_GetClockConfig+0x5c>)
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	08db      	lsrs	r3, r3, #3
 800503e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <HAL_RCC_GetClockConfig+0x60>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 0207 	and.w	r2, r3, #7
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	601a      	str	r2, [r3, #0]
}
 8005052:	bf00      	nop
 8005054:	370c      	adds	r7, #12
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	40023800 	.word	0x40023800
 8005064:	40023c00 	.word	0x40023c00

08005068 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e041      	b.n	80050fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005080:	b2db      	uxtb	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	d106      	bne.n	8005094 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fd fe44 	bl	8002d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2202      	movs	r2, #2
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	3304      	adds	r3, #4
 80050a4:	4619      	mov	r1, r3
 80050a6:	4610      	mov	r0, r2
 80050a8:	f000 fcdc 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
	...

08005108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	d001      	beq.n	8005120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e04e      	b.n	80051be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	68da      	ldr	r2, [r3, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0201 	orr.w	r2, r2, #1
 8005136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a23      	ldr	r2, [pc, #140]	; (80051cc <HAL_TIM_Base_Start_IT+0xc4>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d022      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d01d      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a1f      	ldr	r2, [pc, #124]	; (80051d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d018      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a1e      	ldr	r2, [pc, #120]	; (80051d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d013      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1c      	ldr	r2, [pc, #112]	; (80051d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d00e      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1b      	ldr	r2, [pc, #108]	; (80051dc <HAL_TIM_Base_Start_IT+0xd4>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d009      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a19      	ldr	r2, [pc, #100]	; (80051e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a18      	ldr	r2, [pc, #96]	; (80051e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d111      	bne.n	80051ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 0307 	and.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b06      	cmp	r3, #6
 8005198:	d010      	beq.n	80051bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051aa:	e007      	b.n	80051bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f042 0201 	orr.w	r2, r2, #1
 80051ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
 80051ca:	bf00      	nop
 80051cc:	40010000 	.word	0x40010000
 80051d0:	40000400 	.word	0x40000400
 80051d4:	40000800 	.word	0x40000800
 80051d8:	40000c00 	.word	0x40000c00
 80051dc:	40010400 	.word	0x40010400
 80051e0:	40014000 	.word	0x40014000
 80051e4:	40001800 	.word	0x40001800

080051e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e041      	b.n	800527e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d106      	bne.n	8005214 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fd fd36 	bl	8002c80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681a      	ldr	r2, [r3, #0]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	3304      	adds	r3, #4
 8005224:	4619      	mov	r1, r3
 8005226:	4610      	mov	r0, r2
 8005228:	f000 fc1c 	bl	8005a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
	...

08005288 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d109      	bne.n	80052ac <HAL_TIM_PWM_Start+0x24>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	bf14      	ite	ne
 80052a4:	2301      	movne	r3, #1
 80052a6:	2300      	moveq	r3, #0
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	e022      	b.n	80052f2 <HAL_TIM_PWM_Start+0x6a>
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	d109      	bne.n	80052c6 <HAL_TIM_PWM_Start+0x3e>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	bf14      	ite	ne
 80052be:	2301      	movne	r3, #1
 80052c0:	2300      	moveq	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e015      	b.n	80052f2 <HAL_TIM_PWM_Start+0x6a>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b08      	cmp	r3, #8
 80052ca:	d109      	bne.n	80052e0 <HAL_TIM_PWM_Start+0x58>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	bf14      	ite	ne
 80052d8:	2301      	movne	r3, #1
 80052da:	2300      	moveq	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e008      	b.n	80052f2 <HAL_TIM_PWM_Start+0x6a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e07c      	b.n	80053f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d104      	bne.n	800530a <HAL_TIM_PWM_Start+0x82>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005308:	e013      	b.n	8005332 <HAL_TIM_PWM_Start+0xaa>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b04      	cmp	r3, #4
 800530e:	d104      	bne.n	800531a <HAL_TIM_PWM_Start+0x92>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005318:	e00b      	b.n	8005332 <HAL_TIM_PWM_Start+0xaa>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d104      	bne.n	800532a <HAL_TIM_PWM_Start+0xa2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2202      	movs	r2, #2
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005328:	e003      	b.n	8005332 <HAL_TIM_PWM_Start+0xaa>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2202      	movs	r2, #2
 800532e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2201      	movs	r2, #1
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	4618      	mov	r0, r3
 800533c:	f000 fde2 	bl	8005f04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2d      	ldr	r2, [pc, #180]	; (80053fc <HAL_TIM_PWM_Start+0x174>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d004      	beq.n	8005354 <HAL_TIM_PWM_Start+0xcc>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a2c      	ldr	r2, [pc, #176]	; (8005400 <HAL_TIM_PWM_Start+0x178>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d101      	bne.n	8005358 <HAL_TIM_PWM_Start+0xd0>
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <HAL_TIM_PWM_Start+0xd2>
 8005358:	2300      	movs	r3, #0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d007      	beq.n	800536e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800536c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a22      	ldr	r2, [pc, #136]	; (80053fc <HAL_TIM_PWM_Start+0x174>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d022      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d01d      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1f      	ldr	r2, [pc, #124]	; (8005404 <HAL_TIM_PWM_Start+0x17c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d018      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1d      	ldr	r2, [pc, #116]	; (8005408 <HAL_TIM_PWM_Start+0x180>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d013      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a1c      	ldr	r2, [pc, #112]	; (800540c <HAL_TIM_PWM_Start+0x184>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d00e      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a16      	ldr	r2, [pc, #88]	; (8005400 <HAL_TIM_PWM_Start+0x178>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d009      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a18      	ldr	r2, [pc, #96]	; (8005410 <HAL_TIM_PWM_Start+0x188>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d004      	beq.n	80053be <HAL_TIM_PWM_Start+0x136>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a16      	ldr	r2, [pc, #88]	; (8005414 <HAL_TIM_PWM_Start+0x18c>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d111      	bne.n	80053e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b06      	cmp	r3, #6
 80053ce:	d010      	beq.n	80053f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f042 0201 	orr.w	r2, r2, #1
 80053de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053e0:	e007      	b.n	80053f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f042 0201 	orr.w	r2, r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	40010000 	.word	0x40010000
 8005400:	40010400 	.word	0x40010400
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40014000 	.word	0x40014000
 8005414:	40001800 	.word	0x40001800

08005418 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e097      	b.n	800555c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005432:	b2db      	uxtb	r3, r3
 8005434:	2b00      	cmp	r3, #0
 8005436:	d106      	bne.n	8005446 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7fd fb4d 	bl	8002ae0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2202      	movs	r2, #2
 800544a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6812      	ldr	r2, [r2, #0]
 8005458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800545c:	f023 0307 	bic.w	r3, r3, #7
 8005460:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	4619      	mov	r1, r3
 800546c:	4610      	mov	r0, r2
 800546e:	f000 faf9 	bl	8005a64 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	699b      	ldr	r3, [r3, #24]
 8005480:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	6a1b      	ldr	r3, [r3, #32]
 8005488:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800549a:	f023 0303 	bic.w	r3, r3, #3
 800549e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	021b      	lsls	r3, r3, #8
 80054aa:	4313      	orrs	r3, r2
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80054b8:	f023 030c 	bic.w	r3, r3, #12
 80054bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	69db      	ldr	r3, [r3, #28]
 80054d2:	021b      	lsls	r3, r3, #8
 80054d4:	4313      	orrs	r3, r2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	011a      	lsls	r2, r3, #4
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	031b      	lsls	r3, r3, #12
 80054e8:	4313      	orrs	r3, r2
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80054fe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	011b      	lsls	r3, r3, #4
 800550a:	4313      	orrs	r3, r2
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	4313      	orrs	r3, r2
 8005510:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2201      	movs	r2, #1
 800553e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2201      	movs	r2, #1
 8005546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800555a:	2300      	movs	r3, #0
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005574:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800557c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005584:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800558c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d110      	bne.n	80055b6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d102      	bne.n	80055a0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800559a:	7b7b      	ldrb	r3, [r7, #13]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d001      	beq.n	80055a4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e069      	b.n	8005678 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055b4:	e031      	b.n	800561a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d110      	bne.n	80055de <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055bc:	7bbb      	ldrb	r3, [r7, #14]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d102      	bne.n	80055c8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055c2:	7b3b      	ldrb	r3, [r7, #12]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d001      	beq.n	80055cc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e055      	b.n	8005678 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2202      	movs	r2, #2
 80055d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80055dc:	e01d      	b.n	800561a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055de:	7bfb      	ldrb	r3, [r7, #15]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d108      	bne.n	80055f6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d105      	bne.n	80055f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80055ea:	7b7b      	ldrb	r3, [r7, #13]
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d102      	bne.n	80055f6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80055f0:	7b3b      	ldrb	r3, [r7, #12]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d001      	beq.n	80055fa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e03e      	b.n	8005678 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2202      	movs	r2, #2
 8005606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2202      	movs	r2, #2
 8005616:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d003      	beq.n	8005628 <HAL_TIM_Encoder_Start+0xc4>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d008      	beq.n	8005638 <HAL_TIM_Encoder_Start+0xd4>
 8005626:	e00f      	b.n	8005648 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2201      	movs	r2, #1
 800562e:	2100      	movs	r1, #0
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fc67 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 8005636:	e016      	b.n	8005666 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2201      	movs	r2, #1
 800563e:	2104      	movs	r1, #4
 8005640:	4618      	mov	r0, r3
 8005642:	f000 fc5f 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 8005646:	e00e      	b.n	8005666 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2201      	movs	r2, #1
 800564e:	2100      	movs	r1, #0
 8005650:	4618      	mov	r0, r3
 8005652:	f000 fc57 	bl	8005f04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2201      	movs	r2, #1
 800565c:	2104      	movs	r1, #4
 800565e:	4618      	mov	r0, r3
 8005660:	f000 fc50 	bl	8005f04 <TIM_CCxChannelCmd>
      break;
 8005664:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f042 0201 	orr.w	r2, r2, #1
 8005674:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3710      	adds	r7, #16
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b02      	cmp	r3, #2
 8005694:	d122      	bne.n	80056dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	68db      	ldr	r3, [r3, #12]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d11b      	bne.n	80056dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f06f 0202 	mvn.w	r2, #2
 80056ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2201      	movs	r2, #1
 80056b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699b      	ldr	r3, [r3, #24]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d003      	beq.n	80056ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f9b0 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 80056c8:	e005      	b.n	80056d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 f9a2 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f9b3 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0304 	and.w	r3, r3, #4
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b04      	cmp	r3, #4
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0204 	mvn.w	r2, #4
 8005700:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2202      	movs	r2, #2
 8005706:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f986 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f978 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f989 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0308 	and.w	r3, r3, #8
 800573a:	2b08      	cmp	r3, #8
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b08      	cmp	r3, #8
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0208 	mvn.w	r2, #8
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2204      	movs	r2, #4
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f95c 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f94e 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f95f 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b10      	cmp	r3, #16
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0310 	and.w	r3, r3, #16
 800579c:	2b10      	cmp	r3, #16
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0210 	mvn.w	r2, #16
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2208      	movs	r2, #8
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f932 	bl	8005a28 <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f924 	bl	8005a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f935 	bl	8005a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d10e      	bne.n	8005804 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0301 	and.w	r3, r3, #1
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d107      	bne.n	8005804 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0201 	mvn.w	r2, #1
 80057fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fc fcf4 	bl	80021ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b80      	cmp	r3, #128	; 0x80
 8005810:	d10e      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581c:	2b80      	cmp	r3, #128	; 0x80
 800581e:	d107      	bne.n	8005830 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fc16 	bl	800605c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b40      	cmp	r3, #64	; 0x40
 800583c:	d10e      	bne.n	800585c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68db      	ldr	r3, [r3, #12]
 8005844:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005848:	2b40      	cmp	r3, #64	; 0x40
 800584a:	d107      	bne.n	800585c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 f8fa 	bl	8005a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0320 	and.w	r3, r3, #32
 8005866:	2b20      	cmp	r3, #32
 8005868:	d10e      	bne.n	8005888 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b20      	cmp	r3, #32
 8005876:	d107      	bne.n	8005888 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0220 	mvn.w	r2, #32
 8005880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fbe0 	bl	8006048 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005888:	bf00      	nop
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800589c:	2300      	movs	r3, #0
 800589e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d101      	bne.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0ae      	b.n	8005a0c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b0c      	cmp	r3, #12
 80058ba:	f200 809f 	bhi.w	80059fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058f9 	.word	0x080058f9
 80058c8:	080059fd 	.word	0x080059fd
 80058cc:	080059fd 	.word	0x080059fd
 80058d0:	080059fd 	.word	0x080059fd
 80058d4:	08005939 	.word	0x08005939
 80058d8:	080059fd 	.word	0x080059fd
 80058dc:	080059fd 	.word	0x080059fd
 80058e0:	080059fd 	.word	0x080059fd
 80058e4:	0800597b 	.word	0x0800597b
 80058e8:	080059fd 	.word	0x080059fd
 80058ec:	080059fd 	.word	0x080059fd
 80058f0:	080059fd 	.word	0x080059fd
 80058f4:	080059bb 	.word	0x080059bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f950 	bl	8005ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	699a      	ldr	r2, [r3, #24]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f042 0208 	orr.w	r2, r2, #8
 8005912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699a      	ldr	r2, [r3, #24]
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f022 0204 	bic.w	r2, r2, #4
 8005922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	6999      	ldr	r1, [r3, #24]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	430a      	orrs	r2, r1
 8005934:	619a      	str	r2, [r3, #24]
      break;
 8005936:	e064      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68b9      	ldr	r1, [r7, #8]
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f9a0 	bl	8005c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699a      	ldr	r2, [r3, #24]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699a      	ldr	r2, [r3, #24]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6999      	ldr	r1, [r3, #24]
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	021a      	lsls	r2, r3, #8
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	619a      	str	r2, [r3, #24]
      break;
 8005978:	e043      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68b9      	ldr	r1, [r7, #8]
 8005980:	4618      	mov	r0, r3
 8005982:	f000 f9f5 	bl	8005d70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	69da      	ldr	r2, [r3, #28]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f042 0208 	orr.w	r2, r2, #8
 8005994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	69da      	ldr	r2, [r3, #28]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 0204 	bic.w	r2, r2, #4
 80059a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	69d9      	ldr	r1, [r3, #28]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	430a      	orrs	r2, r1
 80059b6:	61da      	str	r2, [r3, #28]
      break;
 80059b8:	e023      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	68b9      	ldr	r1, [r7, #8]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f000 fa49 	bl	8005e58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69da      	ldr	r2, [r3, #28]
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	69d9      	ldr	r1, [r3, #28]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	021a      	lsls	r2, r3, #8
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	430a      	orrs	r2, r1
 80059f8:	61da      	str	r2, [r3, #28]
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005a00:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3718      	adds	r7, #24
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b085      	sub	sp, #20
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a40      	ldr	r2, [pc, #256]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d013      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d00f      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a3d      	ldr	r2, [pc, #244]	; (8005b7c <TIM_Base_SetConfig+0x118>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d00b      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a3c      	ldr	r2, [pc, #240]	; (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d007      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a3b      	ldr	r2, [pc, #236]	; (8005b84 <TIM_Base_SetConfig+0x120>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d003      	beq.n	8005aa4 <TIM_Base_SetConfig+0x40>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a3a      	ldr	r2, [pc, #232]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d108      	bne.n	8005ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a2f      	ldr	r2, [pc, #188]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d02b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac4:	d027      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <TIM_Base_SetConfig+0x118>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d023      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a2b      	ldr	r2, [pc, #172]	; (8005b80 <TIM_Base_SetConfig+0x11c>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d01f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a2a      	ldr	r2, [pc, #168]	; (8005b84 <TIM_Base_SetConfig+0x120>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d01b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a29      	ldr	r2, [pc, #164]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d017      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a28      	ldr	r2, [pc, #160]	; (8005b8c <TIM_Base_SetConfig+0x128>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d013      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a27      	ldr	r2, [pc, #156]	; (8005b90 <TIM_Base_SetConfig+0x12c>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d00f      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a26      	ldr	r2, [pc, #152]	; (8005b94 <TIM_Base_SetConfig+0x130>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00b      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a25      	ldr	r2, [pc, #148]	; (8005b98 <TIM_Base_SetConfig+0x134>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <TIM_Base_SetConfig+0x138>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_Base_SetConfig+0xb2>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a23      	ldr	r2, [pc, #140]	; (8005ba0 <TIM_Base_SetConfig+0x13c>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d108      	bne.n	8005b28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	689a      	ldr	r2, [r3, #8]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	; (8005b78 <TIM_Base_SetConfig+0x114>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_Base_SetConfig+0xf8>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a0c      	ldr	r2, [pc, #48]	; (8005b88 <TIM_Base_SetConfig+0x124>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d103      	bne.n	8005b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	691a      	ldr	r2, [r3, #16]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	615a      	str	r2, [r3, #20]
}
 8005b6a:	bf00      	nop
 8005b6c:	3714      	adds	r7, #20
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b74:	4770      	bx	lr
 8005b76:	bf00      	nop
 8005b78:	40010000 	.word	0x40010000
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800
 8005b84:	40000c00 	.word	0x40000c00
 8005b88:	40010400 	.word	0x40010400
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400
 8005b94:	40014800 	.word	0x40014800
 8005b98:	40001800 	.word	0x40001800
 8005b9c:	40001c00 	.word	0x40001c00
 8005ba0:	40002000 	.word	0x40002000

08005ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	f023 0201 	bic.w	r2, r3, #1
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f023 0303 	bic.w	r3, r3, #3
 8005bda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f023 0302 	bic.w	r3, r3, #2
 8005bec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <TIM_OC1_SetConfig+0xd8>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC1_SetConfig+0x64>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <TIM_OC1_SetConfig+0xdc>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10c      	bne.n	8005c22 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f023 0308 	bic.w	r3, r3, #8
 8005c0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f023 0304 	bic.w	r3, r3, #4
 8005c20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <TIM_OC1_SetConfig+0xd8>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d003      	beq.n	8005c32 <TIM_OC1_SetConfig+0x8e>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4a14      	ldr	r2, [pc, #80]	; (8005c80 <TIM_OC1_SetConfig+0xdc>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d111      	bne.n	8005c56 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	693a      	ldr	r2, [r7, #16]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0210 	bic.w	r2, r3, #16
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f023 0320 	bic.w	r3, r3, #32
 8005cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a22      	ldr	r2, [pc, #136]	; (8005d68 <TIM_OC2_SetConfig+0xe4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC2_SetConfig+0x68>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <TIM_OC2_SetConfig+0xe8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d10d      	bne.n	8005d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC2_SetConfig+0xe4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_OC2_SetConfig+0x94>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a16      	ldr	r2, [pc, #88]	; (8005d6c <TIM_OC2_SetConfig+0xe8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d113      	bne.n	8005d40 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	693a      	ldr	r2, [r7, #16]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	699b      	ldr	r3, [r3, #24]
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	693a      	ldr	r2, [r7, #16]
 8005d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	621a      	str	r2, [r3, #32]
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	40010000 	.word	0x40010000
 8005d6c:	40010400 	.word	0x40010400

08005d70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68fa      	ldr	r2, [r7, #12]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005db8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	021b      	lsls	r3, r3, #8
 8005dc0:	697a      	ldr	r2, [r7, #20]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a21      	ldr	r2, [pc, #132]	; (8005e50 <TIM_OC3_SetConfig+0xe0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d003      	beq.n	8005dd6 <TIM_OC3_SetConfig+0x66>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a20      	ldr	r2, [pc, #128]	; (8005e54 <TIM_OC3_SetConfig+0xe4>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d10d      	bne.n	8005df2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ddc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	021b      	lsls	r3, r3, #8
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4313      	orrs	r3, r2
 8005de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a16      	ldr	r2, [pc, #88]	; (8005e50 <TIM_OC3_SetConfig+0xe0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_OC3_SetConfig+0x92>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a15      	ldr	r2, [pc, #84]	; (8005e54 <TIM_OC3_SetConfig+0xe4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d113      	bne.n	8005e2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	695b      	ldr	r3, [r3, #20]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	699b      	ldr	r3, [r3, #24]
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	693a      	ldr	r2, [r7, #16]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	621a      	str	r2, [r3, #32]
}
 8005e44:	bf00      	nop
 8005e46:	371c      	adds	r7, #28
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010400 	.word	0x40010400

08005e58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	021b      	lsls	r3, r3, #8
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ea2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	031b      	lsls	r3, r3, #12
 8005eaa:	693a      	ldr	r2, [r7, #16]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <TIM_OC4_SetConfig+0xa4>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_OC4_SetConfig+0x68>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a11      	ldr	r2, [pc, #68]	; (8005f00 <TIM_OC4_SetConfig+0xa8>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d109      	bne.n	8005ed4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ec6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	019b      	lsls	r3, r3, #6
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685a      	ldr	r2, [r3, #4]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40010400 	.word	0x40010400

08005f04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b087      	sub	sp, #28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	60b9      	str	r1, [r7, #8]
 8005f0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	f003 031f 	and.w	r3, r3, #31
 8005f16:	2201      	movs	r2, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	401a      	ands	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	6879      	ldr	r1, [r7, #4]
 8005f38:	fa01 f303 	lsl.w	r3, r1, r3
 8005f3c:	431a      	orrs	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
	...

08005f50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d101      	bne.n	8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f64:	2302      	movs	r3, #2
 8005f66:	e05a      	b.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a21      	ldr	r2, [pc, #132]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d022      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d01d      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d018      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d013      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a1a      	ldr	r2, [pc, #104]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00e      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d009      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a17      	ldr	r2, [pc, #92]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d004      	beq.n	8005ff2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a15      	ldr	r2, [pc, #84]	; (8006044 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d10c      	bne.n	800600c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	685b      	ldr	r3, [r3, #4]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	4313      	orrs	r3, r2
 8006002:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2200      	movs	r2, #0
 8006018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601c:	2300      	movs	r3, #0
}
 800601e:	4618      	mov	r0, r3
 8006020:	3714      	adds	r7, #20
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	40010000 	.word	0x40010000
 8006030:	40000400 	.word	0x40000400
 8006034:	40000800 	.word	0x40000800
 8006038:	40000c00 	.word	0x40000c00
 800603c:	40010400 	.word	0x40010400
 8006040:	40014000 	.word	0x40014000
 8006044:	40001800 	.word	0x40001800

08006048 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e03f      	b.n	8006102 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7fc ffe8 	bl	800306c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2224      	movs	r2, #36	; 0x24
 80060a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f000 faa5 	bl	8006604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	691a      	ldr	r2, [r3, #16]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	695a      	ldr	r2, [r3, #20]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2220      	movs	r2, #32
 80060f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006100:	2300      	movs	r3, #0
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b084      	sub	sp, #16
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	60b9      	str	r1, [r7, #8]
 8006114:	4613      	mov	r3, r2
 8006116:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b20      	cmp	r3, #32
 8006122:	d11d      	bne.n	8006160 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <HAL_UART_Receive_DMA+0x26>
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e016      	b.n	8006162 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <HAL_UART_Receive_DMA+0x38>
 800613e:	2302      	movs	r3, #2
 8006140:	e00f      	b.n	8006162 <HAL_UART_Receive_DMA+0x58>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006150:	88fb      	ldrh	r3, [r7, #6]
 8006152:	461a      	mov	r2, r3
 8006154:	68b9      	ldr	r1, [r7, #8]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f000 f92a 	bl	80063b0 <UART_Start_Receive_DMA>
 800615c:	4603      	mov	r3, r0
 800615e:	e000      	b.n	8006162 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006160:	2302      	movs	r3, #2
  }
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}

0800616a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800616a:	b480      	push	{r7}
 800616c:	b083      	sub	sp, #12
 800616e:	af00      	add	r7, sp, #0
 8006170:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006172:	bf00      	nop
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800617e:	b480      	push	{r7}
 8006180:	b083      	sub	sp, #12
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr

08006192 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006192:	b480      	push	{r7}
 8006194:	b083      	sub	sp, #12
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061b2:	bf00      	nop
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b09c      	sub	sp, #112	; 0x70
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d172      	bne.n	80062c0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80061da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061dc:	2200      	movs	r2, #0
 80061de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	330c      	adds	r3, #12
 80061e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061ea:	e853 3f00 	ldrex	r3, [r3]
 80061ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80061f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	330c      	adds	r3, #12
 80061fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006200:	65ba      	str	r2, [r7, #88]	; 0x58
 8006202:	657b      	str	r3, [r7, #84]	; 0x54
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006204:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006206:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006208:	e841 2300 	strex	r3, r2, [r1]
 800620c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800620e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006210:	2b00      	cmp	r3, #0
 8006212:	d1e5      	bne.n	80061e0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3314      	adds	r3, #20
 800621a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621e:	e853 3f00 	ldrex	r3, [r3]
 8006222:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006226:	f023 0301 	bic.w	r3, r3, #1
 800622a:	667b      	str	r3, [r7, #100]	; 0x64
 800622c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3314      	adds	r3, #20
 8006232:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006234:	647a      	str	r2, [r7, #68]	; 0x44
 8006236:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800623a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800623c:	e841 2300 	strex	r3, r2, [r1]
 8006240:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1e5      	bne.n	8006214 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	e853 3f00 	ldrex	r3, [r3]
 8006256:	623b      	str	r3, [r7, #32]
   return(result);
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625e:	663b      	str	r3, [r7, #96]	; 0x60
 8006260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	3314      	adds	r3, #20
 8006266:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006268:	633a      	str	r2, [r7, #48]	; 0x30
 800626a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800626e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e5      	bne.n	8006248 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800627c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800627e:	2220      	movs	r2, #32
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d119      	bne.n	80062c0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800628c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	e853 3f00 	ldrex	r3, [r3]
 800629a:	60fb      	str	r3, [r7, #12]
   return(result);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f023 0310 	bic.w	r3, r3, #16
 80062a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	330c      	adds	r3, #12
 80062aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062ac:	61fa      	str	r2, [r7, #28]
 80062ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b0:	69b9      	ldr	r1, [r7, #24]
 80062b2:	69fa      	ldr	r2, [r7, #28]
 80062b4:	e841 2300 	strex	r3, r2, [r1]
 80062b8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1e5      	bne.n	800628c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d106      	bne.n	80062d6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062cc:	4619      	mov	r1, r3
 80062ce:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062d0:	f7ff ff69 	bl	80061a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062d4:	e002      	b.n	80062dc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80062d6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80062d8:	f7ff ff47 	bl	800616a <HAL_UART_RxCpltCallback>
}
 80062dc:	bf00      	nop
 80062de:	3770      	adds	r7, #112	; 0x70
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d108      	bne.n	800630c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80062fe:	085b      	lsrs	r3, r3, #1
 8006300:	b29b      	uxth	r3, r3
 8006302:	4619      	mov	r1, r3
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff ff4e 	bl	80061a6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800630a:	e002      	b.n	8006312 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800630c:	68f8      	ldr	r0, [r7, #12]
 800630e:	f7ff ff36 	bl	800617e <HAL_UART_RxHalfCpltCallback>
}
 8006312:	bf00      	nop
 8006314:	3710      	adds	r7, #16
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}

0800631a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800632a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006336:	2b80      	cmp	r3, #128	; 0x80
 8006338:	bf0c      	ite	eq
 800633a:	2301      	moveq	r3, #1
 800633c:	2300      	movne	r3, #0
 800633e:	b2db      	uxtb	r3, r3
 8006340:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b21      	cmp	r3, #33	; 0x21
 800634c:	d108      	bne.n	8006360 <UART_DMAError+0x46>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d005      	beq.n	8006360 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	2200      	movs	r2, #0
 8006358:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800635a:	68b8      	ldr	r0, [r7, #8]
 800635c:	f000 f8c6 	bl	80064ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	695b      	ldr	r3, [r3, #20]
 8006366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800636a:	2b40      	cmp	r3, #64	; 0x40
 800636c:	bf0c      	ite	eq
 800636e:	2301      	moveq	r3, #1
 8006370:	2300      	movne	r3, #0
 8006372:	b2db      	uxtb	r3, r3
 8006374:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637c:	b2db      	uxtb	r3, r3
 800637e:	2b22      	cmp	r3, #34	; 0x22
 8006380:	d108      	bne.n	8006394 <UART_DMAError+0x7a>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d005      	beq.n	8006394 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	2200      	movs	r2, #0
 800638c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800638e:	68b8      	ldr	r0, [r7, #8]
 8006390:	f000 f8d4 	bl	800653c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006398:	f043 0210 	orr.w	r2, r3, #16
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f7ff fef6 	bl	8006192 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063a6:	bf00      	nop
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
	...

080063b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b098      	sub	sp, #96	; 0x60
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	60f8      	str	r0, [r7, #12]
 80063b8:	60b9      	str	r1, [r7, #8]
 80063ba:	4613      	mov	r3, r2
 80063bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063be:	68ba      	ldr	r2, [r7, #8]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2200      	movs	r2, #0
 80063ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2222      	movs	r2, #34	; 0x22
 80063d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	4a40      	ldr	r2, [pc, #256]	; (80064e0 <UART_Start_Receive_DMA+0x130>)
 80063de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e4:	4a3f      	ldr	r2, [pc, #252]	; (80064e4 <UART_Start_Receive_DMA+0x134>)
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ec:	4a3e      	ldr	r2, [pc, #248]	; (80064e8 <UART_Start_Receive_DMA+0x138>)
 80063ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f4:	2200      	movs	r2, #0
 80063f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80063f8:	f107 0308 	add.w	r3, r7, #8
 80063fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	3304      	adds	r3, #4
 8006408:	4619      	mov	r1, r3
 800640a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	88fb      	ldrh	r3, [r7, #6]
 8006410:	f7fd fb80 	bl	8003b14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006414:	2300      	movs	r3, #0
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	613b      	str	r3, [r7, #16]
 8006428:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d019      	beq.n	800646e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006444:	e853 3f00 	ldrex	r3, [r3]
 8006448:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006450:	65bb      	str	r3, [r7, #88]	; 0x58
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	330c      	adds	r3, #12
 8006458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800645a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800645c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006460:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1e5      	bne.n	800643a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	3314      	adds	r3, #20
 8006474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	e853 3f00 	ldrex	r3, [r3]
 800647c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800647e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006480:	f043 0301 	orr.w	r3, r3, #1
 8006484:	657b      	str	r3, [r7, #84]	; 0x54
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3314      	adds	r3, #20
 800648c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800648e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006490:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006492:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006494:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006496:	e841 2300 	strex	r3, r2, [r1]
 800649a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1e5      	bne.n	800646e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3314      	adds	r3, #20
 80064a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064aa:	69bb      	ldr	r3, [r7, #24]
 80064ac:	e853 3f00 	ldrex	r3, [r3]
 80064b0:	617b      	str	r3, [r7, #20]
   return(result);
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b8:	653b      	str	r3, [r7, #80]	; 0x50
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	3314      	adds	r3, #20
 80064c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064c2:	627a      	str	r2, [r7, #36]	; 0x24
 80064c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c6:	6a39      	ldr	r1, [r7, #32]
 80064c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ca:	e841 2300 	strex	r3, r2, [r1]
 80064ce:	61fb      	str	r3, [r7, #28]
   return(result);
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1e5      	bne.n	80064a2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3760      	adds	r7, #96	; 0x60
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	080061bf 	.word	0x080061bf
 80064e4:	080062e5 	.word	0x080062e5
 80064e8:	0800631b 	.word	0x0800631b

080064ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b089      	sub	sp, #36	; 0x24
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	330c      	adds	r3, #12
 80064fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	e853 3f00 	ldrex	r3, [r3]
 8006502:	60bb      	str	r3, [r7, #8]
   return(result);
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	330c      	adds	r3, #12
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	61ba      	str	r2, [r7, #24]
 8006516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6979      	ldr	r1, [r7, #20]
 800651a:	69ba      	ldr	r2, [r7, #24]
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	613b      	str	r3, [r7, #16]
   return(result);
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e5      	bne.n	80064f4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2220      	movs	r2, #32
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006530:	bf00      	nop
 8006532:	3724      	adds	r7, #36	; 0x24
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800653c:	b480      	push	{r7}
 800653e:	b095      	sub	sp, #84	; 0x54
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	330c      	adds	r3, #12
 800654a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654e:	e853 3f00 	ldrex	r3, [r3]
 8006552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	330c      	adds	r3, #12
 8006562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006564:	643a      	str	r2, [r7, #64]	; 0x40
 8006566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800656a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800656c:	e841 2300 	strex	r3, r2, [r1]
 8006570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1e5      	bne.n	8006544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	61fb      	str	r3, [r7, #28]
   return(result);
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	3314      	adds	r3, #20
 8006596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800659a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800659c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800659e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d119      	bne.n	80065e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	330c      	adds	r3, #12
 80065ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	e853 3f00 	ldrex	r3, [r3]
 80065c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f023 0310 	bic.w	r3, r3, #16
 80065ca:	647b      	str	r3, [r7, #68]	; 0x44
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065d4:	61ba      	str	r2, [r7, #24]
 80065d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6979      	ldr	r1, [r7, #20]
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	613b      	str	r3, [r7, #16]
   return(result);
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e5      	bne.n	80065b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80065f6:	bf00      	nop
 80065f8:	3754      	adds	r7, #84	; 0x54
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
	...

08006604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006608:	b0c0      	sub	sp, #256	; 0x100
 800660a:	af00      	add	r7, sp, #0
 800660c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006620:	68d9      	ldr	r1, [r3, #12]
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	ea40 0301 	orr.w	r3, r0, r1
 800662c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	431a      	orrs	r2, r3
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006640:	695b      	ldr	r3, [r3, #20]
 8006642:	431a      	orrs	r2, r3
 8006644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006648:	69db      	ldr	r3, [r3, #28]
 800664a:	4313      	orrs	r3, r2
 800664c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	68db      	ldr	r3, [r3, #12]
 8006658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800665c:	f021 010c 	bic.w	r1, r1, #12
 8006660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800666a:	430b      	orrs	r3, r1
 800666c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800666e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	695b      	ldr	r3, [r3, #20]
 8006676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800667e:	6999      	ldr	r1, [r3, #24]
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	ea40 0301 	orr.w	r3, r0, r1
 800668a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	4b8f      	ldr	r3, [pc, #572]	; (80068d0 <UART_SetConfig+0x2cc>)
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <UART_SetConfig+0xa0>
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b8d      	ldr	r3, [pc, #564]	; (80068d4 <UART_SetConfig+0x2d0>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d104      	bne.n	80066ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066a4:	f7fe fc9a 	bl	8004fdc <HAL_RCC_GetPCLK2Freq>
 80066a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80066ac:	e003      	b.n	80066b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ae:	f7fe fc81 	bl	8004fb4 <HAL_RCC_GetPCLK1Freq>
 80066b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066c0:	f040 810c 	bne.w	80068dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066c8:	2200      	movs	r2, #0
 80066ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80066ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80066d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80066d6:	4622      	mov	r2, r4
 80066d8:	462b      	mov	r3, r5
 80066da:	1891      	adds	r1, r2, r2
 80066dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80066de:	415b      	adcs	r3, r3
 80066e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80066e6:	4621      	mov	r1, r4
 80066e8:	eb12 0801 	adds.w	r8, r2, r1
 80066ec:	4629      	mov	r1, r5
 80066ee:	eb43 0901 	adc.w	r9, r3, r1
 80066f2:	f04f 0200 	mov.w	r2, #0
 80066f6:	f04f 0300 	mov.w	r3, #0
 80066fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006706:	4690      	mov	r8, r2
 8006708:	4699      	mov	r9, r3
 800670a:	4623      	mov	r3, r4
 800670c:	eb18 0303 	adds.w	r3, r8, r3
 8006710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006714:	462b      	mov	r3, r5
 8006716:	eb49 0303 	adc.w	r3, r9, r3
 800671a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800671e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800672a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800672e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006732:	460b      	mov	r3, r1
 8006734:	18db      	adds	r3, r3, r3
 8006736:	653b      	str	r3, [r7, #80]	; 0x50
 8006738:	4613      	mov	r3, r2
 800673a:	eb42 0303 	adc.w	r3, r2, r3
 800673e:	657b      	str	r3, [r7, #84]	; 0x54
 8006740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006748:	f7fa f960 	bl	8000a0c <__aeabi_uldivmod>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	4b61      	ldr	r3, [pc, #388]	; (80068d8 <UART_SetConfig+0x2d4>)
 8006752:	fba3 2302 	umull	r2, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	011c      	lsls	r4, r3, #4
 800675a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800675e:	2200      	movs	r2, #0
 8006760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800676c:	4642      	mov	r2, r8
 800676e:	464b      	mov	r3, r9
 8006770:	1891      	adds	r1, r2, r2
 8006772:	64b9      	str	r1, [r7, #72]	; 0x48
 8006774:	415b      	adcs	r3, r3
 8006776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800677c:	4641      	mov	r1, r8
 800677e:	eb12 0a01 	adds.w	sl, r2, r1
 8006782:	4649      	mov	r1, r9
 8006784:	eb43 0b01 	adc.w	fp, r3, r1
 8006788:	f04f 0200 	mov.w	r2, #0
 800678c:	f04f 0300 	mov.w	r3, #0
 8006790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679c:	4692      	mov	sl, r2
 800679e:	469b      	mov	fp, r3
 80067a0:	4643      	mov	r3, r8
 80067a2:	eb1a 0303 	adds.w	r3, sl, r3
 80067a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067aa:	464b      	mov	r3, r9
 80067ac:	eb4b 0303 	adc.w	r3, fp, r3
 80067b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80067b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80067c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80067c8:	460b      	mov	r3, r1
 80067ca:	18db      	adds	r3, r3, r3
 80067cc:	643b      	str	r3, [r7, #64]	; 0x40
 80067ce:	4613      	mov	r3, r2
 80067d0:	eb42 0303 	adc.w	r3, r2, r3
 80067d4:	647b      	str	r3, [r7, #68]	; 0x44
 80067d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80067da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80067de:	f7fa f915 	bl	8000a0c <__aeabi_uldivmod>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	4b3b      	ldr	r3, [pc, #236]	; (80068d8 <UART_SetConfig+0x2d4>)
 80067ea:	fba3 2301 	umull	r2, r3, r3, r1
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	2264      	movs	r2, #100	; 0x64
 80067f2:	fb02 f303 	mul.w	r3, r2, r3
 80067f6:	1acb      	subs	r3, r1, r3
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80067fe:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <UART_SetConfig+0x2d4>)
 8006800:	fba3 2302 	umull	r2, r3, r3, r2
 8006804:	095b      	lsrs	r3, r3, #5
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800680c:	441c      	add	r4, r3
 800680e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006812:	2200      	movs	r2, #0
 8006814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800681c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006820:	4642      	mov	r2, r8
 8006822:	464b      	mov	r3, r9
 8006824:	1891      	adds	r1, r2, r2
 8006826:	63b9      	str	r1, [r7, #56]	; 0x38
 8006828:	415b      	adcs	r3, r3
 800682a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800682c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006830:	4641      	mov	r1, r8
 8006832:	1851      	adds	r1, r2, r1
 8006834:	6339      	str	r1, [r7, #48]	; 0x30
 8006836:	4649      	mov	r1, r9
 8006838:	414b      	adcs	r3, r1
 800683a:	637b      	str	r3, [r7, #52]	; 0x34
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006848:	4659      	mov	r1, fp
 800684a:	00cb      	lsls	r3, r1, #3
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006852:	4651      	mov	r1, sl
 8006854:	00ca      	lsls	r2, r1, #3
 8006856:	4610      	mov	r0, r2
 8006858:	4619      	mov	r1, r3
 800685a:	4603      	mov	r3, r0
 800685c:	4642      	mov	r2, r8
 800685e:	189b      	adds	r3, r3, r2
 8006860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006864:	464b      	mov	r3, r9
 8006866:	460a      	mov	r2, r1
 8006868:	eb42 0303 	adc.w	r3, r2, r3
 800686c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800687c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006884:	460b      	mov	r3, r1
 8006886:	18db      	adds	r3, r3, r3
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
 800688a:	4613      	mov	r3, r2
 800688c:	eb42 0303 	adc.w	r3, r2, r3
 8006890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800689a:	f7fa f8b7 	bl	8000a0c <__aeabi_uldivmod>
 800689e:	4602      	mov	r2, r0
 80068a0:	460b      	mov	r3, r1
 80068a2:	4b0d      	ldr	r3, [pc, #52]	; (80068d8 <UART_SetConfig+0x2d4>)
 80068a4:	fba3 1302 	umull	r1, r3, r3, r2
 80068a8:	095b      	lsrs	r3, r3, #5
 80068aa:	2164      	movs	r1, #100	; 0x64
 80068ac:	fb01 f303 	mul.w	r3, r1, r3
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	3332      	adds	r3, #50	; 0x32
 80068b6:	4a08      	ldr	r2, [pc, #32]	; (80068d8 <UART_SetConfig+0x2d4>)
 80068b8:	fba2 2303 	umull	r2, r3, r2, r3
 80068bc:	095b      	lsrs	r3, r3, #5
 80068be:	f003 0207 	and.w	r2, r3, #7
 80068c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	4422      	add	r2, r4
 80068ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068cc:	e105      	b.n	8006ada <UART_SetConfig+0x4d6>
 80068ce:	bf00      	nop
 80068d0:	40011000 	.word	0x40011000
 80068d4:	40011400 	.word	0x40011400
 80068d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068e0:	2200      	movs	r2, #0
 80068e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80068e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80068ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80068ee:	4642      	mov	r2, r8
 80068f0:	464b      	mov	r3, r9
 80068f2:	1891      	adds	r1, r2, r2
 80068f4:	6239      	str	r1, [r7, #32]
 80068f6:	415b      	adcs	r3, r3
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
 80068fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068fe:	4641      	mov	r1, r8
 8006900:	1854      	adds	r4, r2, r1
 8006902:	4649      	mov	r1, r9
 8006904:	eb43 0501 	adc.w	r5, r3, r1
 8006908:	f04f 0200 	mov.w	r2, #0
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	00eb      	lsls	r3, r5, #3
 8006912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006916:	00e2      	lsls	r2, r4, #3
 8006918:	4614      	mov	r4, r2
 800691a:	461d      	mov	r5, r3
 800691c:	4643      	mov	r3, r8
 800691e:	18e3      	adds	r3, r4, r3
 8006920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006924:	464b      	mov	r3, r9
 8006926:	eb45 0303 	adc.w	r3, r5, r3
 800692a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800692e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800693a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800694a:	4629      	mov	r1, r5
 800694c:	008b      	lsls	r3, r1, #2
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006954:	4621      	mov	r1, r4
 8006956:	008a      	lsls	r2, r1, #2
 8006958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800695c:	f7fa f856 	bl	8000a0c <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4b60      	ldr	r3, [pc, #384]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006966:	fba3 2302 	umull	r2, r3, r3, r2
 800696a:	095b      	lsrs	r3, r3, #5
 800696c:	011c      	lsls	r4, r3, #4
 800696e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006972:	2200      	movs	r2, #0
 8006974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800697c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006980:	4642      	mov	r2, r8
 8006982:	464b      	mov	r3, r9
 8006984:	1891      	adds	r1, r2, r2
 8006986:	61b9      	str	r1, [r7, #24]
 8006988:	415b      	adcs	r3, r3
 800698a:	61fb      	str	r3, [r7, #28]
 800698c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006990:	4641      	mov	r1, r8
 8006992:	1851      	adds	r1, r2, r1
 8006994:	6139      	str	r1, [r7, #16]
 8006996:	4649      	mov	r1, r9
 8006998:	414b      	adcs	r3, r1
 800699a:	617b      	str	r3, [r7, #20]
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069a8:	4659      	mov	r1, fp
 80069aa:	00cb      	lsls	r3, r1, #3
 80069ac:	4651      	mov	r1, sl
 80069ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069b2:	4651      	mov	r1, sl
 80069b4:	00ca      	lsls	r2, r1, #3
 80069b6:	4610      	mov	r0, r2
 80069b8:	4619      	mov	r1, r3
 80069ba:	4603      	mov	r3, r0
 80069bc:	4642      	mov	r2, r8
 80069be:	189b      	adds	r3, r3, r2
 80069c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80069c4:	464b      	mov	r3, r9
 80069c6:	460a      	mov	r2, r1
 80069c8:	eb42 0303 	adc.w	r3, r2, r3
 80069cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2200      	movs	r2, #0
 80069d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80069da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80069dc:	f04f 0200 	mov.w	r2, #0
 80069e0:	f04f 0300 	mov.w	r3, #0
 80069e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80069e8:	4649      	mov	r1, r9
 80069ea:	008b      	lsls	r3, r1, #2
 80069ec:	4641      	mov	r1, r8
 80069ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069f2:	4641      	mov	r1, r8
 80069f4:	008a      	lsls	r2, r1, #2
 80069f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80069fa:	f7fa f807 	bl	8000a0c <__aeabi_uldivmod>
 80069fe:	4602      	mov	r2, r0
 8006a00:	460b      	mov	r3, r1
 8006a02:	4b39      	ldr	r3, [pc, #228]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006a04:	fba3 1302 	umull	r1, r3, r3, r2
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	2164      	movs	r1, #100	; 0x64
 8006a0c:	fb01 f303 	mul.w	r3, r1, r3
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	011b      	lsls	r3, r3, #4
 8006a14:	3332      	adds	r3, #50	; 0x32
 8006a16:	4a34      	ldr	r2, [pc, #208]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006a18:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1c:	095b      	lsrs	r3, r3, #5
 8006a1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a22:	441c      	add	r4, r3
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a28:	2200      	movs	r2, #0
 8006a2a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a2c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a2e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a32:	4642      	mov	r2, r8
 8006a34:	464b      	mov	r3, r9
 8006a36:	1891      	adds	r1, r2, r2
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	415b      	adcs	r3, r3
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a42:	4641      	mov	r1, r8
 8006a44:	1851      	adds	r1, r2, r1
 8006a46:	6039      	str	r1, [r7, #0]
 8006a48:	4649      	mov	r1, r9
 8006a4a:	414b      	adcs	r3, r1
 8006a4c:	607b      	str	r3, [r7, #4]
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a5a:	4659      	mov	r1, fp
 8006a5c:	00cb      	lsls	r3, r1, #3
 8006a5e:	4651      	mov	r1, sl
 8006a60:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a64:	4651      	mov	r1, sl
 8006a66:	00ca      	lsls	r2, r1, #3
 8006a68:	4610      	mov	r0, r2
 8006a6a:	4619      	mov	r1, r3
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	4642      	mov	r2, r8
 8006a70:	189b      	adds	r3, r3, r2
 8006a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a74:	464b      	mov	r3, r9
 8006a76:	460a      	mov	r2, r1
 8006a78:	eb42 0303 	adc.w	r3, r2, r3
 8006a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	663b      	str	r3, [r7, #96]	; 0x60
 8006a88:	667a      	str	r2, [r7, #100]	; 0x64
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006a96:	4649      	mov	r1, r9
 8006a98:	008b      	lsls	r3, r1, #2
 8006a9a:	4641      	mov	r1, r8
 8006a9c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aa0:	4641      	mov	r1, r8
 8006aa2:	008a      	lsls	r2, r1, #2
 8006aa4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006aa8:	f7f9 ffb0 	bl	8000a0c <__aeabi_uldivmod>
 8006aac:	4602      	mov	r2, r0
 8006aae:	460b      	mov	r3, r1
 8006ab0:	4b0d      	ldr	r3, [pc, #52]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2164      	movs	r1, #100	; 0x64
 8006aba:	fb01 f303 	mul.w	r3, r1, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a08      	ldr	r2, [pc, #32]	; (8006ae8 <UART_SetConfig+0x4e4>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4422      	add	r2, r4
 8006ad8:	609a      	str	r2, [r3, #8]
}
 8006ada:	bf00      	nop
 8006adc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae6:	bf00      	nop
 8006ae8:	51eb851f 	.word	0x51eb851f

08006aec <__NVIC_SetPriority>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	4603      	mov	r3, r0
 8006af4:	6039      	str	r1, [r7, #0]
 8006af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	db0a      	blt.n	8006b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	b2da      	uxtb	r2, r3
 8006b04:	490c      	ldr	r1, [pc, #48]	; (8006b38 <__NVIC_SetPriority+0x4c>)
 8006b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b0a:	0112      	lsls	r2, r2, #4
 8006b0c:	b2d2      	uxtb	r2, r2
 8006b0e:	440b      	add	r3, r1
 8006b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006b14:	e00a      	b.n	8006b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	4908      	ldr	r1, [pc, #32]	; (8006b3c <__NVIC_SetPriority+0x50>)
 8006b1c:	79fb      	ldrb	r3, [r7, #7]
 8006b1e:	f003 030f 	and.w	r3, r3, #15
 8006b22:	3b04      	subs	r3, #4
 8006b24:	0112      	lsls	r2, r2, #4
 8006b26:	b2d2      	uxtb	r2, r2
 8006b28:	440b      	add	r3, r1
 8006b2a:	761a      	strb	r2, [r3, #24]
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr
 8006b38:	e000e100 	.word	0xe000e100
 8006b3c:	e000ed00 	.word	0xe000ed00

08006b40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006b44:	4b05      	ldr	r3, [pc, #20]	; (8006b5c <SysTick_Handler+0x1c>)
 8006b46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006b48:	f002 f962 	bl	8008e10 <xTaskGetSchedulerState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d001      	beq.n	8006b56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006b52:	f000 fd99 	bl	8007688 <xPortSysTickHandler>
  }
}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	e000e010 	.word	0xe000e010

08006b60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006b64:	2100      	movs	r1, #0
 8006b66:	f06f 0004 	mvn.w	r0, #4
 8006b6a:	f7ff ffbf 	bl	8006aec <__NVIC_SetPriority>
#endif
}
 8006b6e:	bf00      	nop
 8006b70:	bd80      	pop	{r7, pc}
	...

08006b74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b7a:	f3ef 8305 	mrs	r3, IPSR
 8006b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8006b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d003      	beq.n	8006b8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006b86:	f06f 0305 	mvn.w	r3, #5
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e00c      	b.n	8006ba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006b8e:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <osKernelInitialize+0x44>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d105      	bne.n	8006ba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <osKernelInitialize+0x44>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	607b      	str	r3, [r7, #4]
 8006ba0:	e002      	b.n	8006ba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006ba8:	687b      	ldr	r3, [r7, #4]
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	20000e68 	.word	0x20000e68

08006bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bc2:	f3ef 8305 	mrs	r3, IPSR
 8006bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8006bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006bce:	f06f 0305 	mvn.w	r3, #5
 8006bd2:	607b      	str	r3, [r7, #4]
 8006bd4:	e010      	b.n	8006bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	; (8006c04 <osKernelStart+0x48>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d109      	bne.n	8006bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006bde:	f7ff ffbf 	bl	8006b60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006be2:	4b08      	ldr	r3, [pc, #32]	; (8006c04 <osKernelStart+0x48>)
 8006be4:	2202      	movs	r2, #2
 8006be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006be8:	f001 fcb6 	bl	8008558 <vTaskStartScheduler>
      stat = osOK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	607b      	str	r3, [r7, #4]
 8006bf0:	e002      	b.n	8006bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006bf8:	687b      	ldr	r3, [r7, #4]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20000e68 	.word	0x20000e68

08006c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006c14:	2300      	movs	r3, #0
 8006c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c18:	f3ef 8305 	mrs	r3, IPSR
 8006c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8006c1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d17e      	bne.n	8006d22 <osThreadNew+0x11a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d07b      	beq.n	8006d22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006c2a:	2380      	movs	r3, #128	; 0x80
 8006c2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006c2e:	2318      	movs	r3, #24
 8006c30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006c32:	2300      	movs	r3, #0
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8006c36:	f04f 33ff 	mov.w	r3, #4294967295
 8006c3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d045      	beq.n	8006cce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d002      	beq.n	8006c50 <osThreadNew+0x48>
        name = attr->name;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d002      	beq.n	8006c5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d008      	beq.n	8006c76 <osThreadNew+0x6e>
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	2b38      	cmp	r3, #56	; 0x38
 8006c68:	d805      	bhi.n	8006c76 <osThreadNew+0x6e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f003 0301 	and.w	r3, r3, #1
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d001      	beq.n	8006c7a <osThreadNew+0x72>
        return (NULL);
 8006c76:	2300      	movs	r3, #0
 8006c78:	e054      	b.n	8006d24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d003      	beq.n	8006c8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d00e      	beq.n	8006cb0 <osThreadNew+0xa8>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68db      	ldr	r3, [r3, #12]
 8006c96:	2bbb      	cmp	r3, #187	; 0xbb
 8006c98:	d90a      	bls.n	8006cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d006      	beq.n	8006cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	695b      	ldr	r3, [r3, #20]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d002      	beq.n	8006cb0 <osThreadNew+0xa8>
        mem = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61bb      	str	r3, [r7, #24]
 8006cae:	e010      	b.n	8006cd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d10c      	bne.n	8006cd2 <osThreadNew+0xca>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d108      	bne.n	8006cd2 <osThreadNew+0xca>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <osThreadNew+0xca>
          mem = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61bb      	str	r3, [r7, #24]
 8006ccc:	e001      	b.n	8006cd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d110      	bne.n	8006cfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006ce0:	9202      	str	r2, [sp, #8]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	6a3a      	ldr	r2, [r7, #32]
 8006cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f001 fa46 	bl	8008180 <xTaskCreateStatic>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	e013      	b.n	8006d22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d110      	bne.n	8006d22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	b29a      	uxth	r2, r3
 8006d04:	f107 0310 	add.w	r3, r7, #16
 8006d08:	9301      	str	r3, [sp, #4]
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f001 fa91 	bl	800823a <xTaskCreate>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d001      	beq.n	8006d22 <osThreadNew+0x11a>
            hTask = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006d22:	693b      	ldr	r3, [r7, #16]
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3728      	adds	r7, #40	; 0x28
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d34:	f3ef 8305 	mrs	r3, IPSR
 8006d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8006d3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <osDelay+0x1c>
    stat = osErrorISR;
 8006d40:	f06f 0305 	mvn.w	r3, #5
 8006d44:	60fb      	str	r3, [r7, #12]
 8006d46:	e007      	b.n	8006d58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fbcc 	bl	80084f0 <vTaskDelay>
    }
  }

  return (stat);
 8006d58:	68fb      	ldr	r3, [r7, #12]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
	...

08006d64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <vApplicationGetIdleTaskMemory+0x2c>)
 8006d74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	4a06      	ldr	r2, [pc, #24]	; (8006d94 <vApplicationGetIdleTaskMemory+0x30>)
 8006d7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2280      	movs	r2, #128	; 0x80
 8006d80:	601a      	str	r2, [r3, #0]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	20000e6c 	.word	0x20000e6c
 8006d94:	20000f28 	.word	0x20000f28

08006d98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	60f8      	str	r0, [r7, #12]
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	4a07      	ldr	r2, [pc, #28]	; (8006dc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8006da8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	4a06      	ldr	r2, [pc, #24]	; (8006dc8 <vApplicationGetTimerTaskMemory+0x30>)
 8006dae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006db6:	601a      	str	r2, [r3, #0]
}
 8006db8:	bf00      	nop
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr
 8006dc4:	20001128 	.word	0x20001128
 8006dc8:	200011e4 	.word	0x200011e4

08006dcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006dd8:	f001 fc2e 	bl	8008638 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006ddc:	4b5b      	ldr	r3, [pc, #364]	; (8006f4c <pvPortMalloc+0x180>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d101      	bne.n	8006de8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006de4:	f000 f920 	bl	8007028 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006de8:	4b59      	ldr	r3, [pc, #356]	; (8006f50 <pvPortMalloc+0x184>)
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4013      	ands	r3, r2
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f040 8093 	bne.w	8006f1c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d01d      	beq.n	8006e38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4413      	add	r3, r2
 8006e02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d014      	beq.n	8006e38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f023 0307 	bic.w	r3, r3, #7
 8006e14:	3308      	adds	r3, #8
 8006e16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f003 0307 	and.w	r3, r3, #7
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00a      	beq.n	8006e38 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d06e      	beq.n	8006f1c <pvPortMalloc+0x150>
 8006e3e:	4b45      	ldr	r3, [pc, #276]	; (8006f54 <pvPortMalloc+0x188>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	429a      	cmp	r2, r3
 8006e46:	d869      	bhi.n	8006f1c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006e48:	4b43      	ldr	r3, [pc, #268]	; (8006f58 <pvPortMalloc+0x18c>)
 8006e4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006e4c:	4b42      	ldr	r3, [pc, #264]	; (8006f58 <pvPortMalloc+0x18c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e52:	e004      	b.n	8006e5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d903      	bls.n	8006e70 <pvPortMalloc+0xa4>
 8006e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1f1      	bne.n	8006e54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e70:	4b36      	ldr	r3, [pc, #216]	; (8006f4c <pvPortMalloc+0x180>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d050      	beq.n	8006f1c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2208      	movs	r2, #8
 8006e80:	4413      	add	r3, r2
 8006e82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	6a3b      	ldr	r3, [r7, #32]
 8006e8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	1ad2      	subs	r2, r2, r3
 8006e94:	2308      	movs	r3, #8
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d91f      	bls.n	8006edc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d00a      	beq.n	8006ec4 <pvPortMalloc+0xf8>
	__asm volatile
 8006eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb2:	f383 8811 	msr	BASEPRI, r3
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	613b      	str	r3, [r7, #16]
}
 8006ec0:	bf00      	nop
 8006ec2:	e7fe      	b.n	8006ec2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	1ad2      	subs	r2, r2, r3
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ed6:	69b8      	ldr	r0, [r7, #24]
 8006ed8:	f000 f908 	bl	80070ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006edc:	4b1d      	ldr	r3, [pc, #116]	; (8006f54 <pvPortMalloc+0x188>)
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	4a1b      	ldr	r2, [pc, #108]	; (8006f54 <pvPortMalloc+0x188>)
 8006ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006eea:	4b1a      	ldr	r3, [pc, #104]	; (8006f54 <pvPortMalloc+0x188>)
 8006eec:	681a      	ldr	r2, [r3, #0]
 8006eee:	4b1b      	ldr	r3, [pc, #108]	; (8006f5c <pvPortMalloc+0x190>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d203      	bcs.n	8006efe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ef6:	4b17      	ldr	r3, [pc, #92]	; (8006f54 <pvPortMalloc+0x188>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <pvPortMalloc+0x190>)
 8006efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <pvPortMalloc+0x184>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	431a      	orrs	r2, r3
 8006f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	2200      	movs	r2, #0
 8006f10:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006f12:	4b13      	ldr	r3, [pc, #76]	; (8006f60 <pvPortMalloc+0x194>)
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	3301      	adds	r3, #1
 8006f18:	4a11      	ldr	r2, [pc, #68]	; (8006f60 <pvPortMalloc+0x194>)
 8006f1a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006f1c:	f001 fb9a 	bl	8008654 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f003 0307 	and.w	r3, r3, #7
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <pvPortMalloc+0x174>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	60fb      	str	r3, [r7, #12]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <pvPortMalloc+0x172>
	return pvReturn;
 8006f40:	69fb      	ldr	r3, [r7, #28]
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3728      	adds	r7, #40	; 0x28
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	200051ec 	.word	0x200051ec
 8006f50:	20005200 	.word	0x20005200
 8006f54:	200051f0 	.word	0x200051f0
 8006f58:	200051e4 	.word	0x200051e4
 8006f5c:	200051f4 	.word	0x200051f4
 8006f60:	200051f8 	.word	0x200051f8

08006f64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d04d      	beq.n	8007012 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f76:	2308      	movs	r3, #8
 8006f78:	425b      	negs	r3, r3
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	4b24      	ldr	r3, [pc, #144]	; (800701c <vPortFree+0xb8>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10a      	bne.n	8006fa8 <vPortFree+0x44>
	__asm volatile
 8006f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f96:	f383 8811 	msr	BASEPRI, r3
 8006f9a:	f3bf 8f6f 	isb	sy
 8006f9e:	f3bf 8f4f 	dsb	sy
 8006fa2:	60fb      	str	r3, [r7, #12]
}
 8006fa4:	bf00      	nop
 8006fa6:	e7fe      	b.n	8006fa6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00a      	beq.n	8006fc6 <vPortFree+0x62>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60bb      	str	r3, [r7, #8]
}
 8006fc2:	bf00      	nop
 8006fc4:	e7fe      	b.n	8006fc4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	4b14      	ldr	r3, [pc, #80]	; (800701c <vPortFree+0xb8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4013      	ands	r3, r2
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d01e      	beq.n	8007012 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006fd4:	693b      	ldr	r3, [r7, #16]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d11a      	bne.n	8007012 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	685a      	ldr	r2, [r3, #4]
 8006fe0:	4b0e      	ldr	r3, [pc, #56]	; (800701c <vPortFree+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	43db      	mvns	r3, r3
 8006fe6:	401a      	ands	r2, r3
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006fec:	f001 fb24 	bl	8008638 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <vPortFree+0xbc>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	4a09      	ldr	r2, [pc, #36]	; (8007020 <vPortFree+0xbc>)
 8006ffc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006ffe:	6938      	ldr	r0, [r7, #16]
 8007000:	f000 f874 	bl	80070ec <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007004:	4b07      	ldr	r3, [pc, #28]	; (8007024 <vPortFree+0xc0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	4a06      	ldr	r2, [pc, #24]	; (8007024 <vPortFree+0xc0>)
 800700c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800700e:	f001 fb21 	bl	8008654 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007012:	bf00      	nop
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20005200 	.word	0x20005200
 8007020:	200051f0 	.word	0x200051f0
 8007024:	200051fc 	.word	0x200051fc

08007028 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800702e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007032:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007034:	4b27      	ldr	r3, [pc, #156]	; (80070d4 <prvHeapInit+0xac>)
 8007036:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00c      	beq.n	800705c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3307      	adds	r3, #7
 8007046:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 0307 	bic.w	r3, r3, #7
 800704e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	4a1f      	ldr	r2, [pc, #124]	; (80070d4 <prvHeapInit+0xac>)
 8007058:	4413      	add	r3, r2
 800705a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007060:	4a1d      	ldr	r2, [pc, #116]	; (80070d8 <prvHeapInit+0xb0>)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007066:	4b1c      	ldr	r3, [pc, #112]	; (80070d8 <prvHeapInit+0xb0>)
 8007068:	2200      	movs	r2, #0
 800706a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68ba      	ldr	r2, [r7, #8]
 8007070:	4413      	add	r3, r2
 8007072:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007074:	2208      	movs	r2, #8
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f023 0307 	bic.w	r3, r3, #7
 8007082:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4a15      	ldr	r2, [pc, #84]	; (80070dc <prvHeapInit+0xb4>)
 8007088:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <prvHeapInit+0xb4>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007092:	4b12      	ldr	r3, [pc, #72]	; (80070dc <prvHeapInit+0xb4>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	1ad2      	subs	r2, r2, r3
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <prvHeapInit+0xb4>)
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	4a0a      	ldr	r2, [pc, #40]	; (80070e0 <prvHeapInit+0xb8>)
 80070b6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4a09      	ldr	r2, [pc, #36]	; (80070e4 <prvHeapInit+0xbc>)
 80070be:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80070c0:	4b09      	ldr	r3, [pc, #36]	; (80070e8 <prvHeapInit+0xc0>)
 80070c2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80070c6:	601a      	str	r2, [r3, #0]
}
 80070c8:	bf00      	nop
 80070ca:	3714      	adds	r7, #20
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr
 80070d4:	200015e4 	.word	0x200015e4
 80070d8:	200051e4 	.word	0x200051e4
 80070dc:	200051ec 	.word	0x200051ec
 80070e0:	200051f4 	.word	0x200051f4
 80070e4:	200051f0 	.word	0x200051f0
 80070e8:	20005200 	.word	0x20005200

080070ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80070f4:	4b28      	ldr	r3, [pc, #160]	; (8007198 <prvInsertBlockIntoFreeList+0xac>)
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	e002      	b.n	8007100 <prvInsertBlockIntoFreeList+0x14>
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	60fb      	str	r3, [r7, #12]
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	429a      	cmp	r2, r3
 8007108:	d8f7      	bhi.n	80070fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	429a      	cmp	r2, r3
 800711a:	d108      	bne.n	800712e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	685a      	ldr	r2, [r3, #4]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	441a      	add	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	441a      	add	r2, r3
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d118      	bne.n	8007174 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681a      	ldr	r2, [r3, #0]
 8007146:	4b15      	ldr	r3, [pc, #84]	; (800719c <prvInsertBlockIntoFreeList+0xb0>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	429a      	cmp	r2, r3
 800714c:	d00d      	beq.n	800716a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685a      	ldr	r2, [r3, #4]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	441a      	add	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	601a      	str	r2, [r3, #0]
 8007168:	e008      	b.n	800717c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800716a:	4b0c      	ldr	r3, [pc, #48]	; (800719c <prvInsertBlockIntoFreeList+0xb0>)
 800716c:	681a      	ldr	r2, [r3, #0]
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	e003      	b.n	800717c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	429a      	cmp	r2, r3
 8007182:	d002      	beq.n	800718a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800718a:	bf00      	nop
 800718c:	3714      	adds	r7, #20
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	200051e4 	.word	0x200051e4
 800719c:	200051ec 	.word	0x200051ec

080071a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f103 0208 	add.w	r2, r3, #8
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f04f 32ff 	mov.w	r2, #4294967295
 80071b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f103 0208 	add.w	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f103 0208 	add.w	r2, r3, #8
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80071d4:	bf00      	nop
 80071d6:	370c      	adds	r7, #12
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr

080071e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071ee:	bf00      	nop
 80071f0:	370c      	adds	r7, #12
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	68fa      	ldr	r2, [r7, #12]
 800720e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689a      	ldr	r2, [r3, #8]
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	683a      	ldr	r2, [r7, #0]
 800721e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	683a      	ldr	r2, [r7, #0]
 8007224:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	1c5a      	adds	r2, r3, #1
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
}
 8007236:	bf00      	nop
 8007238:	3714      	adds	r7, #20
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007242:	b480      	push	{r7}
 8007244:	b085      	sub	sp, #20
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
 800724a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d103      	bne.n	8007262 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	60fb      	str	r3, [r7, #12]
 8007260:	e00c      	b.n	800727c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	3308      	adds	r3, #8
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	e002      	b.n	8007270 <vListInsert+0x2e>
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	685b      	ldr	r3, [r3, #4]
 800726e:	60fb      	str	r3, [r7, #12]
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	429a      	cmp	r2, r3
 800727a:	d2f6      	bcs.n	800726a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	683a      	ldr	r2, [r7, #0]
 800728a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	687a      	ldr	r2, [r7, #4]
 800729c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	1c5a      	adds	r2, r3, #1
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	601a      	str	r2, [r3, #0]
}
 80072a8:	bf00      	nop
 80072aa:	3714      	adds	r7, #20
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	687a      	ldr	r2, [r7, #4]
 80072c8:	6892      	ldr	r2, [r2, #8]
 80072ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	6852      	ldr	r2, [r2, #4]
 80072d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d103      	bne.n	80072e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689a      	ldr	r2, [r3, #8]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	1e5a      	subs	r2, r3, #1
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3714      	adds	r7, #20
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	3b04      	subs	r3, #4
 8007318:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007320:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	3b04      	subs	r3, #4
 8007326:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	f023 0201 	bic.w	r2, r3, #1
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b04      	subs	r3, #4
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007338:	4a0c      	ldr	r2, [pc, #48]	; (800736c <pxPortInitialiseStack+0x64>)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b14      	subs	r3, #20
 8007342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3b04      	subs	r3, #4
 800734e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f06f 0202 	mvn.w	r2, #2
 8007356:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	3b20      	subs	r3, #32
 800735c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800735e:	68fb      	ldr	r3, [r7, #12]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3714      	adds	r7, #20
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	08007371 	.word	0x08007371

08007370 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800737a:	4b12      	ldr	r3, [pc, #72]	; (80073c4 <prvTaskExitError+0x54>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d00a      	beq.n	800739a <prvTaskExitError+0x2a>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	60fb      	str	r3, [r7, #12]
}
 8007396:	bf00      	nop
 8007398:	e7fe      	b.n	8007398 <prvTaskExitError+0x28>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	60bb      	str	r3, [r7, #8]
}
 80073ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073ae:	bf00      	nop
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d0fc      	beq.n	80073b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073b6:	bf00      	nop
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	2000020c 	.word	0x2000020c
	...

080073d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073d0:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <pxCurrentTCBConst2>)
 80073d2:	6819      	ldr	r1, [r3, #0]
 80073d4:	6808      	ldr	r0, [r1, #0]
 80073d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073da:	f380 8809 	msr	PSP, r0
 80073de:	f3bf 8f6f 	isb	sy
 80073e2:	f04f 0000 	mov.w	r0, #0
 80073e6:	f380 8811 	msr	BASEPRI, r0
 80073ea:	4770      	bx	lr
 80073ec:	f3af 8000 	nop.w

080073f0 <pxCurrentTCBConst2>:
 80073f0:	2000524c 	.word	0x2000524c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073f8:	4808      	ldr	r0, [pc, #32]	; (800741c <prvPortStartFirstTask+0x24>)
 80073fa:	6800      	ldr	r0, [r0, #0]
 80073fc:	6800      	ldr	r0, [r0, #0]
 80073fe:	f380 8808 	msr	MSP, r0
 8007402:	f04f 0000 	mov.w	r0, #0
 8007406:	f380 8814 	msr	CONTROL, r0
 800740a:	b662      	cpsie	i
 800740c:	b661      	cpsie	f
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	f3bf 8f6f 	isb	sy
 8007416:	df00      	svc	0
 8007418:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800741a:	bf00      	nop
 800741c:	e000ed08 	.word	0xe000ed08

08007420 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007426:	4b46      	ldr	r3, [pc, #280]	; (8007540 <xPortStartScheduler+0x120>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a46      	ldr	r2, [pc, #280]	; (8007544 <xPortStartScheduler+0x124>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d10a      	bne.n	8007446 <xPortStartScheduler+0x26>
	__asm volatile
 8007430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007434:	f383 8811 	msr	BASEPRI, r3
 8007438:	f3bf 8f6f 	isb	sy
 800743c:	f3bf 8f4f 	dsb	sy
 8007440:	613b      	str	r3, [r7, #16]
}
 8007442:	bf00      	nop
 8007444:	e7fe      	b.n	8007444 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007446:	4b3e      	ldr	r3, [pc, #248]	; (8007540 <xPortStartScheduler+0x120>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a3f      	ldr	r2, [pc, #252]	; (8007548 <xPortStartScheduler+0x128>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d10a      	bne.n	8007466 <xPortStartScheduler+0x46>
	__asm volatile
 8007450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	60fb      	str	r3, [r7, #12]
}
 8007462:	bf00      	nop
 8007464:	e7fe      	b.n	8007464 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <xPortStartScheduler+0x12c>)
 8007468:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	22ff      	movs	r2, #255	; 0xff
 8007476:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	781b      	ldrb	r3, [r3, #0]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b31      	ldr	r3, [pc, #196]	; (8007550 <xPortStartScheduler+0x130>)
 800748c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800748e:	4b31      	ldr	r3, [pc, #196]	; (8007554 <xPortStartScheduler+0x134>)
 8007490:	2207      	movs	r2, #7
 8007492:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007494:	e009      	b.n	80074aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007496:	4b2f      	ldr	r3, [pc, #188]	; (8007554 <xPortStartScheduler+0x134>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3b01      	subs	r3, #1
 800749c:	4a2d      	ldr	r2, [pc, #180]	; (8007554 <xPortStartScheduler+0x134>)
 800749e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	005b      	lsls	r3, r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074aa:	78fb      	ldrb	r3, [r7, #3]
 80074ac:	b2db      	uxtb	r3, r3
 80074ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074b2:	2b80      	cmp	r3, #128	; 0x80
 80074b4:	d0ef      	beq.n	8007496 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074b6:	4b27      	ldr	r3, [pc, #156]	; (8007554 <xPortStartScheduler+0x134>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f1c3 0307 	rsb	r3, r3, #7
 80074be:	2b04      	cmp	r3, #4
 80074c0:	d00a      	beq.n	80074d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	60bb      	str	r3, [r7, #8]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074d8:	4b1e      	ldr	r3, [pc, #120]	; (8007554 <xPortStartScheduler+0x134>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	021b      	lsls	r3, r3, #8
 80074de:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <xPortStartScheduler+0x134>)
 80074e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <xPortStartScheduler+0x134>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80074ea:	4a1a      	ldr	r2, [pc, #104]	; (8007554 <xPortStartScheduler+0x134>)
 80074ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	b2da      	uxtb	r2, r3
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074f6:	4b18      	ldr	r3, [pc, #96]	; (8007558 <xPortStartScheduler+0x138>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a17      	ldr	r2, [pc, #92]	; (8007558 <xPortStartScheduler+0x138>)
 80074fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007500:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007502:	4b15      	ldr	r3, [pc, #84]	; (8007558 <xPortStartScheduler+0x138>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4a14      	ldr	r2, [pc, #80]	; (8007558 <xPortStartScheduler+0x138>)
 8007508:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800750c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800750e:	f000 f8dd 	bl	80076cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007512:	4b12      	ldr	r3, [pc, #72]	; (800755c <xPortStartScheduler+0x13c>)
 8007514:	2200      	movs	r2, #0
 8007516:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007518:	f000 f8fc 	bl	8007714 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800751c:	4b10      	ldr	r3, [pc, #64]	; (8007560 <xPortStartScheduler+0x140>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a0f      	ldr	r2, [pc, #60]	; (8007560 <xPortStartScheduler+0x140>)
 8007522:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007526:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007528:	f7ff ff66 	bl	80073f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800752c:	f001 f9fa 	bl	8008924 <vTaskSwitchContext>
	prvTaskExitError();
 8007530:	f7ff ff1e 	bl	8007370 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	3718      	adds	r7, #24
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	e000ed00 	.word	0xe000ed00
 8007544:	410fc271 	.word	0x410fc271
 8007548:	410fc270 	.word	0x410fc270
 800754c:	e000e400 	.word	0xe000e400
 8007550:	20005204 	.word	0x20005204
 8007554:	20005208 	.word	0x20005208
 8007558:	e000ed20 	.word	0xe000ed20
 800755c:	2000020c 	.word	0x2000020c
 8007560:	e000ef34 	.word	0xe000ef34

08007564 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
	__asm volatile
 800756a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800756e:	f383 8811 	msr	BASEPRI, r3
 8007572:	f3bf 8f6f 	isb	sy
 8007576:	f3bf 8f4f 	dsb	sy
 800757a:	607b      	str	r3, [r7, #4]
}
 800757c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800757e:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <vPortEnterCritical+0x58>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3301      	adds	r3, #1
 8007584:	4a0d      	ldr	r2, [pc, #52]	; (80075bc <vPortEnterCritical+0x58>)
 8007586:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <vPortEnterCritical+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d10f      	bne.n	80075b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007590:	4b0b      	ldr	r3, [pc, #44]	; (80075c0 <vPortEnterCritical+0x5c>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00a      	beq.n	80075b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	603b      	str	r3, [r7, #0]
}
 80075ac:	bf00      	nop
 80075ae:	e7fe      	b.n	80075ae <vPortEnterCritical+0x4a>
	}
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	2000020c 	.word	0x2000020c
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075ca:	4b12      	ldr	r3, [pc, #72]	; (8007614 <vPortExitCritical+0x50>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d10a      	bne.n	80075e8 <vPortExitCritical+0x24>
	__asm volatile
 80075d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d6:	f383 8811 	msr	BASEPRI, r3
 80075da:	f3bf 8f6f 	isb	sy
 80075de:	f3bf 8f4f 	dsb	sy
 80075e2:	607b      	str	r3, [r7, #4]
}
 80075e4:	bf00      	nop
 80075e6:	e7fe      	b.n	80075e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <vPortExitCritical+0x50>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <vPortExitCritical+0x50>)
 80075f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075f2:	4b08      	ldr	r3, [pc, #32]	; (8007614 <vPortExitCritical+0x50>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d105      	bne.n	8007606 <vPortExitCritical+0x42>
 80075fa:	2300      	movs	r3, #0
 80075fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007604:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	2000020c 	.word	0x2000020c
	...

08007620 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007620:	f3ef 8009 	mrs	r0, PSP
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4b15      	ldr	r3, [pc, #84]	; (8007680 <pxCurrentTCBConst>)
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	f01e 0f10 	tst.w	lr, #16
 8007630:	bf08      	it	eq
 8007632:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007636:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763a:	6010      	str	r0, [r2, #0]
 800763c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007640:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007644:	f380 8811 	msr	BASEPRI, r0
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f001 f968 	bl	8008924 <vTaskSwitchContext>
 8007654:	f04f 0000 	mov.w	r0, #0
 8007658:	f380 8811 	msr	BASEPRI, r0
 800765c:	bc09      	pop	{r0, r3}
 800765e:	6819      	ldr	r1, [r3, #0]
 8007660:	6808      	ldr	r0, [r1, #0]
 8007662:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007666:	f01e 0f10 	tst.w	lr, #16
 800766a:	bf08      	it	eq
 800766c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007670:	f380 8809 	msr	PSP, r0
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w

08007680 <pxCurrentTCBConst>:
 8007680:	2000524c 	.word	0x2000524c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007684:	bf00      	nop
 8007686:	bf00      	nop

08007688 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	607b      	str	r3, [r7, #4]
}
 80076a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076a2:	f001 f885 	bl	80087b0 <xTaskIncrementTick>
 80076a6:	4603      	mov	r3, r0
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076ac:	4b06      	ldr	r3, [pc, #24]	; (80076c8 <xPortSysTickHandler+0x40>)
 80076ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b2:	601a      	str	r2, [r3, #0]
 80076b4:	2300      	movs	r3, #0
 80076b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	f383 8811 	msr	BASEPRI, r3
}
 80076be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076c0:	bf00      	nop
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	e000ed04 	.word	0xe000ed04

080076cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076cc:	b480      	push	{r7}
 80076ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076d0:	4b0b      	ldr	r3, [pc, #44]	; (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076d6:	4b0b      	ldr	r3, [pc, #44]	; (8007704 <vPortSetupTimerInterrupt+0x38>)
 80076d8:	2200      	movs	r2, #0
 80076da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076dc:	4b0a      	ldr	r3, [pc, #40]	; (8007708 <vPortSetupTimerInterrupt+0x3c>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	; (800770c <vPortSetupTimerInterrupt+0x40>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	099b      	lsrs	r3, r3, #6
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <vPortSetupTimerInterrupt+0x44>)
 80076ea:	3b01      	subs	r3, #1
 80076ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076ee:	4b04      	ldr	r3, [pc, #16]	; (8007700 <vPortSetupTimerInterrupt+0x34>)
 80076f0:	2207      	movs	r2, #7
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	e000e010 	.word	0xe000e010
 8007704:	e000e018 	.word	0xe000e018
 8007708:	20000200 	.word	0x20000200
 800770c:	10624dd3 	.word	0x10624dd3
 8007710:	e000e014 	.word	0xe000e014

08007714 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007714:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007724 <vPortEnableVFP+0x10>
 8007718:	6801      	ldr	r1, [r0, #0]
 800771a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800771e:	6001      	str	r1, [r0, #0]
 8007720:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007722:	bf00      	nop
 8007724:	e000ed88 	.word	0xe000ed88

08007728 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800772e:	f3ef 8305 	mrs	r3, IPSR
 8007732:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2b0f      	cmp	r3, #15
 8007738:	d914      	bls.n	8007764 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800773a:	4a17      	ldr	r2, [pc, #92]	; (8007798 <vPortValidateInterruptPriority+0x70>)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	4413      	add	r3, r2
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007744:	4b15      	ldr	r3, [pc, #84]	; (800779c <vPortValidateInterruptPriority+0x74>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	7afa      	ldrb	r2, [r7, #11]
 800774a:	429a      	cmp	r2, r3
 800774c:	d20a      	bcs.n	8007764 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007764:	4b0e      	ldr	r3, [pc, #56]	; (80077a0 <vPortValidateInterruptPriority+0x78>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <vPortValidateInterruptPriority+0x7c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	429a      	cmp	r2, r3
 8007772:	d90a      	bls.n	800778a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	603b      	str	r3, [r7, #0]
}
 8007786:	bf00      	nop
 8007788:	e7fe      	b.n	8007788 <vPortValidateInterruptPriority+0x60>
	}
 800778a:	bf00      	nop
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	e000e3f0 	.word	0xe000e3f0
 800779c:	20005204 	.word	0x20005204
 80077a0:	e000ed0c 	.word	0xe000ed0c
 80077a4:	20005208 	.word	0x20005208

080077a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80077bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c0:	f383 8811 	msr	BASEPRI, r3
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	f3bf 8f4f 	dsb	sy
 80077cc:	60bb      	str	r3, [r7, #8]
}
 80077ce:	bf00      	nop
 80077d0:	e7fe      	b.n	80077d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80077d2:	f7ff fec7 	bl	8007564 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077de:	68f9      	ldr	r1, [r7, #12]
 80077e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80077e2:	fb01 f303 	mul.w	r3, r1, r3
 80077e6:	441a      	add	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007802:	3b01      	subs	r3, #1
 8007804:	68f9      	ldr	r1, [r7, #12]
 8007806:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007808:	fb01 f303 	mul.w	r3, r1, r3
 800780c:	441a      	add	r2, r3
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	22ff      	movs	r2, #255	; 0xff
 8007816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	22ff      	movs	r2, #255	; 0xff
 800781e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d114      	bne.n	8007852 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d01a      	beq.n	8007866 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3310      	adds	r3, #16
 8007834:	4618      	mov	r0, r3
 8007836:	f001 f929 	bl	8008a8c <xTaskRemoveFromEventList>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d012      	beq.n	8007866 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007840:	4b0c      	ldr	r3, [pc, #48]	; (8007874 <xQueueGenericReset+0xcc>)
 8007842:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007846:	601a      	str	r2, [r3, #0]
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	e009      	b.n	8007866 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	3310      	adds	r3, #16
 8007856:	4618      	mov	r0, r3
 8007858:	f7ff fca2 	bl	80071a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	3324      	adds	r3, #36	; 0x24
 8007860:	4618      	mov	r0, r3
 8007862:	f7ff fc9d 	bl	80071a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007866:	f7ff fead 	bl	80075c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800786a:	2301      	movs	r3, #1
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	e000ed04 	.word	0xe000ed04

08007878 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007878:	b580      	push	{r7, lr}
 800787a:	b08e      	sub	sp, #56	; 0x38
 800787c:	af02      	add	r7, sp, #8
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <xQueueGenericCreateStatic+0x52>
 80078c4:	68bb      	ldr	r3, [r7, #8]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d001      	beq.n	80078ce <xQueueGenericCreateStatic+0x56>
 80078ca:	2301      	movs	r3, #1
 80078cc:	e000      	b.n	80078d0 <xQueueGenericCreateStatic+0x58>
 80078ce:	2300      	movs	r3, #0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10a      	bne.n	80078ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	e7fe      	b.n	80078e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d102      	bne.n	80078f6 <xQueueGenericCreateStatic+0x7e>
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <xQueueGenericCreateStatic+0x82>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <xQueueGenericCreateStatic+0x84>
 80078fa:	2300      	movs	r3, #0
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d10a      	bne.n	8007916 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	61fb      	str	r3, [r7, #28]
}
 8007912:	bf00      	nop
 8007914:	e7fe      	b.n	8007914 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007916:	2350      	movs	r3, #80	; 0x50
 8007918:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b50      	cmp	r3, #80	; 0x50
 800791e:	d00a      	beq.n	8007936 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	61bb      	str	r3, [r7, #24]
}
 8007932:	bf00      	nop
 8007934:	e7fe      	b.n	8007934 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007936:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800793c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800793e:	2b00      	cmp	r3, #0
 8007940:	d00d      	beq.n	800795e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007944:	2201      	movs	r2, #1
 8007946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800794a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800794e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	4613      	mov	r3, r2
 8007954:	687a      	ldr	r2, [r7, #4]
 8007956:	68b9      	ldr	r1, [r7, #8]
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 f805 	bl	8007968 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800795e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007960:	4618      	mov	r0, r3
 8007962:	3730      	adds	r7, #48	; 0x30
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	60b9      	str	r1, [r7, #8]
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d103      	bne.n	8007984 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	601a      	str	r2, [r3, #0]
 8007982:	e002      	b.n	800798a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	68fa      	ldr	r2, [r7, #12]
 800798e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007990:	69bb      	ldr	r3, [r7, #24]
 8007992:	68ba      	ldr	r2, [r7, #8]
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007996:	2101      	movs	r1, #1
 8007998:	69b8      	ldr	r0, [r7, #24]
 800799a:	f7ff ff05 	bl	80077a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	78fa      	ldrb	r2, [r7, #3]
 80079a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80079a6:	bf00      	nop
 80079a8:	3710      	adds	r7, #16
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
	...

080079b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b08e      	sub	sp, #56	; 0x38
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
 80079bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80079be:	2300      	movs	r3, #0
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80079c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10a      	bne.n	80079e2 <xQueueGenericSend+0x32>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079de:	bf00      	nop
 80079e0:	e7fe      	b.n	80079e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d103      	bne.n	80079f0 <xQueueGenericSend+0x40>
 80079e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <xQueueGenericSend+0x44>
 80079f0:	2301      	movs	r3, #1
 80079f2:	e000      	b.n	80079f6 <xQueueGenericSend+0x46>
 80079f4:	2300      	movs	r3, #0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10a      	bne.n	8007a10 <xQueueGenericSend+0x60>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d103      	bne.n	8007a1e <xQueueGenericSend+0x6e>
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d101      	bne.n	8007a22 <xQueueGenericSend+0x72>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <xQueueGenericSend+0x74>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <xQueueGenericSend+0x8e>
	__asm volatile
 8007a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2c:	f383 8811 	msr	BASEPRI, r3
 8007a30:	f3bf 8f6f 	isb	sy
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	623b      	str	r3, [r7, #32]
}
 8007a3a:	bf00      	nop
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a3e:	f001 f9e7 	bl	8008e10 <xTaskGetSchedulerState>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d102      	bne.n	8007a4e <xQueueGenericSend+0x9e>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d101      	bne.n	8007a52 <xQueueGenericSend+0xa2>
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e000      	b.n	8007a54 <xQueueGenericSend+0xa4>
 8007a52:	2300      	movs	r3, #0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <xQueueGenericSend+0xbe>
	__asm volatile
 8007a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5c:	f383 8811 	msr	BASEPRI, r3
 8007a60:	f3bf 8f6f 	isb	sy
 8007a64:	f3bf 8f4f 	dsb	sy
 8007a68:	61fb      	str	r3, [r7, #28]
}
 8007a6a:	bf00      	nop
 8007a6c:	e7fe      	b.n	8007a6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a6e:	f7ff fd79 	bl	8007564 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d302      	bcc.n	8007a84 <xQueueGenericSend+0xd4>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b02      	cmp	r3, #2
 8007a82:	d129      	bne.n	8007ad8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a84:	683a      	ldr	r2, [r7, #0]
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007a8a:	f000 fa0b 	bl	8007ea4 <prvCopyDataToQueue>
 8007a8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d010      	beq.n	8007aba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	3324      	adds	r3, #36	; 0x24
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f000 fff5 	bl	8008a8c <xTaskRemoveFromEventList>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d013      	beq.n	8007ad0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007aa8:	4b3f      	ldr	r3, [pc, #252]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007aaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007aae:	601a      	str	r2, [r3, #0]
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	e00a      	b.n	8007ad0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d007      	beq.n	8007ad0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ac0:	4b39      	ldr	r3, [pc, #228]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007ac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ac6:	601a      	str	r2, [r3, #0]
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007ad0:	f7ff fd78 	bl	80075c4 <vPortExitCritical>
				return pdPASS;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e063      	b.n	8007ba0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d103      	bne.n	8007ae6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ade:	f7ff fd71 	bl	80075c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e05c      	b.n	8007ba0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d106      	bne.n	8007afa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f82f 	bl	8008b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007af6:	2301      	movs	r3, #1
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007afa:	f7ff fd63 	bl	80075c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007afe:	f000 fd9b 	bl	8008638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b02:	f7ff fd2f 	bl	8007564 <vPortEnterCritical>
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b0c:	b25b      	sxtb	r3, r3
 8007b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b12:	d103      	bne.n	8007b1c <xQueueGenericSend+0x16c>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	2200      	movs	r2, #0
 8007b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b22:	b25b      	sxtb	r3, r3
 8007b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b28:	d103      	bne.n	8007b32 <xQueueGenericSend+0x182>
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b32:	f7ff fd47 	bl	80075c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b36:	1d3a      	adds	r2, r7, #4
 8007b38:	f107 0314 	add.w	r3, r7, #20
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f001 f81e 	bl	8008b80 <xTaskCheckForTimeOut>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d124      	bne.n	8007b94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007b4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b4c:	f000 faa2 	bl	8008094 <prvIsQueueFull>
 8007b50:	4603      	mov	r3, r0
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d018      	beq.n	8007b88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b58:	3310      	adds	r3, #16
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 ff44 	bl	80089ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b66:	f000 fa2d 	bl	8007fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007b6a:	f000 fd73 	bl	8008654 <xTaskResumeAll>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f47f af7c 	bne.w	8007a6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007b76:	4b0c      	ldr	r3, [pc, #48]	; (8007ba8 <xQueueGenericSend+0x1f8>)
 8007b78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	f3bf 8f4f 	dsb	sy
 8007b82:	f3bf 8f6f 	isb	sy
 8007b86:	e772      	b.n	8007a6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b8a:	f000 fa1b 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b8e:	f000 fd61 	bl	8008654 <xTaskResumeAll>
 8007b92:	e76c      	b.n	8007a6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007b96:	f000 fa15 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9a:	f000 fd5b 	bl	8008654 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3738      	adds	r7, #56	; 0x38
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}
 8007ba8:	e000ed04 	.word	0xe000ed04

08007bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b090      	sub	sp, #64	; 0x40
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	60f8      	str	r0, [r7, #12]
 8007bb4:	60b9      	str	r1, [r7, #8]
 8007bb6:	607a      	str	r2, [r7, #4]
 8007bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10a      	bne.n	8007bda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc8:	f383 8811 	msr	BASEPRI, r3
 8007bcc:	f3bf 8f6f 	isb	sy
 8007bd0:	f3bf 8f4f 	dsb	sy
 8007bd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bda:	68bb      	ldr	r3, [r7, #8]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d103      	bne.n	8007be8 <xQueueGenericSendFromISR+0x3c>
 8007be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d101      	bne.n	8007bec <xQueueGenericSendFromISR+0x40>
 8007be8:	2301      	movs	r3, #1
 8007bea:	e000      	b.n	8007bee <xQueueGenericSendFromISR+0x42>
 8007bec:	2300      	movs	r3, #0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10a      	bne.n	8007c08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007c04:	bf00      	nop
 8007c06:	e7fe      	b.n	8007c06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d103      	bne.n	8007c16 <xQueueGenericSendFromISR+0x6a>
 8007c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <xQueueGenericSendFromISR+0x6e>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e000      	b.n	8007c1c <xQueueGenericSendFromISR+0x70>
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d10a      	bne.n	8007c36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c24:	f383 8811 	msr	BASEPRI, r3
 8007c28:	f3bf 8f6f 	isb	sy
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	623b      	str	r3, [r7, #32]
}
 8007c32:	bf00      	nop
 8007c34:	e7fe      	b.n	8007c34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c36:	f7ff fd77 	bl	8007728 <vPortValidateInterruptPriority>
	__asm volatile
 8007c3a:	f3ef 8211 	mrs	r2, BASEPRI
 8007c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	61fa      	str	r2, [r7, #28]
 8007c50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8007c52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d302      	bcc.n	8007c68 <xQueueGenericSendFromISR+0xbc>
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d12f      	bne.n	8007cc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	68b9      	ldr	r1, [r7, #8]
 8007c7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007c7e:	f000 f911 	bl	8007ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007c82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c8a:	d112      	bne.n	8007cb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c96:	3324      	adds	r3, #36	; 0x24
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 fef7 	bl	8008a8c <xTaskRemoveFromEventList>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00e      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
 8007cb0:	e007      	b.n	8007cc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007cb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	b2db      	uxtb	r3, r3
 8007cba:	b25a      	sxtb	r2, r3
 8007cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007cc6:	e001      	b.n	8007ccc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f383 8811 	msr	BASEPRI, r3
}
 8007cd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3740      	adds	r7, #64	; 0x40
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b08c      	sub	sp, #48	; 0x30
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d10a      	bne.n	8007d14 <xQueueReceive+0x30>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	623b      	str	r3, [r7, #32]
}
 8007d10:	bf00      	nop
 8007d12:	e7fe      	b.n	8007d12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <xQueueReceive+0x3e>
 8007d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d101      	bne.n	8007d26 <xQueueReceive+0x42>
 8007d22:	2301      	movs	r3, #1
 8007d24:	e000      	b.n	8007d28 <xQueueReceive+0x44>
 8007d26:	2300      	movs	r3, #0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d10a      	bne.n	8007d42 <xQueueReceive+0x5e>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	f383 8811 	msr	BASEPRI, r3
 8007d34:	f3bf 8f6f 	isb	sy
 8007d38:	f3bf 8f4f 	dsb	sy
 8007d3c:	61fb      	str	r3, [r7, #28]
}
 8007d3e:	bf00      	nop
 8007d40:	e7fe      	b.n	8007d40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007d42:	f001 f865 	bl	8008e10 <xTaskGetSchedulerState>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d102      	bne.n	8007d52 <xQueueReceive+0x6e>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d101      	bne.n	8007d56 <xQueueReceive+0x72>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e000      	b.n	8007d58 <xQueueReceive+0x74>
 8007d56:	2300      	movs	r3, #0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d10a      	bne.n	8007d72 <xQueueReceive+0x8e>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	61bb      	str	r3, [r7, #24]
}
 8007d6e:	bf00      	nop
 8007d70:	e7fe      	b.n	8007d70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007d72:	f7ff fbf7 	bl	8007564 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01f      	beq.n	8007dc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007d82:	68b9      	ldr	r1, [r7, #8]
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f000 f8f7 	bl	8007f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	1e5a      	subs	r2, r3, #1
 8007d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9c:	3310      	adds	r3, #16
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f000 fe74 	bl	8008a8c <xTaskRemoveFromEventList>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d007      	beq.n	8007dba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007daa:	4b3d      	ldr	r3, [pc, #244]	; (8007ea0 <xQueueReceive+0x1bc>)
 8007dac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007db0:	601a      	str	r2, [r3, #0]
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007dba:	f7ff fc03 	bl	80075c4 <vPortExitCritical>
				return pdPASS;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e069      	b.n	8007e96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d103      	bne.n	8007dd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007dc8:	f7ff fbfc 	bl	80075c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	e062      	b.n	8007e96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d106      	bne.n	8007de4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007dd6:	f107 0310 	add.w	r3, r7, #16
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f000 feba 	bl	8008b54 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007de4:	f7ff fbee 	bl	80075c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007de8:	f000 fc26 	bl	8008638 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007dec:	f7ff fbba 	bl	8007564 <vPortEnterCritical>
 8007df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007df6:	b25b      	sxtb	r3, r3
 8007df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dfc:	d103      	bne.n	8007e06 <xQueueReceive+0x122>
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2200      	movs	r2, #0
 8007e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e0c:	b25b      	sxtb	r3, r3
 8007e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e12:	d103      	bne.n	8007e1c <xQueueReceive+0x138>
 8007e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e16:	2200      	movs	r2, #0
 8007e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e1c:	f7ff fbd2 	bl	80075c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007e20:	1d3a      	adds	r2, r7, #4
 8007e22:	f107 0310 	add.w	r3, r7, #16
 8007e26:	4611      	mov	r1, r2
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 fea9 	bl	8008b80 <xTaskCheckForTimeOut>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d123      	bne.n	8007e7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e36:	f000 f917 	bl	8008068 <prvIsQueueEmpty>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d017      	beq.n	8007e70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e42:	3324      	adds	r3, #36	; 0x24
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	4611      	mov	r1, r2
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 fdcf 	bl	80089ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007e4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e50:	f000 f8b8 	bl	8007fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007e54:	f000 fbfe 	bl	8008654 <xTaskResumeAll>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d189      	bne.n	8007d72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007e5e:	4b10      	ldr	r3, [pc, #64]	; (8007ea0 <xQueueReceive+0x1bc>)
 8007e60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e64:	601a      	str	r2, [r3, #0]
 8007e66:	f3bf 8f4f 	dsb	sy
 8007e6a:	f3bf 8f6f 	isb	sy
 8007e6e:	e780      	b.n	8007d72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007e70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e72:	f000 f8a7 	bl	8007fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007e76:	f000 fbed 	bl	8008654 <xTaskResumeAll>
 8007e7a:	e77a      	b.n	8007d72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e7e:	f000 f8a1 	bl	8007fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007e82:	f000 fbe7 	bl	8008654 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e88:	f000 f8ee 	bl	8008068 <prvIsQueueEmpty>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f43f af6f 	beq.w	8007d72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3730      	adds	r7, #48	; 0x30
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	bd80      	pop	{r7, pc}
 8007e9e:	bf00      	nop
 8007ea0:	e000ed04 	.word	0xe000ed04

08007ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d10d      	bne.n	8007ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d14d      	bne.n	8007f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 ffbc 	bl	8008e4c <xTaskPriorityDisinherit>
 8007ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	609a      	str	r2, [r3, #8]
 8007edc:	e043      	b.n	8007f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d119      	bne.n	8007f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	6858      	ldr	r0, [r3, #4]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	461a      	mov	r2, r3
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	f001 fcec 	bl	80098cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007efc:	441a      	add	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	685a      	ldr	r2, [r3, #4]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d32b      	bcc.n	8007f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681a      	ldr	r2, [r3, #0]
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	605a      	str	r2, [r3, #4]
 8007f16:	e026      	b.n	8007f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68d8      	ldr	r0, [r3, #12]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f20:	461a      	mov	r2, r3
 8007f22:	68b9      	ldr	r1, [r7, #8]
 8007f24:	f001 fcd2 	bl	80098cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	68da      	ldr	r2, [r3, #12]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f30:	425b      	negs	r3, r3
 8007f32:	441a      	add	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d207      	bcs.n	8007f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	689a      	ldr	r2, [r3, #8]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4c:	425b      	negs	r3, r3
 8007f4e:	441a      	add	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d105      	bne.n	8007f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d002      	beq.n	8007f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f60:	693b      	ldr	r3, [r7, #16]
 8007f62:	3b01      	subs	r3, #1
 8007f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	1c5a      	adds	r2, r3, #1
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d018      	beq.n	8007fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	68da      	ldr	r2, [r3, #12]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f92:	441a      	add	r2, r3
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	68da      	ldr	r2, [r3, #12]
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	429a      	cmp	r2, r3
 8007fa2:	d303      	bcc.n	8007fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68d9      	ldr	r1, [r3, #12]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	6838      	ldr	r0, [r7, #0]
 8007fb8:	f001 fc88 	bl	80098cc <memcpy>
	}
}
 8007fbc:	bf00      	nop
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007fcc:	f7ff faca 	bl	8007564 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007fd8:	e011      	b.n	8007ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d012      	beq.n	8008008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	3324      	adds	r3, #36	; 0x24
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 fd50 	bl	8008a8c <xTaskRemoveFromEventList>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007ff2:	f000 fe27 	bl	8008c44 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	3b01      	subs	r3, #1
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008002:	2b00      	cmp	r3, #0
 8008004:	dce9      	bgt.n	8007fda <prvUnlockQueue+0x16>
 8008006:	e000      	b.n	800800a <prvUnlockQueue+0x46>
					break;
 8008008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	22ff      	movs	r2, #255	; 0xff
 800800e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008012:	f7ff fad7 	bl	80075c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008016:	f7ff faa5 	bl	8007564 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008022:	e011      	b.n	8008048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d012      	beq.n	8008052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	3310      	adds	r3, #16
 8008030:	4618      	mov	r0, r3
 8008032:	f000 fd2b 	bl	8008a8c <xTaskRemoveFromEventList>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d001      	beq.n	8008040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800803c:	f000 fe02 	bl	8008c44 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	3b01      	subs	r3, #1
 8008044:	b2db      	uxtb	r3, r3
 8008046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800804c:	2b00      	cmp	r3, #0
 800804e:	dce9      	bgt.n	8008024 <prvUnlockQueue+0x60>
 8008050:	e000      	b.n	8008054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	22ff      	movs	r2, #255	; 0xff
 8008058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800805c:	f7ff fab2 	bl	80075c4 <vPortExitCritical>
}
 8008060:	bf00      	nop
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008070:	f7ff fa78 	bl	8007564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008078:	2b00      	cmp	r3, #0
 800807a:	d102      	bne.n	8008082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800807c:	2301      	movs	r3, #1
 800807e:	60fb      	str	r3, [r7, #12]
 8008080:	e001      	b.n	8008086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008086:	f7ff fa9d 	bl	80075c4 <vPortExitCritical>

	return xReturn;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3710      	adds	r7, #16
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800809c:	f7ff fa62 	bl	8007564 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a8:	429a      	cmp	r2, r3
 80080aa:	d102      	bne.n	80080b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080ac:	2301      	movs	r3, #1
 80080ae:	60fb      	str	r3, [r7, #12]
 80080b0:	e001      	b.n	80080b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080b6:	f7ff fa85 	bl	80075c4 <vPortExitCritical>

	return xReturn;
 80080ba:	68fb      	ldr	r3, [r7, #12]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080c4:	b480      	push	{r7}
 80080c6:	b085      	sub	sp, #20
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	60fb      	str	r3, [r7, #12]
 80080d2:	e014      	b.n	80080fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80080d4:	4a0f      	ldr	r2, [pc, #60]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10b      	bne.n	80080f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80080e0:	490c      	ldr	r1, [pc, #48]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80080ea:	4a0a      	ldr	r2, [pc, #40]	; (8008114 <vQueueAddToRegistry+0x50>)
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	4413      	add	r3, r2
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80080f6:	e006      	b.n	8008106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b07      	cmp	r3, #7
 8008102:	d9e7      	bls.n	80080d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008104:	bf00      	nop
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	2000520c 	.word	0x2000520c

08008118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008128:	f7ff fa1c 	bl	8007564 <vPortEnterCritical>
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008132:	b25b      	sxtb	r3, r3
 8008134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008138:	d103      	bne.n	8008142 <vQueueWaitForMessageRestricted+0x2a>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008148:	b25b      	sxtb	r3, r3
 800814a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800814e:	d103      	bne.n	8008158 <vQueueWaitForMessageRestricted+0x40>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	2200      	movs	r2, #0
 8008154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008158:	f7ff fa34 	bl	80075c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008164:	697b      	ldr	r3, [r7, #20]
 8008166:	3324      	adds	r3, #36	; 0x24
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	68b9      	ldr	r1, [r7, #8]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fc61 	bl	8008a34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008172:	6978      	ldr	r0, [r7, #20]
 8008174:	f7ff ff26 	bl	8007fc4 <prvUnlockQueue>
	}
 8008178:	bf00      	nop
 800817a:	3718      	adds	r7, #24
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008180:	b580      	push	{r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af04      	add	r7, sp, #16
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800818e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8008194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008198:	f383 8811 	msr	BASEPRI, r3
 800819c:	f3bf 8f6f 	isb	sy
 80081a0:	f3bf 8f4f 	dsb	sy
 80081a4:	623b      	str	r3, [r7, #32]
}
 80081a6:	bf00      	nop
 80081a8:	e7fe      	b.n	80081a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80081aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	61fb      	str	r3, [r7, #28]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80081c6:	23bc      	movs	r3, #188	; 0xbc
 80081c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	2bbc      	cmp	r3, #188	; 0xbc
 80081ce:	d00a      	beq.n	80081e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80081d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d4:	f383 8811 	msr	BASEPRI, r3
 80081d8:	f3bf 8f6f 	isb	sy
 80081dc:	f3bf 8f4f 	dsb	sy
 80081e0:	61bb      	str	r3, [r7, #24]
}
 80081e2:	bf00      	nop
 80081e4:	e7fe      	b.n	80081e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80081e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d01e      	beq.n	800822c <xTaskCreateStatic+0xac>
 80081ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d01b      	beq.n	800822c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008200:	2202      	movs	r2, #2
 8008202:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008206:	2300      	movs	r3, #0
 8008208:	9303      	str	r3, [sp, #12]
 800820a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800820c:	9302      	str	r3, [sp, #8]
 800820e:	f107 0314 	add.w	r3, r7, #20
 8008212:	9301      	str	r3, [sp, #4]
 8008214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008216:	9300      	str	r3, [sp, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	68b9      	ldr	r1, [r7, #8]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 f850 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008226:	f000 f8f3 	bl	8008410 <prvAddNewTaskToReadyList>
 800822a:	e001      	b.n	8008230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
	}
 8008232:	4618      	mov	r0, r3
 8008234:	3728      	adds	r7, #40	; 0x28
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800823a:	b580      	push	{r7, lr}
 800823c:	b08c      	sub	sp, #48	; 0x30
 800823e:	af04      	add	r7, sp, #16
 8008240:	60f8      	str	r0, [r7, #12]
 8008242:	60b9      	str	r1, [r7, #8]
 8008244:	603b      	str	r3, [r7, #0]
 8008246:	4613      	mov	r3, r2
 8008248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800824a:	88fb      	ldrh	r3, [r7, #6]
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fe fdbc 	bl	8006dcc <pvPortMalloc>
 8008254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00e      	beq.n	800827a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800825c:	20bc      	movs	r0, #188	; 0xbc
 800825e:	f7fe fdb5 	bl	8006dcc <pvPortMalloc>
 8008262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800826a:	69fb      	ldr	r3, [r7, #28]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
 8008270:	e005      	b.n	800827e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008272:	6978      	ldr	r0, [r7, #20]
 8008274:	f7fe fe76 	bl	8006f64 <vPortFree>
 8008278:	e001      	b.n	800827e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800827a:	2300      	movs	r3, #0
 800827c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d017      	beq.n	80082b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008284:	69fb      	ldr	r3, [r7, #28]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800828c:	88fa      	ldrh	r2, [r7, #6]
 800828e:	2300      	movs	r3, #0
 8008290:	9303      	str	r3, [sp, #12]
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	9302      	str	r3, [sp, #8]
 8008296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	68f8      	ldr	r0, [r7, #12]
 80082a4:	f000 f80e 	bl	80082c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082a8:	69f8      	ldr	r0, [r7, #28]
 80082aa:	f000 f8b1 	bl	8008410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	e002      	b.n	80082ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80082b4:	f04f 33ff 	mov.w	r3, #4294967295
 80082b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80082ba:	69bb      	ldr	r3, [r7, #24]
	}
 80082bc:	4618      	mov	r0, r3
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b088      	sub	sp, #32
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
 80082d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	461a      	mov	r2, r3
 80082dc:	21a5      	movs	r1, #165	; 0xa5
 80082de:	f001 fb03 	bl	80098e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80082e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80082ec:	3b01      	subs	r3, #1
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80082fc:	69bb      	ldr	r3, [r7, #24]
 80082fe:	f003 0307 	and.w	r3, r3, #7
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	617b      	str	r3, [r7, #20]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d01f      	beq.n	8008362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e012      	b.n	800834e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	7819      	ldrb	r1, [r3, #0]
 8008330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	4413      	add	r3, r2
 8008336:	3334      	adds	r3, #52	; 0x34
 8008338:	460a      	mov	r2, r1
 800833a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	69fb      	ldr	r3, [r7, #28]
 8008340:	4413      	add	r3, r2
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d006      	beq.n	8008356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008348:	69fb      	ldr	r3, [r7, #28]
 800834a:	3301      	adds	r3, #1
 800834c:	61fb      	str	r3, [r7, #28]
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	2b0f      	cmp	r3, #15
 8008352:	d9e9      	bls.n	8008328 <prvInitialiseNewTask+0x64>
 8008354:	e000      	b.n	8008358 <prvInitialiseNewTask+0x94>
			{
				break;
 8008356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835a:	2200      	movs	r2, #0
 800835c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008360:	e003      	b.n	800836a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008364:	2200      	movs	r2, #0
 8008366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800836a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800836c:	2b37      	cmp	r3, #55	; 0x37
 800836e:	d901      	bls.n	8008374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008370:	2337      	movs	r3, #55	; 0x37
 8008372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800837a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800837c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800837e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008382:	2200      	movs	r2, #0
 8008384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	3304      	adds	r3, #4
 800838a:	4618      	mov	r0, r3
 800838c:	f7fe ff28 	bl	80071e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	3318      	adds	r3, #24
 8008394:	4618      	mov	r0, r3
 8008396:	f7fe ff23 	bl	80071e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800839a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800839e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80083aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80083b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b2:	2200      	movs	r2, #0
 80083b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80083b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80083c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c2:	3354      	adds	r3, #84	; 0x54
 80083c4:	2260      	movs	r2, #96	; 0x60
 80083c6:	2100      	movs	r1, #0
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fa8d 	bl	80098e8 <memset>
 80083ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d0:	4a0c      	ldr	r2, [pc, #48]	; (8008404 <prvInitialiseNewTask+0x140>)
 80083d2:	659a      	str	r2, [r3, #88]	; 0x58
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	4a0c      	ldr	r2, [pc, #48]	; (8008408 <prvInitialiseNewTask+0x144>)
 80083d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80083da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083dc:	4a0b      	ldr	r2, [pc, #44]	; (800840c <prvInitialiseNewTask+0x148>)
 80083de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80083e0:	683a      	ldr	r2, [r7, #0]
 80083e2:	68f9      	ldr	r1, [r7, #12]
 80083e4:	69b8      	ldr	r0, [r7, #24]
 80083e6:	f7fe ff8f 	bl	8007308 <pxPortInitialiseStack>
 80083ea:	4602      	mov	r2, r0
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80083f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d002      	beq.n	80083fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083fc:	bf00      	nop
 80083fe:	3720      	adds	r7, #32
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	08009b48 	.word	0x08009b48
 8008408:	08009b68 	.word	0x08009b68
 800840c:	08009b28 	.word	0x08009b28

08008410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008418:	f7ff f8a4 	bl	8007564 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800841c:	4b2d      	ldr	r3, [pc, #180]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	3301      	adds	r3, #1
 8008422:	4a2c      	ldr	r2, [pc, #176]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 8008424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008426:	4b2c      	ldr	r3, [pc, #176]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d109      	bne.n	8008442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800842e:	4a2a      	ldr	r2, [pc, #168]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008434:	4b27      	ldr	r3, [pc, #156]	; (80084d4 <prvAddNewTaskToReadyList+0xc4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2b01      	cmp	r3, #1
 800843a:	d110      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800843c:	f000 fc26 	bl	8008c8c <prvInitialiseTaskLists>
 8008440:	e00d      	b.n	800845e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008442:	4b26      	ldr	r3, [pc, #152]	; (80084dc <prvAddNewTaskToReadyList+0xcc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d109      	bne.n	800845e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800844a:	4b23      	ldr	r3, [pc, #140]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	429a      	cmp	r2, r3
 8008456:	d802      	bhi.n	800845e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008458:	4a1f      	ldr	r2, [pc, #124]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800845e:	4b20      	ldr	r3, [pc, #128]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	3301      	adds	r3, #1
 8008464:	4a1e      	ldr	r2, [pc, #120]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 8008466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008468:	4b1d      	ldr	r3, [pc, #116]	; (80084e0 <prvAddNewTaskToReadyList+0xd0>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008474:	4b1b      	ldr	r3, [pc, #108]	; (80084e4 <prvAddNewTaskToReadyList+0xd4>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	429a      	cmp	r2, r3
 800847a:	d903      	bls.n	8008484 <prvAddNewTaskToReadyList+0x74>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008480:	4a18      	ldr	r2, [pc, #96]	; (80084e4 <prvAddNewTaskToReadyList+0xd4>)
 8008482:	6013      	str	r3, [r2, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008488:	4613      	mov	r3, r2
 800848a:	009b      	lsls	r3, r3, #2
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	4a15      	ldr	r2, [pc, #84]	; (80084e8 <prvAddNewTaskToReadyList+0xd8>)
 8008492:	441a      	add	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3304      	adds	r3, #4
 8008498:	4619      	mov	r1, r3
 800849a:	4610      	mov	r0, r2
 800849c:	f7fe fead 	bl	80071fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084a0:	f7ff f890 	bl	80075c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084a4:	4b0d      	ldr	r3, [pc, #52]	; (80084dc <prvAddNewTaskToReadyList+0xcc>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00e      	beq.n	80084ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80084ac:	4b0a      	ldr	r3, [pc, #40]	; (80084d8 <prvAddNewTaskToReadyList+0xc8>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d207      	bcs.n	80084ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80084ba:	4b0c      	ldr	r3, [pc, #48]	; (80084ec <prvAddNewTaskToReadyList+0xdc>)
 80084bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084c0:	601a      	str	r2, [r3, #0]
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ca:	bf00      	nop
 80084cc:	3708      	adds	r7, #8
 80084ce:	46bd      	mov	sp, r7
 80084d0:	bd80      	pop	{r7, pc}
 80084d2:	bf00      	nop
 80084d4:	20005720 	.word	0x20005720
 80084d8:	2000524c 	.word	0x2000524c
 80084dc:	2000572c 	.word	0x2000572c
 80084e0:	2000573c 	.word	0x2000573c
 80084e4:	20005728 	.word	0x20005728
 80084e8:	20005250 	.word	0x20005250
 80084ec:	e000ed04 	.word	0xe000ed04

080084f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80084f8:	2300      	movs	r3, #0
 80084fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d017      	beq.n	8008532 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008502:	4b13      	ldr	r3, [pc, #76]	; (8008550 <vTaskDelay+0x60>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vTaskDelay+0x30>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	60bb      	str	r3, [r7, #8]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008520:	f000 f88a 	bl	8008638 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008524:	2100      	movs	r1, #0
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fe08 	bl	800913c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800852c:	f000 f892 	bl	8008654 <xTaskResumeAll>
 8008530:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d107      	bne.n	8008548 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008538:	4b06      	ldr	r3, [pc, #24]	; (8008554 <vTaskDelay+0x64>)
 800853a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853e:	601a      	str	r2, [r3, #0]
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008548:	bf00      	nop
 800854a:	3710      	adds	r7, #16
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	20005748 	.word	0x20005748
 8008554:	e000ed04 	.word	0xe000ed04

08008558 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b08a      	sub	sp, #40	; 0x28
 800855c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800855e:	2300      	movs	r3, #0
 8008560:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008562:	2300      	movs	r3, #0
 8008564:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008566:	463a      	mov	r2, r7
 8008568:	1d39      	adds	r1, r7, #4
 800856a:	f107 0308 	add.w	r3, r7, #8
 800856e:	4618      	mov	r0, r3
 8008570:	f7fe fbf8 	bl	8006d64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008574:	6839      	ldr	r1, [r7, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	9202      	str	r2, [sp, #8]
 800857c:	9301      	str	r3, [sp, #4]
 800857e:	2300      	movs	r3, #0
 8008580:	9300      	str	r3, [sp, #0]
 8008582:	2300      	movs	r3, #0
 8008584:	460a      	mov	r2, r1
 8008586:	4924      	ldr	r1, [pc, #144]	; (8008618 <vTaskStartScheduler+0xc0>)
 8008588:	4824      	ldr	r0, [pc, #144]	; (800861c <vTaskStartScheduler+0xc4>)
 800858a:	f7ff fdf9 	bl	8008180 <xTaskCreateStatic>
 800858e:	4603      	mov	r3, r0
 8008590:	4a23      	ldr	r2, [pc, #140]	; (8008620 <vTaskStartScheduler+0xc8>)
 8008592:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008594:	4b22      	ldr	r3, [pc, #136]	; (8008620 <vTaskStartScheduler+0xc8>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800859c:	2301      	movs	r3, #1
 800859e:	617b      	str	r3, [r7, #20]
 80085a0:	e001      	b.n	80085a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b01      	cmp	r3, #1
 80085aa:	d102      	bne.n	80085b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80085ac:	f000 fe1a 	bl	80091e4 <xTimerCreateTimerTask>
 80085b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085b2:	697b      	ldr	r3, [r7, #20]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d11b      	bne.n	80085f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	613b      	str	r3, [r7, #16]
}
 80085ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085cc:	4b15      	ldr	r3, [pc, #84]	; (8008624 <vTaskStartScheduler+0xcc>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3354      	adds	r3, #84	; 0x54
 80085d2:	4a15      	ldr	r2, [pc, #84]	; (8008628 <vTaskStartScheduler+0xd0>)
 80085d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085d6:	4b15      	ldr	r3, [pc, #84]	; (800862c <vTaskStartScheduler+0xd4>)
 80085d8:	f04f 32ff 	mov.w	r2, #4294967295
 80085dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085de:	4b14      	ldr	r3, [pc, #80]	; (8008630 <vTaskStartScheduler+0xd8>)
 80085e0:	2201      	movs	r2, #1
 80085e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085e4:	4b13      	ldr	r3, [pc, #76]	; (8008634 <vTaskStartScheduler+0xdc>)
 80085e6:	2200      	movs	r2, #0
 80085e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085ea:	f7fe ff19 	bl	8007420 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085ee:	e00e      	b.n	800860e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085f6:	d10a      	bne.n	800860e <vTaskStartScheduler+0xb6>
	__asm volatile
 80085f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085fc:	f383 8811 	msr	BASEPRI, r3
 8008600:	f3bf 8f6f 	isb	sy
 8008604:	f3bf 8f4f 	dsb	sy
 8008608:	60fb      	str	r3, [r7, #12]
}
 800860a:	bf00      	nop
 800860c:	e7fe      	b.n	800860c <vTaskStartScheduler+0xb4>
}
 800860e:	bf00      	nop
 8008610:	3718      	adds	r7, #24
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	08009aa8 	.word	0x08009aa8
 800861c:	08008c5d 	.word	0x08008c5d
 8008620:	20005744 	.word	0x20005744
 8008624:	2000524c 	.word	0x2000524c
 8008628:	20000210 	.word	0x20000210
 800862c:	20005740 	.word	0x20005740
 8008630:	2000572c 	.word	0x2000572c
 8008634:	20005724 	.word	0x20005724

08008638 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008638:	b480      	push	{r7}
 800863a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800863c:	4b04      	ldr	r3, [pc, #16]	; (8008650 <vTaskSuspendAll+0x18>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3301      	adds	r3, #1
 8008642:	4a03      	ldr	r2, [pc, #12]	; (8008650 <vTaskSuspendAll+0x18>)
 8008644:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008646:	bf00      	nop
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr
 8008650:	20005748 	.word	0x20005748

08008654 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800865a:	2300      	movs	r3, #0
 800865c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800865e:	2300      	movs	r3, #0
 8008660:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008662:	4b42      	ldr	r3, [pc, #264]	; (800876c <xTaskResumeAll+0x118>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d10a      	bne.n	8008680 <xTaskResumeAll+0x2c>
	__asm volatile
 800866a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866e:	f383 8811 	msr	BASEPRI, r3
 8008672:	f3bf 8f6f 	isb	sy
 8008676:	f3bf 8f4f 	dsb	sy
 800867a:	603b      	str	r3, [r7, #0]
}
 800867c:	bf00      	nop
 800867e:	e7fe      	b.n	800867e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008680:	f7fe ff70 	bl	8007564 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008684:	4b39      	ldr	r3, [pc, #228]	; (800876c <xTaskResumeAll+0x118>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	4a38      	ldr	r2, [pc, #224]	; (800876c <xTaskResumeAll+0x118>)
 800868c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800868e:	4b37      	ldr	r3, [pc, #220]	; (800876c <xTaskResumeAll+0x118>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d162      	bne.n	800875c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008696:	4b36      	ldr	r3, [pc, #216]	; (8008770 <xTaskResumeAll+0x11c>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d05e      	beq.n	800875c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800869e:	e02f      	b.n	8008700 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086a0:	4b34      	ldr	r3, [pc, #208]	; (8008774 <xTaskResumeAll+0x120>)
 80086a2:	68db      	ldr	r3, [r3, #12]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	3318      	adds	r3, #24
 80086ac:	4618      	mov	r0, r3
 80086ae:	f7fe fe01 	bl	80072b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	3304      	adds	r3, #4
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fdfc 	bl	80072b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c0:	4b2d      	ldr	r3, [pc, #180]	; (8008778 <xTaskResumeAll+0x124>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskResumeAll+0x7c>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086cc:	4a2a      	ldr	r2, [pc, #168]	; (8008778 <xTaskResumeAll+0x124>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a27      	ldr	r2, [pc, #156]	; (800877c <xTaskResumeAll+0x128>)
 80086de:	441a      	add	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe fd87 	bl	80071fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f0:	4b23      	ldr	r3, [pc, #140]	; (8008780 <xTaskResumeAll+0x12c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d302      	bcc.n	8008700 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80086fa:	4b22      	ldr	r3, [pc, #136]	; (8008784 <xTaskResumeAll+0x130>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008700:	4b1c      	ldr	r3, [pc, #112]	; (8008774 <xTaskResumeAll+0x120>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d1cb      	bne.n	80086a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800870e:	f000 fb5f 	bl	8008dd0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <xTaskResumeAll+0x134>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d010      	beq.n	8008740 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800871e:	f000 f847 	bl	80087b0 <xTaskIncrementTick>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008728:	4b16      	ldr	r3, [pc, #88]	; (8008784 <xTaskResumeAll+0x130>)
 800872a:	2201      	movs	r2, #1
 800872c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	3b01      	subs	r3, #1
 8008732:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1f1      	bne.n	800871e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <xTaskResumeAll+0x134>)
 800873c:	2200      	movs	r2, #0
 800873e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008740:	4b10      	ldr	r3, [pc, #64]	; (8008784 <xTaskResumeAll+0x130>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d009      	beq.n	800875c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008748:	2301      	movs	r3, #1
 800874a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800874c:	4b0f      	ldr	r3, [pc, #60]	; (800878c <xTaskResumeAll+0x138>)
 800874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800875c:	f7fe ff32 	bl	80075c4 <vPortExitCritical>

	return xAlreadyYielded;
 8008760:	68bb      	ldr	r3, [r7, #8]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	20005748 	.word	0x20005748
 8008770:	20005720 	.word	0x20005720
 8008774:	200056e0 	.word	0x200056e0
 8008778:	20005728 	.word	0x20005728
 800877c:	20005250 	.word	0x20005250
 8008780:	2000524c 	.word	0x2000524c
 8008784:	20005734 	.word	0x20005734
 8008788:	20005730 	.word	0x20005730
 800878c:	e000ed04 	.word	0xe000ed04

08008790 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008796:	4b05      	ldr	r3, [pc, #20]	; (80087ac <xTaskGetTickCount+0x1c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800879c:	687b      	ldr	r3, [r7, #4]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	370c      	adds	r7, #12
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	20005724 	.word	0x20005724

080087b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b086      	sub	sp, #24
 80087b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ba:	4b4f      	ldr	r3, [pc, #316]	; (80088f8 <xTaskIncrementTick+0x148>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f040 808f 	bne.w	80088e2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087c4:	4b4d      	ldr	r3, [pc, #308]	; (80088fc <xTaskIncrementTick+0x14c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	3301      	adds	r3, #1
 80087ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087cc:	4a4b      	ldr	r2, [pc, #300]	; (80088fc <xTaskIncrementTick+0x14c>)
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d120      	bne.n	800881a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80087d8:	4b49      	ldr	r3, [pc, #292]	; (8008900 <xTaskIncrementTick+0x150>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <xTaskIncrementTick+0x48>
	__asm volatile
 80087e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087e6:	f383 8811 	msr	BASEPRI, r3
 80087ea:	f3bf 8f6f 	isb	sy
 80087ee:	f3bf 8f4f 	dsb	sy
 80087f2:	603b      	str	r3, [r7, #0]
}
 80087f4:	bf00      	nop
 80087f6:	e7fe      	b.n	80087f6 <xTaskIncrementTick+0x46>
 80087f8:	4b41      	ldr	r3, [pc, #260]	; (8008900 <xTaskIncrementTick+0x150>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	60fb      	str	r3, [r7, #12]
 80087fe:	4b41      	ldr	r3, [pc, #260]	; (8008904 <xTaskIncrementTick+0x154>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a3f      	ldr	r2, [pc, #252]	; (8008900 <xTaskIncrementTick+0x150>)
 8008804:	6013      	str	r3, [r2, #0]
 8008806:	4a3f      	ldr	r2, [pc, #252]	; (8008904 <xTaskIncrementTick+0x154>)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	6013      	str	r3, [r2, #0]
 800880c:	4b3e      	ldr	r3, [pc, #248]	; (8008908 <xTaskIncrementTick+0x158>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	3301      	adds	r3, #1
 8008812:	4a3d      	ldr	r2, [pc, #244]	; (8008908 <xTaskIncrementTick+0x158>)
 8008814:	6013      	str	r3, [r2, #0]
 8008816:	f000 fadb 	bl	8008dd0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800881a:	4b3c      	ldr	r3, [pc, #240]	; (800890c <xTaskIncrementTick+0x15c>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	429a      	cmp	r2, r3
 8008822:	d349      	bcc.n	80088b8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008824:	4b36      	ldr	r3, [pc, #216]	; (8008900 <xTaskIncrementTick+0x150>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882e:	4b37      	ldr	r3, [pc, #220]	; (800890c <xTaskIncrementTick+0x15c>)
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	601a      	str	r2, [r3, #0]
					break;
 8008836:	e03f      	b.n	80088b8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b31      	ldr	r3, [pc, #196]	; (8008900 <xTaskIncrementTick+0x150>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	685b      	ldr	r3, [r3, #4]
 8008846:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d203      	bcs.n	8008858 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008850:	4a2e      	ldr	r2, [pc, #184]	; (800890c <xTaskIncrementTick+0x15c>)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008856:	e02f      	b.n	80088b8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3304      	adds	r3, #4
 800885c:	4618      	mov	r0, r3
 800885e:	f7fe fd29 	bl	80072b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008866:	2b00      	cmp	r3, #0
 8008868:	d004      	beq.n	8008874 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	3318      	adds	r3, #24
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe fd20 	bl	80072b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008878:	4b25      	ldr	r3, [pc, #148]	; (8008910 <xTaskIncrementTick+0x160>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	429a      	cmp	r2, r3
 800887e:	d903      	bls.n	8008888 <xTaskIncrementTick+0xd8>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008884:	4a22      	ldr	r2, [pc, #136]	; (8008910 <xTaskIncrementTick+0x160>)
 8008886:	6013      	str	r3, [r2, #0]
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888c:	4613      	mov	r3, r2
 800888e:	009b      	lsls	r3, r3, #2
 8008890:	4413      	add	r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	4a1f      	ldr	r2, [pc, #124]	; (8008914 <xTaskIncrementTick+0x164>)
 8008896:	441a      	add	r2, r3
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe fcab 	bl	80071fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a8:	4b1b      	ldr	r3, [pc, #108]	; (8008918 <xTaskIncrementTick+0x168>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d3b8      	bcc.n	8008824 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80088b2:	2301      	movs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088b6:	e7b5      	b.n	8008824 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80088b8:	4b17      	ldr	r3, [pc, #92]	; (8008918 <xTaskIncrementTick+0x168>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088be:	4915      	ldr	r1, [pc, #84]	; (8008914 <xTaskIncrementTick+0x164>)
 80088c0:	4613      	mov	r3, r2
 80088c2:	009b      	lsls	r3, r3, #2
 80088c4:	4413      	add	r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	440b      	add	r3, r1
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d901      	bls.n	80088d4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80088d0:	2301      	movs	r3, #1
 80088d2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <xTaskIncrementTick+0x16c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d007      	beq.n	80088ec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80088dc:	2301      	movs	r3, #1
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	e004      	b.n	80088ec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088e2:	4b0f      	ldr	r3, [pc, #60]	; (8008920 <xTaskIncrementTick+0x170>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	3301      	adds	r3, #1
 80088e8:	4a0d      	ldr	r2, [pc, #52]	; (8008920 <xTaskIncrementTick+0x170>)
 80088ea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088ec:	697b      	ldr	r3, [r7, #20]
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3718      	adds	r7, #24
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20005748 	.word	0x20005748
 80088fc:	20005724 	.word	0x20005724
 8008900:	200056d8 	.word	0x200056d8
 8008904:	200056dc 	.word	0x200056dc
 8008908:	20005738 	.word	0x20005738
 800890c:	20005740 	.word	0x20005740
 8008910:	20005728 	.word	0x20005728
 8008914:	20005250 	.word	0x20005250
 8008918:	2000524c 	.word	0x2000524c
 800891c:	20005734 	.word	0x20005734
 8008920:	20005730 	.word	0x20005730

08008924 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800892a:	4b2a      	ldr	r3, [pc, #168]	; (80089d4 <vTaskSwitchContext+0xb0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008932:	4b29      	ldr	r3, [pc, #164]	; (80089d8 <vTaskSwitchContext+0xb4>)
 8008934:	2201      	movs	r2, #1
 8008936:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008938:	e046      	b.n	80089c8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800893a:	4b27      	ldr	r3, [pc, #156]	; (80089d8 <vTaskSwitchContext+0xb4>)
 800893c:	2200      	movs	r2, #0
 800893e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008940:	4b26      	ldr	r3, [pc, #152]	; (80089dc <vTaskSwitchContext+0xb8>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	60fb      	str	r3, [r7, #12]
 8008946:	e010      	b.n	800896a <vTaskSwitchContext+0x46>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d10a      	bne.n	8008964 <vTaskSwitchContext+0x40>
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
 8008962:	e7fe      	b.n	8008962 <vTaskSwitchContext+0x3e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b01      	subs	r3, #1
 8008968:	60fb      	str	r3, [r7, #12]
 800896a:	491d      	ldr	r1, [pc, #116]	; (80089e0 <vTaskSwitchContext+0xbc>)
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	440b      	add	r3, r1
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0e4      	beq.n	8008948 <vTaskSwitchContext+0x24>
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	4a15      	ldr	r2, [pc, #84]	; (80089e0 <vTaskSwitchContext+0xbc>)
 800898a:	4413      	add	r3, r2
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	685a      	ldr	r2, [r3, #4]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	605a      	str	r2, [r3, #4]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3308      	adds	r3, #8
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d104      	bne.n	80089ae <vTaskSwitchContext+0x8a>
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	605a      	str	r2, [r3, #4]
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	4a0b      	ldr	r2, [pc, #44]	; (80089e4 <vTaskSwitchContext+0xc0>)
 80089b6:	6013      	str	r3, [r2, #0]
 80089b8:	4a08      	ldr	r2, [pc, #32]	; (80089dc <vTaskSwitchContext+0xb8>)
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <vTaskSwitchContext+0xc0>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	3354      	adds	r3, #84	; 0x54
 80089c4:	4a08      	ldr	r2, [pc, #32]	; (80089e8 <vTaskSwitchContext+0xc4>)
 80089c6:	6013      	str	r3, [r2, #0]
}
 80089c8:	bf00      	nop
 80089ca:	3714      	adds	r7, #20
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr
 80089d4:	20005748 	.word	0x20005748
 80089d8:	20005734 	.word	0x20005734
 80089dc:	20005728 	.word	0x20005728
 80089e0:	20005250 	.word	0x20005250
 80089e4:	2000524c 	.word	0x2000524c
 80089e8:	20000210 	.word	0x20000210

080089ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80089fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a00:	f383 8811 	msr	BASEPRI, r3
 8008a04:	f3bf 8f6f 	isb	sy
 8008a08:	f3bf 8f4f 	dsb	sy
 8008a0c:	60fb      	str	r3, [r7, #12]
}
 8008a0e:	bf00      	nop
 8008a10:	e7fe      	b.n	8008a10 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a12:	4b07      	ldr	r3, [pc, #28]	; (8008a30 <vTaskPlaceOnEventList+0x44>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3318      	adds	r3, #24
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f7fe fc11 	bl	8007242 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008a20:	2101      	movs	r1, #1
 8008a22:	6838      	ldr	r0, [r7, #0]
 8008a24:	f000 fb8a 	bl	800913c <prvAddCurrentTaskToDelayedList>
}
 8008a28:	bf00      	nop
 8008a2a:	3710      	adds	r7, #16
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	2000524c 	.word	0x2000524c

08008a34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b086      	sub	sp, #24
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10a      	bne.n	8008a5c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a4a:	f383 8811 	msr	BASEPRI, r3
 8008a4e:	f3bf 8f6f 	isb	sy
 8008a52:	f3bf 8f4f 	dsb	sy
 8008a56:	617b      	str	r3, [r7, #20]
}
 8008a58:	bf00      	nop
 8008a5a:	e7fe      	b.n	8008a5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008a5c:	4b0a      	ldr	r3, [pc, #40]	; (8008a88 <vTaskPlaceOnEventListRestricted+0x54>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	3318      	adds	r3, #24
 8008a62:	4619      	mov	r1, r3
 8008a64:	68f8      	ldr	r0, [r7, #12]
 8008a66:	f7fe fbc8 	bl	80071fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d002      	beq.n	8008a76 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008a70:	f04f 33ff 	mov.w	r3, #4294967295
 8008a74:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008a76:	6879      	ldr	r1, [r7, #4]
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f000 fb5f 	bl	800913c <prvAddCurrentTaskToDelayedList>
	}
 8008a7e:	bf00      	nop
 8008a80:	3718      	adds	r7, #24
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
 8008a86:	bf00      	nop
 8008a88:	2000524c 	.word	0x2000524c

08008a8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	68db      	ldr	r3, [r3, #12]
 8008a98:	68db      	ldr	r3, [r3, #12]
 8008a9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	60fb      	str	r3, [r7, #12]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	3318      	adds	r3, #24
 8008abc:	4618      	mov	r0, r3
 8008abe:	f7fe fbf9 	bl	80072b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ac2:	4b1e      	ldr	r3, [pc, #120]	; (8008b3c <xTaskRemoveFromEventList+0xb0>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d11d      	bne.n	8008b06 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	3304      	adds	r3, #4
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f7fe fbf0 	bl	80072b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad8:	4b19      	ldr	r3, [pc, #100]	; (8008b40 <xTaskRemoveFromEventList+0xb4>)
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d903      	bls.n	8008ae8 <xTaskRemoveFromEventList+0x5c>
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <xTaskRemoveFromEventList+0xb4>)
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aec:	4613      	mov	r3, r2
 8008aee:	009b      	lsls	r3, r3, #2
 8008af0:	4413      	add	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <xTaskRemoveFromEventList+0xb8>)
 8008af6:	441a      	add	r2, r3
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	3304      	adds	r3, #4
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f7fe fb7b 	bl	80071fa <vListInsertEnd>
 8008b04:	e005      	b.n	8008b12 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	3318      	adds	r3, #24
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	480e      	ldr	r0, [pc, #56]	; (8008b48 <xTaskRemoveFromEventList+0xbc>)
 8008b0e:	f7fe fb74 	bl	80071fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b16:	4b0d      	ldr	r3, [pc, #52]	; (8008b4c <xTaskRemoveFromEventList+0xc0>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d905      	bls.n	8008b2c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008b20:	2301      	movs	r3, #1
 8008b22:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008b24:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <xTaskRemoveFromEventList+0xc4>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]
 8008b2a:	e001      	b.n	8008b30 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008b30:	697b      	ldr	r3, [r7, #20]
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3718      	adds	r7, #24
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	20005748 	.word	0x20005748
 8008b40:	20005728 	.word	0x20005728
 8008b44:	20005250 	.word	0x20005250
 8008b48:	200056e0 	.word	0x200056e0
 8008b4c:	2000524c 	.word	0x2000524c
 8008b50:	20005734 	.word	0x20005734

08008b54 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008b5c:	4b06      	ldr	r3, [pc, #24]	; (8008b78 <vTaskInternalSetTimeOutState+0x24>)
 8008b5e:	681a      	ldr	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <vTaskInternalSetTimeOutState+0x28>)
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	605a      	str	r2, [r3, #4]
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	20005738 	.word	0x20005738
 8008b7c:	20005724 	.word	0x20005724

08008b80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b088      	sub	sp, #32
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d10a      	bne.n	8008ba6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	613b      	str	r3, [r7, #16]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d10a      	bne.n	8008bc2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb0:	f383 8811 	msr	BASEPRI, r3
 8008bb4:	f3bf 8f6f 	isb	sy
 8008bb8:	f3bf 8f4f 	dsb	sy
 8008bbc:	60fb      	str	r3, [r7, #12]
}
 8008bbe:	bf00      	nop
 8008bc0:	e7fe      	b.n	8008bc0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008bc2:	f7fe fccf 	bl	8007564 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008bc6:	4b1d      	ldr	r3, [pc, #116]	; (8008c3c <xTaskCheckForTimeOut+0xbc>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	69ba      	ldr	r2, [r7, #24]
 8008bd2:	1ad3      	subs	r3, r2, r3
 8008bd4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bde:	d102      	bne.n	8008be6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008be0:	2300      	movs	r3, #0
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	e023      	b.n	8008c2e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681a      	ldr	r2, [r3, #0]
 8008bea:	4b15      	ldr	r3, [pc, #84]	; (8008c40 <xTaskCheckForTimeOut+0xc0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d007      	beq.n	8008c02 <xTaskCheckForTimeOut+0x82>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	69ba      	ldr	r2, [r7, #24]
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d302      	bcc.n	8008c02 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	e015      	b.n	8008c2e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d20b      	bcs.n	8008c24 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	681a      	ldr	r2, [r3, #0]
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	1ad2      	subs	r2, r2, r3
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f7ff ff9b 	bl	8008b54 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61fb      	str	r3, [r7, #28]
 8008c22:	e004      	b.n	8008c2e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	2200      	movs	r2, #0
 8008c28:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008c2e:	f7fe fcc9 	bl	80075c4 <vPortExitCritical>

	return xReturn;
 8008c32:	69fb      	ldr	r3, [r7, #28]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3720      	adds	r7, #32
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}
 8008c3c:	20005724 	.word	0x20005724
 8008c40:	20005738 	.word	0x20005738

08008c44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008c48:	4b03      	ldr	r3, [pc, #12]	; (8008c58 <vTaskMissedYield+0x14>)
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	601a      	str	r2, [r3, #0]
}
 8008c4e:	bf00      	nop
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20005734 	.word	0x20005734

08008c5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008c64:	f000 f852 	bl	8008d0c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008c68:	4b06      	ldr	r3, [pc, #24]	; (8008c84 <prvIdleTask+0x28>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d9f9      	bls.n	8008c64 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008c70:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <prvIdleTask+0x2c>)
 8008c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	f3bf 8f4f 	dsb	sy
 8008c7c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008c80:	e7f0      	b.n	8008c64 <prvIdleTask+0x8>
 8008c82:	bf00      	nop
 8008c84:	20005250 	.word	0x20005250
 8008c88:	e000ed04 	.word	0xe000ed04

08008c8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008c92:	2300      	movs	r3, #0
 8008c94:	607b      	str	r3, [r7, #4]
 8008c96:	e00c      	b.n	8008cb2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	4a12      	ldr	r2, [pc, #72]	; (8008cec <prvInitialiseTaskLists+0x60>)
 8008ca4:	4413      	add	r3, r2
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fa7a 	bl	80071a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3301      	adds	r3, #1
 8008cb0:	607b      	str	r3, [r7, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2b37      	cmp	r3, #55	; 0x37
 8008cb6:	d9ef      	bls.n	8008c98 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008cb8:	480d      	ldr	r0, [pc, #52]	; (8008cf0 <prvInitialiseTaskLists+0x64>)
 8008cba:	f7fe fa71 	bl	80071a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008cbe:	480d      	ldr	r0, [pc, #52]	; (8008cf4 <prvInitialiseTaskLists+0x68>)
 8008cc0:	f7fe fa6e 	bl	80071a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008cc4:	480c      	ldr	r0, [pc, #48]	; (8008cf8 <prvInitialiseTaskLists+0x6c>)
 8008cc6:	f7fe fa6b 	bl	80071a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008cca:	480c      	ldr	r0, [pc, #48]	; (8008cfc <prvInitialiseTaskLists+0x70>)
 8008ccc:	f7fe fa68 	bl	80071a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008cd0:	480b      	ldr	r0, [pc, #44]	; (8008d00 <prvInitialiseTaskLists+0x74>)
 8008cd2:	f7fe fa65 	bl	80071a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008cd6:	4b0b      	ldr	r3, [pc, #44]	; (8008d04 <prvInitialiseTaskLists+0x78>)
 8008cd8:	4a05      	ldr	r2, [pc, #20]	; (8008cf0 <prvInitialiseTaskLists+0x64>)
 8008cda:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	; (8008d08 <prvInitialiseTaskLists+0x7c>)
 8008cde:	4a05      	ldr	r2, [pc, #20]	; (8008cf4 <prvInitialiseTaskLists+0x68>)
 8008ce0:	601a      	str	r2, [r3, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	3708      	adds	r7, #8
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	bd80      	pop	{r7, pc}
 8008cea:	bf00      	nop
 8008cec:	20005250 	.word	0x20005250
 8008cf0:	200056b0 	.word	0x200056b0
 8008cf4:	200056c4 	.word	0x200056c4
 8008cf8:	200056e0 	.word	0x200056e0
 8008cfc:	200056f4 	.word	0x200056f4
 8008d00:	2000570c 	.word	0x2000570c
 8008d04:	200056d8 	.word	0x200056d8
 8008d08:	200056dc 	.word	0x200056dc

08008d0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b082      	sub	sp, #8
 8008d10:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d12:	e019      	b.n	8008d48 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008d14:	f7fe fc26 	bl	8007564 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d18:	4b10      	ldr	r3, [pc, #64]	; (8008d5c <prvCheckTasksWaitingTermination+0x50>)
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4618      	mov	r0, r3
 8008d26:	f7fe fac5 	bl	80072b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008d2a:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <prvCheckTasksWaitingTermination+0x54>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	4a0b      	ldr	r2, [pc, #44]	; (8008d60 <prvCheckTasksWaitingTermination+0x54>)
 8008d32:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008d34:	4b0b      	ldr	r3, [pc, #44]	; (8008d64 <prvCheckTasksWaitingTermination+0x58>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <prvCheckTasksWaitingTermination+0x58>)
 8008d3c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008d3e:	f7fe fc41 	bl	80075c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f810 	bl	8008d68 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008d48:	4b06      	ldr	r3, [pc, #24]	; (8008d64 <prvCheckTasksWaitingTermination+0x58>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d1e1      	bne.n	8008d14 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008d50:	bf00      	nop
 8008d52:	bf00      	nop
 8008d54:	3708      	adds	r7, #8
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	bf00      	nop
 8008d5c:	200056f4 	.word	0x200056f4
 8008d60:	20005720 	.word	0x20005720
 8008d64:	20005708 	.word	0x20005708

08008d68 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3354      	adds	r3, #84	; 0x54
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 fdcd 	bl	8009914 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d108      	bne.n	8008d96 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d88:	4618      	mov	r0, r3
 8008d8a:	f7fe f8eb 	bl	8006f64 <vPortFree>
				vPortFree( pxTCB );
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7fe f8e8 	bl	8006f64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008d94:	e018      	b.n	8008dc8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d103      	bne.n	8008da8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f7fe f8df 	bl	8006f64 <vPortFree>
	}
 8008da6:	e00f      	b.n	8008dc8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008dae:	2b02      	cmp	r3, #2
 8008db0:	d00a      	beq.n	8008dc8 <prvDeleteTCB+0x60>
	__asm volatile
 8008db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db6:	f383 8811 	msr	BASEPRI, r3
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	f3bf 8f4f 	dsb	sy
 8008dc2:	60fb      	str	r3, [r7, #12]
}
 8008dc4:	bf00      	nop
 8008dc6:	e7fe      	b.n	8008dc6 <prvDeleteTCB+0x5e>
	}
 8008dc8:	bf00      	nop
 8008dca:	3710      	adds	r7, #16
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b083      	sub	sp, #12
 8008dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dd6:	4b0c      	ldr	r3, [pc, #48]	; (8008e08 <prvResetNextTaskUnblockTime+0x38>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008de0:	4b0a      	ldr	r3, [pc, #40]	; (8008e0c <prvResetNextTaskUnblockTime+0x3c>)
 8008de2:	f04f 32ff 	mov.w	r2, #4294967295
 8008de6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008de8:	e008      	b.n	8008dfc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dea:	4b07      	ldr	r3, [pc, #28]	; (8008e08 <prvResetNextTaskUnblockTime+0x38>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68db      	ldr	r3, [r3, #12]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4a04      	ldr	r2, [pc, #16]	; (8008e0c <prvResetNextTaskUnblockTime+0x3c>)
 8008dfa:	6013      	str	r3, [r2, #0]
}
 8008dfc:	bf00      	nop
 8008dfe:	370c      	adds	r7, #12
 8008e00:	46bd      	mov	sp, r7
 8008e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e06:	4770      	bx	lr
 8008e08:	200056d8 	.word	0x200056d8
 8008e0c:	20005740 	.word	0x20005740

08008e10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008e10:	b480      	push	{r7}
 8008e12:	b083      	sub	sp, #12
 8008e14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008e16:	4b0b      	ldr	r3, [pc, #44]	; (8008e44 <xTaskGetSchedulerState+0x34>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d102      	bne.n	8008e24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008e1e:	2301      	movs	r3, #1
 8008e20:	607b      	str	r3, [r7, #4]
 8008e22:	e008      	b.n	8008e36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e24:	4b08      	ldr	r3, [pc, #32]	; (8008e48 <xTaskGetSchedulerState+0x38>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d102      	bne.n	8008e32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008e2c:	2302      	movs	r3, #2
 8008e2e:	607b      	str	r3, [r7, #4]
 8008e30:	e001      	b.n	8008e36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008e32:	2300      	movs	r3, #0
 8008e34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008e36:	687b      	ldr	r3, [r7, #4]
	}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	2000572c 	.word	0x2000572c
 8008e48:	20005748 	.word	0x20005748

08008e4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b086      	sub	sp, #24
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d056      	beq.n	8008f10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e62:	4b2e      	ldr	r3, [pc, #184]	; (8008f1c <xTaskPriorityDisinherit+0xd0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d00a      	beq.n	8008e82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	60fb      	str	r3, [r7, #12]
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d10a      	bne.n	8008ea0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8e:	f383 8811 	msr	BASEPRI, r3
 8008e92:	f3bf 8f6f 	isb	sy
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	60bb      	str	r3, [r7, #8]
}
 8008e9c:	bf00      	nop
 8008e9e:	e7fe      	b.n	8008e9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008ea0:	693b      	ldr	r3, [r7, #16]
 8008ea2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d02c      	beq.n	8008f10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d128      	bne.n	8008f10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	3304      	adds	r3, #4
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f7fe f9f6 	bl	80072b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ed4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee0:	4b0f      	ldr	r3, [pc, #60]	; (8008f20 <xTaskPriorityDisinherit+0xd4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	429a      	cmp	r2, r3
 8008ee6:	d903      	bls.n	8008ef0 <xTaskPriorityDisinherit+0xa4>
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eec:	4a0c      	ldr	r2, [pc, #48]	; (8008f20 <xTaskPriorityDisinherit+0xd4>)
 8008eee:	6013      	str	r3, [r2, #0]
 8008ef0:	693b      	ldr	r3, [r7, #16]
 8008ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4413      	add	r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4a09      	ldr	r2, [pc, #36]	; (8008f24 <xTaskPriorityDisinherit+0xd8>)
 8008efe:	441a      	add	r2, r3
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	3304      	adds	r3, #4
 8008f04:	4619      	mov	r1, r3
 8008f06:	4610      	mov	r0, r2
 8008f08:	f7fe f977 	bl	80071fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f10:	697b      	ldr	r3, [r7, #20]
	}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3718      	adds	r7, #24
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	2000524c 	.word	0x2000524c
 8008f20:	20005728 	.word	0x20005728
 8008f24:	20005250 	.word	0x20005250

08008f28 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008f32:	f7fe fb17 	bl	8007564 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008f36:	4b20      	ldr	r3, [pc, #128]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d113      	bne.n	8008f6a <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008f42:	4b1d      	ldr	r3, [pc, #116]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f52:	2101      	movs	r1, #1
 8008f54:	6838      	ldr	r0, [r7, #0]
 8008f56:	f000 f8f1 	bl	800913c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008f5a:	4b18      	ldr	r3, [pc, #96]	; (8008fbc <ulTaskNotifyTake+0x94>)
 8008f5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008f6a:	f7fe fb2b 	bl	80075c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008f6e:	f7fe faf9 	bl	8007564 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008f72:	4b11      	ldr	r3, [pc, #68]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008f7a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00e      	beq.n	8008fa0 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008f88:	4b0b      	ldr	r3, [pc, #44]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8008f92:	e005      	b.n	8008fa0 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8008f94:	4b08      	ldr	r3, [pc, #32]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	3a01      	subs	r2, #1
 8008f9c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fa0:	4b05      	ldr	r3, [pc, #20]	; (8008fb8 <ulTaskNotifyTake+0x90>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 8008faa:	f7fe fb0b 	bl	80075c4 <vPortExitCritical>

		return ulReturn;
 8008fae:	68fb      	ldr	r3, [r7, #12]
	}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}
 8008fb8:	2000524c 	.word	0x2000524c
 8008fbc:	e000ed04 	.word	0xe000ed04

08008fc0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b08a      	sub	sp, #40	; 0x28
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	4613      	mov	r3, r2
 8008fce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10a      	bne.n	8008ff0 <xTaskGenericNotify+0x30>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	61bb      	str	r3, [r7, #24]
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8008ff4:	f7fe fab6 	bl	8007564 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800900e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	2202      	movs	r2, #2
 8009014:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8009018:	79fb      	ldrb	r3, [r7, #7]
 800901a:	2b04      	cmp	r3, #4
 800901c:	d82d      	bhi.n	800907a <xTaskGenericNotify+0xba>
 800901e:	a201      	add	r2, pc, #4	; (adr r2, 8009024 <xTaskGenericNotify+0x64>)
 8009020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009024:	0800909d 	.word	0x0800909d
 8009028:	08009039 	.word	0x08009039
 800902c:	0800904b 	.word	0x0800904b
 8009030:	0800905b 	.word	0x0800905b
 8009034:	08009065 	.word	0x08009065
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8009038:	6a3b      	ldr	r3, [r7, #32]
 800903a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	431a      	orrs	r2, r3
 8009042:	6a3b      	ldr	r3, [r7, #32]
 8009044:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009048:	e02b      	b.n	80090a2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009050:	1c5a      	adds	r2, r3, #1
 8009052:	6a3b      	ldr	r3, [r7, #32]
 8009054:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009058:	e023      	b.n	80090a2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800905a:	6a3b      	ldr	r3, [r7, #32]
 800905c:	68ba      	ldr	r2, [r7, #8]
 800905e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8009062:	e01e      	b.n	80090a2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009064:	7ffb      	ldrb	r3, [r7, #31]
 8009066:	2b02      	cmp	r3, #2
 8009068:	d004      	beq.n	8009074 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8009072:	e016      	b.n	80090a2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 8009074:	2300      	movs	r3, #0
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8009078:	e013      	b.n	80090a2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009084:	d00c      	beq.n	80090a0 <xTaskGenericNotify+0xe0>
	__asm volatile
 8009086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800908a:	f383 8811 	msr	BASEPRI, r3
 800908e:	f3bf 8f6f 	isb	sy
 8009092:	f3bf 8f4f 	dsb	sy
 8009096:	617b      	str	r3, [r7, #20]
}
 8009098:	bf00      	nop
 800909a:	e7fe      	b.n	800909a <xTaskGenericNotify+0xda>
					break;
 800909c:	bf00      	nop
 800909e:	e000      	b.n	80090a2 <xTaskGenericNotify+0xe2>

					break;
 80090a0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80090a2:	7ffb      	ldrb	r3, [r7, #31]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d13a      	bne.n	800911e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	3304      	adds	r3, #4
 80090ac:	4618      	mov	r0, r3
 80090ae:	f7fe f901 	bl	80072b4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80090b2:	6a3b      	ldr	r3, [r7, #32]
 80090b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b6:	4b1d      	ldr	r3, [pc, #116]	; (800912c <xTaskGenericNotify+0x16c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d903      	bls.n	80090c6 <xTaskGenericNotify+0x106>
 80090be:	6a3b      	ldr	r3, [r7, #32]
 80090c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c2:	4a1a      	ldr	r2, [pc, #104]	; (800912c <xTaskGenericNotify+0x16c>)
 80090c4:	6013      	str	r3, [r2, #0]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ca:	4613      	mov	r3, r2
 80090cc:	009b      	lsls	r3, r3, #2
 80090ce:	4413      	add	r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4a17      	ldr	r2, [pc, #92]	; (8009130 <xTaskGenericNotify+0x170>)
 80090d4:	441a      	add	r2, r3
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	3304      	adds	r3, #4
 80090da:	4619      	mov	r1, r3
 80090dc:	4610      	mov	r0, r2
 80090de:	f7fe f88c 	bl	80071fa <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80090e2:	6a3b      	ldr	r3, [r7, #32]
 80090e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00a      	beq.n	8009100 <xTaskGenericNotify+0x140>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	f383 8811 	msr	BASEPRI, r3
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	f3bf 8f4f 	dsb	sy
 80090fa:	613b      	str	r3, [r7, #16]
}
 80090fc:	bf00      	nop
 80090fe:	e7fe      	b.n	80090fe <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009100:	6a3b      	ldr	r3, [r7, #32]
 8009102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009104:	4b0b      	ldr	r3, [pc, #44]	; (8009134 <xTaskGenericNotify+0x174>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800910a:	429a      	cmp	r2, r3
 800910c:	d907      	bls.n	800911e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <xTaskGenericNotify+0x178>)
 8009110:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009114:	601a      	str	r2, [r3, #0]
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800911e:	f7fe fa51 	bl	80075c4 <vPortExitCritical>

		return xReturn;
 8009122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8009124:	4618      	mov	r0, r3
 8009126:	3728      	adds	r7, #40	; 0x28
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20005728 	.word	0x20005728
 8009130:	20005250 	.word	0x20005250
 8009134:	2000524c 	.word	0x2000524c
 8009138:	e000ed04 	.word	0xe000ed04

0800913c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b084      	sub	sp, #16
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
 8009144:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009146:	4b21      	ldr	r3, [pc, #132]	; (80091cc <prvAddCurrentTaskToDelayedList+0x90>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800914c:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3304      	adds	r3, #4
 8009152:	4618      	mov	r0, r3
 8009154:	f7fe f8ae 	bl	80072b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800915e:	d10a      	bne.n	8009176 <prvAddCurrentTaskToDelayedList+0x3a>
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d007      	beq.n	8009176 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009166:	4b1a      	ldr	r3, [pc, #104]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	3304      	adds	r3, #4
 800916c:	4619      	mov	r1, r3
 800916e:	4819      	ldr	r0, [pc, #100]	; (80091d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009170:	f7fe f843 	bl	80071fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009174:	e026      	b.n	80091c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009176:	68fa      	ldr	r2, [r7, #12]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	4413      	add	r3, r2
 800917c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800917e:	4b14      	ldr	r3, [pc, #80]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	68ba      	ldr	r2, [r7, #8]
 8009184:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	429a      	cmp	r2, r3
 800918c:	d209      	bcs.n	80091a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800918e:	4b12      	ldr	r3, [pc, #72]	; (80091d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	3304      	adds	r3, #4
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7fe f851 	bl	8007242 <vListInsert>
}
 80091a0:	e010      	b.n	80091c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091a2:	4b0e      	ldr	r3, [pc, #56]	; (80091dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	4b0a      	ldr	r3, [pc, #40]	; (80091d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	3304      	adds	r3, #4
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7fe f847 	bl	8007242 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80091b4:	4b0a      	ldr	r3, [pc, #40]	; (80091e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d202      	bcs.n	80091c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80091be:	4a08      	ldr	r2, [pc, #32]	; (80091e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	6013      	str	r3, [r2, #0]
}
 80091c4:	bf00      	nop
 80091c6:	3710      	adds	r7, #16
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20005724 	.word	0x20005724
 80091d0:	2000524c 	.word	0x2000524c
 80091d4:	2000570c 	.word	0x2000570c
 80091d8:	200056dc 	.word	0x200056dc
 80091dc:	200056d8 	.word	0x200056d8
 80091e0:	20005740 	.word	0x20005740

080091e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b08a      	sub	sp, #40	; 0x28
 80091e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091ee:	f000 fb07 	bl	8009800 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091f2:	4b1c      	ldr	r3, [pc, #112]	; (8009264 <xTimerCreateTimerTask+0x80>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d021      	beq.n	800923e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091fe:	2300      	movs	r3, #0
 8009200:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009202:	1d3a      	adds	r2, r7, #4
 8009204:	f107 0108 	add.w	r1, r7, #8
 8009208:	f107 030c 	add.w	r3, r7, #12
 800920c:	4618      	mov	r0, r3
 800920e:	f7fd fdc3 	bl	8006d98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	68fa      	ldr	r2, [r7, #12]
 8009218:	9202      	str	r2, [sp, #8]
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	2302      	movs	r3, #2
 800921e:	9300      	str	r3, [sp, #0]
 8009220:	2300      	movs	r3, #0
 8009222:	460a      	mov	r2, r1
 8009224:	4910      	ldr	r1, [pc, #64]	; (8009268 <xTimerCreateTimerTask+0x84>)
 8009226:	4811      	ldr	r0, [pc, #68]	; (800926c <xTimerCreateTimerTask+0x88>)
 8009228:	f7fe ffaa 	bl	8008180 <xTaskCreateStatic>
 800922c:	4603      	mov	r3, r0
 800922e:	4a10      	ldr	r2, [pc, #64]	; (8009270 <xTimerCreateTimerTask+0x8c>)
 8009230:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009232:	4b0f      	ldr	r3, [pc, #60]	; (8009270 <xTimerCreateTimerTask+0x8c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800923a:	2301      	movs	r3, #1
 800923c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d10a      	bne.n	800925a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009248:	f383 8811 	msr	BASEPRI, r3
 800924c:	f3bf 8f6f 	isb	sy
 8009250:	f3bf 8f4f 	dsb	sy
 8009254:	613b      	str	r3, [r7, #16]
}
 8009256:	bf00      	nop
 8009258:	e7fe      	b.n	8009258 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800925a:	697b      	ldr	r3, [r7, #20]
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	2000577c 	.word	0x2000577c
 8009268:	08009ab0 	.word	0x08009ab0
 800926c:	080093a9 	.word	0x080093a9
 8009270:	20005780 	.word	0x20005780

08009274 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	; 0x28
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
 8009280:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009282:	2300      	movs	r3, #0
 8009284:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	623b      	str	r3, [r7, #32]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80092a2:	4b1a      	ldr	r3, [pc, #104]	; (800930c <xTimerGenericCommand+0x98>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d02a      	beq.n	8009300 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80092b6:	68bb      	ldr	r3, [r7, #8]
 80092b8:	2b05      	cmp	r3, #5
 80092ba:	dc18      	bgt.n	80092ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092bc:	f7ff fda8 	bl	8008e10 <xTaskGetSchedulerState>
 80092c0:	4603      	mov	r3, r0
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	d109      	bne.n	80092da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092c6:	4b11      	ldr	r3, [pc, #68]	; (800930c <xTimerGenericCommand+0x98>)
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	f107 0110 	add.w	r1, r7, #16
 80092ce:	2300      	movs	r3, #0
 80092d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d2:	f7fe fb6d 	bl	80079b0 <xQueueGenericSend>
 80092d6:	6278      	str	r0, [r7, #36]	; 0x24
 80092d8:	e012      	b.n	8009300 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092da:	4b0c      	ldr	r3, [pc, #48]	; (800930c <xTimerGenericCommand+0x98>)
 80092dc:	6818      	ldr	r0, [r3, #0]
 80092de:	f107 0110 	add.w	r1, r7, #16
 80092e2:	2300      	movs	r3, #0
 80092e4:	2200      	movs	r2, #0
 80092e6:	f7fe fb63 	bl	80079b0 <xQueueGenericSend>
 80092ea:	6278      	str	r0, [r7, #36]	; 0x24
 80092ec:	e008      	b.n	8009300 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092ee:	4b07      	ldr	r3, [pc, #28]	; (800930c <xTimerGenericCommand+0x98>)
 80092f0:	6818      	ldr	r0, [r3, #0]
 80092f2:	f107 0110 	add.w	r1, r7, #16
 80092f6:	2300      	movs	r3, #0
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	f7fe fc57 	bl	8007bac <xQueueGenericSendFromISR>
 80092fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009302:	4618      	mov	r0, r3
 8009304:	3728      	adds	r7, #40	; 0x28
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	2000577c 	.word	0x2000577c

08009310 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b088      	sub	sp, #32
 8009314:	af02      	add	r7, sp, #8
 8009316:	6078      	str	r0, [r7, #4]
 8009318:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800931a:	4b22      	ldr	r3, [pc, #136]	; (80093a4 <prvProcessExpiredTimer+0x94>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68db      	ldr	r3, [r3, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	3304      	adds	r3, #4
 8009328:	4618      	mov	r0, r3
 800932a:	f7fd ffc3 	bl	80072b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009334:	f003 0304 	and.w	r3, r3, #4
 8009338:	2b00      	cmp	r3, #0
 800933a:	d022      	beq.n	8009382 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	699a      	ldr	r2, [r3, #24]
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	18d1      	adds	r1, r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	683a      	ldr	r2, [r7, #0]
 8009348:	6978      	ldr	r0, [r7, #20]
 800934a:	f000 f8d1 	bl	80094f0 <prvInsertTimerInActiveList>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d01f      	beq.n	8009394 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009354:	2300      	movs	r3, #0
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	2300      	movs	r3, #0
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	2100      	movs	r1, #0
 800935e:	6978      	ldr	r0, [r7, #20]
 8009360:	f7ff ff88 	bl	8009274 <xTimerGenericCommand>
 8009364:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d113      	bne.n	8009394 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800936c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009370:	f383 8811 	msr	BASEPRI, r3
 8009374:	f3bf 8f6f 	isb	sy
 8009378:	f3bf 8f4f 	dsb	sy
 800937c:	60fb      	str	r3, [r7, #12]
}
 800937e:	bf00      	nop
 8009380:	e7fe      	b.n	8009380 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009382:	697b      	ldr	r3, [r7, #20]
 8009384:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009388:	f023 0301 	bic.w	r3, r3, #1
 800938c:	b2da      	uxtb	r2, r3
 800938e:	697b      	ldr	r3, [r7, #20]
 8009390:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	6978      	ldr	r0, [r7, #20]
 800939a:	4798      	blx	r3
}
 800939c:	bf00      	nop
 800939e:	3718      	adds	r7, #24
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}
 80093a4:	20005774 	.word	0x20005774

080093a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b084      	sub	sp, #16
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093b0:	f107 0308 	add.w	r3, r7, #8
 80093b4:	4618      	mov	r0, r3
 80093b6:	f000 f857 	bl	8009468 <prvGetNextExpireTime>
 80093ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 f803 	bl	80093cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093c6:	f000 f8d5 	bl	8009574 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093ca:	e7f1      	b.n	80093b0 <prvTimerTask+0x8>

080093cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093d6:	f7ff f92f 	bl	8008638 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093da:	f107 0308 	add.w	r3, r7, #8
 80093de:	4618      	mov	r0, r3
 80093e0:	f000 f866 	bl	80094b0 <prvSampleTimeNow>
 80093e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d130      	bne.n	800944e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d10a      	bne.n	8009408 <prvProcessTimerOrBlockTask+0x3c>
 80093f2:	687a      	ldr	r2, [r7, #4]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	429a      	cmp	r2, r3
 80093f8:	d806      	bhi.n	8009408 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093fa:	f7ff f92b 	bl	8008654 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093fe:	68f9      	ldr	r1, [r7, #12]
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7ff ff85 	bl	8009310 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009406:	e024      	b.n	8009452 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d008      	beq.n	8009420 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800940e:	4b13      	ldr	r3, [pc, #76]	; (800945c <prvProcessTimerOrBlockTask+0x90>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d101      	bne.n	800941c <prvProcessTimerOrBlockTask+0x50>
 8009418:	2301      	movs	r3, #1
 800941a:	e000      	b.n	800941e <prvProcessTimerOrBlockTask+0x52>
 800941c:	2300      	movs	r3, #0
 800941e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009420:	4b0f      	ldr	r3, [pc, #60]	; (8009460 <prvProcessTimerOrBlockTask+0x94>)
 8009422:	6818      	ldr	r0, [r3, #0]
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	4619      	mov	r1, r3
 800942e:	f7fe fe73 	bl	8008118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009432:	f7ff f90f 	bl	8008654 <xTaskResumeAll>
 8009436:	4603      	mov	r3, r0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d10a      	bne.n	8009452 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800943c:	4b09      	ldr	r3, [pc, #36]	; (8009464 <prvProcessTimerOrBlockTask+0x98>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
}
 800944c:	e001      	b.n	8009452 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800944e:	f7ff f901 	bl	8008654 <xTaskResumeAll>
}
 8009452:	bf00      	nop
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20005778 	.word	0x20005778
 8009460:	2000577c 	.word	0x2000577c
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009470:	4b0e      	ldr	r3, [pc, #56]	; (80094ac <prvGetNextExpireTime+0x44>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <prvGetNextExpireTime+0x16>
 800947a:	2201      	movs	r2, #1
 800947c:	e000      	b.n	8009480 <prvGetNextExpireTime+0x18>
 800947e:	2200      	movs	r2, #0
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d105      	bne.n	8009498 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800948c:	4b07      	ldr	r3, [pc, #28]	; (80094ac <prvGetNextExpireTime+0x44>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	e001      	b.n	800949c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800949c:	68fb      	ldr	r3, [r7, #12]
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20005774 	.word	0x20005774

080094b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80094b8:	f7ff f96a 	bl	8008790 <xTaskGetTickCount>
 80094bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094be:	4b0b      	ldr	r3, [pc, #44]	; (80094ec <prvSampleTimeNow+0x3c>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68fa      	ldr	r2, [r7, #12]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d205      	bcs.n	80094d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094c8:	f000 f936 	bl	8009738 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e002      	b.n	80094da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094da:	4a04      	ldr	r2, [pc, #16]	; (80094ec <prvSampleTimeNow+0x3c>)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094e0:	68fb      	ldr	r3, [r7, #12]
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	20005784 	.word	0x20005784

080094f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b086      	sub	sp, #24
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	60b9      	str	r1, [r7, #8]
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094fe:	2300      	movs	r3, #0
 8009500:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	68fa      	ldr	r2, [r7, #12]
 800950c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	429a      	cmp	r2, r3
 8009514:	d812      	bhi.n	800953c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	1ad2      	subs	r2, r2, r3
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	699b      	ldr	r3, [r3, #24]
 8009520:	429a      	cmp	r2, r3
 8009522:	d302      	bcc.n	800952a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e01b      	b.n	8009562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800952a:	4b10      	ldr	r3, [pc, #64]	; (800956c <prvInsertTimerInActiveList+0x7c>)
 800952c:	681a      	ldr	r2, [r3, #0]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	3304      	adds	r3, #4
 8009532:	4619      	mov	r1, r3
 8009534:	4610      	mov	r0, r2
 8009536:	f7fd fe84 	bl	8007242 <vListInsert>
 800953a:	e012      	b.n	8009562 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	429a      	cmp	r2, r3
 8009542:	d206      	bcs.n	8009552 <prvInsertTimerInActiveList+0x62>
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	429a      	cmp	r2, r3
 800954a:	d302      	bcc.n	8009552 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800954c:	2301      	movs	r3, #1
 800954e:	617b      	str	r3, [r7, #20]
 8009550:	e007      	b.n	8009562 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009552:	4b07      	ldr	r3, [pc, #28]	; (8009570 <prvInsertTimerInActiveList+0x80>)
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	3304      	adds	r3, #4
 800955a:	4619      	mov	r1, r3
 800955c:	4610      	mov	r0, r2
 800955e:	f7fd fe70 	bl	8007242 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009562:	697b      	ldr	r3, [r7, #20]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	20005778 	.word	0x20005778
 8009570:	20005774 	.word	0x20005774

08009574 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08e      	sub	sp, #56	; 0x38
 8009578:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800957a:	e0ca      	b.n	8009712 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2b00      	cmp	r3, #0
 8009580:	da18      	bge.n	80095b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009582:	1d3b      	adds	r3, r7, #4
 8009584:	3304      	adds	r3, #4
 8009586:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10a      	bne.n	80095a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	61fb      	str	r3, [r7, #28]
}
 80095a0:	bf00      	nop
 80095a2:	e7fe      	b.n	80095a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80095a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095aa:	6850      	ldr	r0, [r2, #4]
 80095ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095ae:	6892      	ldr	r2, [r2, #8]
 80095b0:	4611      	mov	r1, r2
 80095b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f2c0 80aa 	blt.w	8009710 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c2:	695b      	ldr	r3, [r3, #20]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d004      	beq.n	80095d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	3304      	adds	r3, #4
 80095cc:	4618      	mov	r0, r3
 80095ce:	f7fd fe71 	bl	80072b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80095d2:	463b      	mov	r3, r7
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7ff ff6b 	bl	80094b0 <prvSampleTimeNow>
 80095da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2b09      	cmp	r3, #9
 80095e0:	f200 8097 	bhi.w	8009712 <prvProcessReceivedCommands+0x19e>
 80095e4:	a201      	add	r2, pc, #4	; (adr r2, 80095ec <prvProcessReceivedCommands+0x78>)
 80095e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ea:	bf00      	nop
 80095ec:	08009615 	.word	0x08009615
 80095f0:	08009615 	.word	0x08009615
 80095f4:	08009615 	.word	0x08009615
 80095f8:	08009689 	.word	0x08009689
 80095fc:	0800969d 	.word	0x0800969d
 8009600:	080096e7 	.word	0x080096e7
 8009604:	08009615 	.word	0x08009615
 8009608:	08009615 	.word	0x08009615
 800960c:	08009689 	.word	0x08009689
 8009610:	0800969d 	.word	0x0800969d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800961a:	f043 0301 	orr.w	r3, r3, #1
 800961e:	b2da      	uxtb	r2, r3
 8009620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962a:	699b      	ldr	r3, [r3, #24]
 800962c:	18d1      	adds	r1, r2, r3
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009634:	f7ff ff5c 	bl	80094f0 <prvInsertTimerInActiveList>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d069      	beq.n	8009712 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800963e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009640:	6a1b      	ldr	r3, [r3, #32]
 8009642:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009644:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009648:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800964c:	f003 0304 	and.w	r3, r3, #4
 8009650:	2b00      	cmp	r3, #0
 8009652:	d05e      	beq.n	8009712 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	441a      	add	r2, r3
 800965c:	2300      	movs	r3, #0
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	2300      	movs	r3, #0
 8009662:	2100      	movs	r1, #0
 8009664:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009666:	f7ff fe05 	bl	8009274 <xTimerGenericCommand>
 800966a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d14f      	bne.n	8009712 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009676:	f383 8811 	msr	BASEPRI, r3
 800967a:	f3bf 8f6f 	isb	sy
 800967e:	f3bf 8f4f 	dsb	sy
 8009682:	61bb      	str	r3, [r7, #24]
}
 8009684:	bf00      	nop
 8009686:	e7fe      	b.n	8009686 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009688:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800968e:	f023 0301 	bic.w	r3, r3, #1
 8009692:	b2da      	uxtb	r2, r3
 8009694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009696:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800969a:	e03a      	b.n	8009712 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800969c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096a2:	f043 0301 	orr.w	r3, r3, #1
 80096a6:	b2da      	uxtb	r2, r3
 80096a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80096ae:	68ba      	ldr	r2, [r7, #8]
 80096b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80096b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b6:	699b      	ldr	r3, [r3, #24]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d10a      	bne.n	80096d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80096bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c0:	f383 8811 	msr	BASEPRI, r3
 80096c4:	f3bf 8f6f 	isb	sy
 80096c8:	f3bf 8f4f 	dsb	sy
 80096cc:	617b      	str	r3, [r7, #20]
}
 80096ce:	bf00      	nop
 80096d0:	e7fe      	b.n	80096d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	699a      	ldr	r2, [r3, #24]
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	18d1      	adds	r1, r2, r3
 80096da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096e0:	f7ff ff06 	bl	80094f0 <prvInsertTimerInActiveList>
					break;
 80096e4:	e015      	b.n	8009712 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80096e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096ec:	f003 0302 	and.w	r3, r3, #2
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d103      	bne.n	80096fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80096f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80096f6:	f7fd fc35 	bl	8006f64 <vPortFree>
 80096fa:	e00a      	b.n	8009712 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009702:	f023 0301 	bic.w	r3, r3, #1
 8009706:	b2da      	uxtb	r2, r3
 8009708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800970e:	e000      	b.n	8009712 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009710:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009712:	4b08      	ldr	r3, [pc, #32]	; (8009734 <prvProcessReceivedCommands+0x1c0>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	1d39      	adds	r1, r7, #4
 8009718:	2200      	movs	r2, #0
 800971a:	4618      	mov	r0, r3
 800971c:	f7fe fae2 	bl	8007ce4 <xQueueReceive>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	f47f af2a 	bne.w	800957c <prvProcessReceivedCommands+0x8>
	}
}
 8009728:	bf00      	nop
 800972a:	bf00      	nop
 800972c:	3730      	adds	r7, #48	; 0x30
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	2000577c 	.word	0x2000577c

08009738 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800973e:	e048      	b.n	80097d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009740:	4b2d      	ldr	r3, [pc, #180]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800974a:	4b2b      	ldr	r3, [pc, #172]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	3304      	adds	r3, #4
 8009758:	4618      	mov	r0, r3
 800975a:	f7fd fdab 	bl	80072b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	6a1b      	ldr	r3, [r3, #32]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d02e      	beq.n	80097d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	699b      	ldr	r3, [r3, #24]
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4413      	add	r3, r2
 800977c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800977e:	68ba      	ldr	r2, [r7, #8]
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	429a      	cmp	r2, r3
 8009784:	d90e      	bls.n	80097a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	68ba      	ldr	r2, [r7, #8]
 800978a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009792:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	3304      	adds	r3, #4
 800979a:	4619      	mov	r1, r3
 800979c:	4610      	mov	r0, r2
 800979e:	f7fd fd50 	bl	8007242 <vListInsert>
 80097a2:	e016      	b.n	80097d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80097a4:	2300      	movs	r3, #0
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	2300      	movs	r3, #0
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	2100      	movs	r1, #0
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f7ff fd60 	bl	8009274 <xTimerGenericCommand>
 80097b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10a      	bne.n	80097d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	603b      	str	r3, [r7, #0]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d1b1      	bne.n	8009740 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80097dc:	4b06      	ldr	r3, [pc, #24]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80097e2:	4b06      	ldr	r3, [pc, #24]	; (80097fc <prvSwitchTimerLists+0xc4>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a04      	ldr	r2, [pc, #16]	; (80097f8 <prvSwitchTimerLists+0xc0>)
 80097e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80097ea:	4a04      	ldr	r2, [pc, #16]	; (80097fc <prvSwitchTimerLists+0xc4>)
 80097ec:	697b      	ldr	r3, [r7, #20]
 80097ee:	6013      	str	r3, [r2, #0]
}
 80097f0:	bf00      	nop
 80097f2:	3718      	adds	r7, #24
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20005774 	.word	0x20005774
 80097fc:	20005778 	.word	0x20005778

08009800 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009806:	f7fd fead 	bl	8007564 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800980a:	4b15      	ldr	r3, [pc, #84]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d120      	bne.n	8009854 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009812:	4814      	ldr	r0, [pc, #80]	; (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009814:	f7fd fcc4 	bl	80071a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009818:	4813      	ldr	r0, [pc, #76]	; (8009868 <prvCheckForValidListAndQueue+0x68>)
 800981a:	f7fd fcc1 	bl	80071a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800981e:	4b13      	ldr	r3, [pc, #76]	; (800986c <prvCheckForValidListAndQueue+0x6c>)
 8009820:	4a10      	ldr	r2, [pc, #64]	; (8009864 <prvCheckForValidListAndQueue+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009824:	4b12      	ldr	r3, [pc, #72]	; (8009870 <prvCheckForValidListAndQueue+0x70>)
 8009826:	4a10      	ldr	r2, [pc, #64]	; (8009868 <prvCheckForValidListAndQueue+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800982a:	2300      	movs	r3, #0
 800982c:	9300      	str	r3, [sp, #0]
 800982e:	4b11      	ldr	r3, [pc, #68]	; (8009874 <prvCheckForValidListAndQueue+0x74>)
 8009830:	4a11      	ldr	r2, [pc, #68]	; (8009878 <prvCheckForValidListAndQueue+0x78>)
 8009832:	2110      	movs	r1, #16
 8009834:	200a      	movs	r0, #10
 8009836:	f7fe f81f 	bl	8007878 <xQueueGenericCreateStatic>
 800983a:	4603      	mov	r3, r0
 800983c:	4a08      	ldr	r2, [pc, #32]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800983e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009840:	4b07      	ldr	r3, [pc, #28]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d005      	beq.n	8009854 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009848:	4b05      	ldr	r3, [pc, #20]	; (8009860 <prvCheckForValidListAndQueue+0x60>)
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	490b      	ldr	r1, [pc, #44]	; (800987c <prvCheckForValidListAndQueue+0x7c>)
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fc38 	bl	80080c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009854:	f7fd feb6 	bl	80075c4 <vPortExitCritical>
}
 8009858:	bf00      	nop
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}
 800985e:	bf00      	nop
 8009860:	2000577c 	.word	0x2000577c
 8009864:	2000574c 	.word	0x2000574c
 8009868:	20005760 	.word	0x20005760
 800986c:	20005774 	.word	0x20005774
 8009870:	20005778 	.word	0x20005778
 8009874:	20005828 	.word	0x20005828
 8009878:	20005788 	.word	0x20005788
 800987c:	08009ab8 	.word	0x08009ab8

08009880 <__libc_init_array>:
 8009880:	b570      	push	{r4, r5, r6, lr}
 8009882:	4d0d      	ldr	r5, [pc, #52]	; (80098b8 <__libc_init_array+0x38>)
 8009884:	4c0d      	ldr	r4, [pc, #52]	; (80098bc <__libc_init_array+0x3c>)
 8009886:	1b64      	subs	r4, r4, r5
 8009888:	10a4      	asrs	r4, r4, #2
 800988a:	2600      	movs	r6, #0
 800988c:	42a6      	cmp	r6, r4
 800988e:	d109      	bne.n	80098a4 <__libc_init_array+0x24>
 8009890:	4d0b      	ldr	r5, [pc, #44]	; (80098c0 <__libc_init_array+0x40>)
 8009892:	4c0c      	ldr	r4, [pc, #48]	; (80098c4 <__libc_init_array+0x44>)
 8009894:	f000 f8f2 	bl	8009a7c <_init>
 8009898:	1b64      	subs	r4, r4, r5
 800989a:	10a4      	asrs	r4, r4, #2
 800989c:	2600      	movs	r6, #0
 800989e:	42a6      	cmp	r6, r4
 80098a0:	d105      	bne.n	80098ae <__libc_init_array+0x2e>
 80098a2:	bd70      	pop	{r4, r5, r6, pc}
 80098a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a8:	4798      	blx	r3
 80098aa:	3601      	adds	r6, #1
 80098ac:	e7ee      	b.n	800988c <__libc_init_array+0xc>
 80098ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80098b2:	4798      	blx	r3
 80098b4:	3601      	adds	r6, #1
 80098b6:	e7f2      	b.n	800989e <__libc_init_array+0x1e>
 80098b8:	08009b90 	.word	0x08009b90
 80098bc:	08009b90 	.word	0x08009b90
 80098c0:	08009b90 	.word	0x08009b90
 80098c4:	08009b94 	.word	0x08009b94

080098c8 <__retarget_lock_acquire_recursive>:
 80098c8:	4770      	bx	lr

080098ca <__retarget_lock_release_recursive>:
 80098ca:	4770      	bx	lr

080098cc <memcpy>:
 80098cc:	440a      	add	r2, r1
 80098ce:	4291      	cmp	r1, r2
 80098d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80098d4:	d100      	bne.n	80098d8 <memcpy+0xc>
 80098d6:	4770      	bx	lr
 80098d8:	b510      	push	{r4, lr}
 80098da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098e2:	4291      	cmp	r1, r2
 80098e4:	d1f9      	bne.n	80098da <memcpy+0xe>
 80098e6:	bd10      	pop	{r4, pc}

080098e8 <memset>:
 80098e8:	4402      	add	r2, r0
 80098ea:	4603      	mov	r3, r0
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d100      	bne.n	80098f2 <memset+0xa>
 80098f0:	4770      	bx	lr
 80098f2:	f803 1b01 	strb.w	r1, [r3], #1
 80098f6:	e7f9      	b.n	80098ec <memset+0x4>

080098f8 <cleanup_glue>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	460c      	mov	r4, r1
 80098fc:	6809      	ldr	r1, [r1, #0]
 80098fe:	4605      	mov	r5, r0
 8009900:	b109      	cbz	r1, 8009906 <cleanup_glue+0xe>
 8009902:	f7ff fff9 	bl	80098f8 <cleanup_glue>
 8009906:	4621      	mov	r1, r4
 8009908:	4628      	mov	r0, r5
 800990a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800990e:	f000 b869 	b.w	80099e4 <_free_r>
	...

08009914 <_reclaim_reent>:
 8009914:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <_reclaim_reent+0xb4>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	4283      	cmp	r3, r0
 800991a:	b570      	push	{r4, r5, r6, lr}
 800991c:	4604      	mov	r4, r0
 800991e:	d051      	beq.n	80099c4 <_reclaim_reent+0xb0>
 8009920:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009922:	b143      	cbz	r3, 8009936 <_reclaim_reent+0x22>
 8009924:	68db      	ldr	r3, [r3, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d14a      	bne.n	80099c0 <_reclaim_reent+0xac>
 800992a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800992c:	6819      	ldr	r1, [r3, #0]
 800992e:	b111      	cbz	r1, 8009936 <_reclaim_reent+0x22>
 8009930:	4620      	mov	r0, r4
 8009932:	f000 f857 	bl	80099e4 <_free_r>
 8009936:	6961      	ldr	r1, [r4, #20]
 8009938:	b111      	cbz	r1, 8009940 <_reclaim_reent+0x2c>
 800993a:	4620      	mov	r0, r4
 800993c:	f000 f852 	bl	80099e4 <_free_r>
 8009940:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009942:	b111      	cbz	r1, 800994a <_reclaim_reent+0x36>
 8009944:	4620      	mov	r0, r4
 8009946:	f000 f84d 	bl	80099e4 <_free_r>
 800994a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800994c:	b111      	cbz	r1, 8009954 <_reclaim_reent+0x40>
 800994e:	4620      	mov	r0, r4
 8009950:	f000 f848 	bl	80099e4 <_free_r>
 8009954:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009956:	b111      	cbz	r1, 800995e <_reclaim_reent+0x4a>
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f843 	bl	80099e4 <_free_r>
 800995e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009960:	b111      	cbz	r1, 8009968 <_reclaim_reent+0x54>
 8009962:	4620      	mov	r0, r4
 8009964:	f000 f83e 	bl	80099e4 <_free_r>
 8009968:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800996a:	b111      	cbz	r1, 8009972 <_reclaim_reent+0x5e>
 800996c:	4620      	mov	r0, r4
 800996e:	f000 f839 	bl	80099e4 <_free_r>
 8009972:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009974:	b111      	cbz	r1, 800997c <_reclaim_reent+0x68>
 8009976:	4620      	mov	r0, r4
 8009978:	f000 f834 	bl	80099e4 <_free_r>
 800997c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800997e:	b111      	cbz	r1, 8009986 <_reclaim_reent+0x72>
 8009980:	4620      	mov	r0, r4
 8009982:	f000 f82f 	bl	80099e4 <_free_r>
 8009986:	69a3      	ldr	r3, [r4, #24]
 8009988:	b1e3      	cbz	r3, 80099c4 <_reclaim_reent+0xb0>
 800998a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800998c:	4620      	mov	r0, r4
 800998e:	4798      	blx	r3
 8009990:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009992:	b1b9      	cbz	r1, 80099c4 <_reclaim_reent+0xb0>
 8009994:	4620      	mov	r0, r4
 8009996:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800999a:	f7ff bfad 	b.w	80098f8 <cleanup_glue>
 800999e:	5949      	ldr	r1, [r1, r5]
 80099a0:	b941      	cbnz	r1, 80099b4 <_reclaim_reent+0xa0>
 80099a2:	3504      	adds	r5, #4
 80099a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099a6:	2d80      	cmp	r5, #128	; 0x80
 80099a8:	68d9      	ldr	r1, [r3, #12]
 80099aa:	d1f8      	bne.n	800999e <_reclaim_reent+0x8a>
 80099ac:	4620      	mov	r0, r4
 80099ae:	f000 f819 	bl	80099e4 <_free_r>
 80099b2:	e7ba      	b.n	800992a <_reclaim_reent+0x16>
 80099b4:	680e      	ldr	r6, [r1, #0]
 80099b6:	4620      	mov	r0, r4
 80099b8:	f000 f814 	bl	80099e4 <_free_r>
 80099bc:	4631      	mov	r1, r6
 80099be:	e7ef      	b.n	80099a0 <_reclaim_reent+0x8c>
 80099c0:	2500      	movs	r5, #0
 80099c2:	e7ef      	b.n	80099a4 <_reclaim_reent+0x90>
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	bf00      	nop
 80099c8:	20000210 	.word	0x20000210

080099cc <__malloc_lock>:
 80099cc:	4801      	ldr	r0, [pc, #4]	; (80099d4 <__malloc_lock+0x8>)
 80099ce:	f7ff bf7b 	b.w	80098c8 <__retarget_lock_acquire_recursive>
 80099d2:	bf00      	nop
 80099d4:	20005878 	.word	0x20005878

080099d8 <__malloc_unlock>:
 80099d8:	4801      	ldr	r0, [pc, #4]	; (80099e0 <__malloc_unlock+0x8>)
 80099da:	f7ff bf76 	b.w	80098ca <__retarget_lock_release_recursive>
 80099de:	bf00      	nop
 80099e0:	20005878 	.word	0x20005878

080099e4 <_free_r>:
 80099e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099e6:	2900      	cmp	r1, #0
 80099e8:	d044      	beq.n	8009a74 <_free_r+0x90>
 80099ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099ee:	9001      	str	r0, [sp, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f1a1 0404 	sub.w	r4, r1, #4
 80099f6:	bfb8      	it	lt
 80099f8:	18e4      	addlt	r4, r4, r3
 80099fa:	f7ff ffe7 	bl	80099cc <__malloc_lock>
 80099fe:	4a1e      	ldr	r2, [pc, #120]	; (8009a78 <_free_r+0x94>)
 8009a00:	9801      	ldr	r0, [sp, #4]
 8009a02:	6813      	ldr	r3, [r2, #0]
 8009a04:	b933      	cbnz	r3, 8009a14 <_free_r+0x30>
 8009a06:	6063      	str	r3, [r4, #4]
 8009a08:	6014      	str	r4, [r2, #0]
 8009a0a:	b003      	add	sp, #12
 8009a0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a10:	f7ff bfe2 	b.w	80099d8 <__malloc_unlock>
 8009a14:	42a3      	cmp	r3, r4
 8009a16:	d908      	bls.n	8009a2a <_free_r+0x46>
 8009a18:	6825      	ldr	r5, [r4, #0]
 8009a1a:	1961      	adds	r1, r4, r5
 8009a1c:	428b      	cmp	r3, r1
 8009a1e:	bf01      	itttt	eq
 8009a20:	6819      	ldreq	r1, [r3, #0]
 8009a22:	685b      	ldreq	r3, [r3, #4]
 8009a24:	1949      	addeq	r1, r1, r5
 8009a26:	6021      	streq	r1, [r4, #0]
 8009a28:	e7ed      	b.n	8009a06 <_free_r+0x22>
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	685b      	ldr	r3, [r3, #4]
 8009a2e:	b10b      	cbz	r3, 8009a34 <_free_r+0x50>
 8009a30:	42a3      	cmp	r3, r4
 8009a32:	d9fa      	bls.n	8009a2a <_free_r+0x46>
 8009a34:	6811      	ldr	r1, [r2, #0]
 8009a36:	1855      	adds	r5, r2, r1
 8009a38:	42a5      	cmp	r5, r4
 8009a3a:	d10b      	bne.n	8009a54 <_free_r+0x70>
 8009a3c:	6824      	ldr	r4, [r4, #0]
 8009a3e:	4421      	add	r1, r4
 8009a40:	1854      	adds	r4, r2, r1
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	6011      	str	r1, [r2, #0]
 8009a46:	d1e0      	bne.n	8009a0a <_free_r+0x26>
 8009a48:	681c      	ldr	r4, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	6053      	str	r3, [r2, #4]
 8009a4e:	4421      	add	r1, r4
 8009a50:	6011      	str	r1, [r2, #0]
 8009a52:	e7da      	b.n	8009a0a <_free_r+0x26>
 8009a54:	d902      	bls.n	8009a5c <_free_r+0x78>
 8009a56:	230c      	movs	r3, #12
 8009a58:	6003      	str	r3, [r0, #0]
 8009a5a:	e7d6      	b.n	8009a0a <_free_r+0x26>
 8009a5c:	6825      	ldr	r5, [r4, #0]
 8009a5e:	1961      	adds	r1, r4, r5
 8009a60:	428b      	cmp	r3, r1
 8009a62:	bf04      	itt	eq
 8009a64:	6819      	ldreq	r1, [r3, #0]
 8009a66:	685b      	ldreq	r3, [r3, #4]
 8009a68:	6063      	str	r3, [r4, #4]
 8009a6a:	bf04      	itt	eq
 8009a6c:	1949      	addeq	r1, r1, r5
 8009a6e:	6021      	streq	r1, [r4, #0]
 8009a70:	6054      	str	r4, [r2, #4]
 8009a72:	e7ca      	b.n	8009a0a <_free_r+0x26>
 8009a74:	b003      	add	sp, #12
 8009a76:	bd30      	pop	{r4, r5, pc}
 8009a78:	2000587c 	.word	0x2000587c

08009a7c <_init>:
 8009a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a7e:	bf00      	nop
 8009a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a82:	bc08      	pop	{r3}
 8009a84:	469e      	mov	lr, r3
 8009a86:	4770      	bx	lr

08009a88 <_fini>:
 8009a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a8a:	bf00      	nop
 8009a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a8e:	bc08      	pop	{r3}
 8009a90:	469e      	mov	lr, r3
 8009a92:	4770      	bx	lr
